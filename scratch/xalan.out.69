<!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="schema"></a>1 Schema for XForms</h2> 

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Micah (W3C XForms Working Group) --&gt;
&lt;!-- converted with http://www.w3.org/2001/03/webdata/xsu --&gt;
&lt;!DOCTYPE xsd:schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" [
&lt;!ENTITY % p 'xsd:'&gt;
&lt;!ENTITY % s ':xsd'&gt;
]&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xform="http://www.w3.org/2001/06/xforms"
targetNamespace="http://www.w3.org/2001/06/xforms"
elementFormDefault="qualified"&gt;
  &lt;!-- 
structural elements
--&gt;
  &lt;xsd:element name="xform"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of the xform container element.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element ref="xform:submitInfo" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:model" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:instance" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:bind" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="model"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of model container. Content model TBD.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="instance"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of instance container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any" maxOccurs="unbounded"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submitInfo"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of submit info container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
        &lt;!-- allow zero or more submitExtension elements --&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="target" type="xsd:anyURI" use="required"/&gt;
      &lt;xsd:attribute name="method" type="xform:methodType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:attributeGroup name="linkingAttributes"&gt;
    &lt;xsd:attribute name="href" type="xsd:anyURI"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="bind"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of bind container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
User Interface form controls and other elements
--&gt;
  &lt;xsd:attributeGroup name="commonUIAttributes"&gt;
    &lt;xsd:attribute name="lang" type="xsd:language" use="optional"/&gt;
    &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
    &lt;xsd:attribute name="class" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="style" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="xform" type="xsd:IDREF" use="optional"/&gt;
    &lt;xsd:attribute name="accessKey" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="navIndex" type="xsd:nonNegativeInteger" use="optional"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="caption"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="hint"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="help"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="onevent"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Defined in a different specification&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:group name="choiceGroup"&gt;
    &lt;xsd:choice&gt;
      &lt;xsd:element ref="xform:choices"/&gt;
      &lt;xsd:element ref="xform:item"/&gt;
    &lt;/xsd:choice&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="choices"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence maxOccurs="unbounded"&gt;
        &lt;xsd:group ref="xform:choiceGroup"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="item" type="xform:string"/&gt;
  &lt;xsd:group name="commonUIChildren"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xform:caption"/&gt;
      &lt;xsd:element ref="xform:help" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:hint" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:onevent" minOccurs="0"/&gt;
      &lt;xsd:any namespace="##any"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="textbox"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="secret"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="uploadMedia"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="mediaType" type="xform:spaceSeparatedListType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectOne"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectMany"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectBoolean"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="range"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="start" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="end" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="stepSize" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="button"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="output"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="xform" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="format" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submit"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="reset"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
Bring over xsd simpleTypes
--&gt;
  &lt;xsd:simpleType name="decimal"&gt;
    &lt;xsd:restriction base="xsd:decimal"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="string"&gt;
    &lt;xsd:restriction base="xsd:string"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="boolean"&gt;
    &lt;xsd:restriction base="xsd:boolean"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="date"&gt;
    &lt;xsd:restriction base="xsd:date"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="time"&gt;
    &lt;xsd:restriction base="xsd:time"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;!-- Note: similar for all other built-in Schema types; new schema was not available at publish 

time --&gt;
  &lt;!--
New simpleTypes
--&gt;
  &lt;xsd:simpleType name="currency"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="[A-Z]{3}"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="maskType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="((A|a|X|x|N|n|M|m)|(\\.))*([0-9\*](A|a|X|x|N|n|M|m))?"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="spaceSeparatedListType"&gt;
    &lt;xsd:list itemType="xsd:token"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="selectUIType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="radioGroup"/&gt;
      &lt;xsd:enumeration value="checkboxGroup"/&gt;
      &lt;xsd:enumeration value="pulldown"/&gt;
      &lt;xsd:enumeration value="listbox"/&gt;
      &lt;xsd:enumeration value="comboGroup"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="methodType"&gt;
    &lt;xsd:restriction base="xform:string"&gt;
      &lt;xsd:enumeration value="postXML"/&gt;
      &lt;xsd:enumeration value="post"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;</pre></td></tr></table>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="ui"></a>1 XForms User Interface</h2>
<div class="div2">
    
<h3><a name="ui-conditional"></a>1.1 Conditional Constructs For Dynamic User Interfaces</h3>
    
    <p>
      The XForms User Interface allows the authoring of
      dynamic user interfaces, i.e., user interfaces that
      vary based on the current state of the
      instance data being populated. As an example,
      portions of a questionnaire pertaining to the user's
      automobile may become <em>relevant</em> only if
      the user has answered in the affirmative to the
      question 'Do you own a car?'.  Another
      use case for such dynamic user interfaces
      is when the underlying <a title="" href="#">XForms Model</a> contains
      conditional structures.</p>

    <div class="div3">
      
<h4><a name="ui-conditional-switch"></a>1.1.1 switch</h4>
      <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">Please do not attach semantics to the
          element name to prejudge the design.
        </td></tr></table>
      <p>
        This element contains one or more
        <code>case</code> elements.  Each
        <code>case</code> has an <code>id</code> attribute
        that is used within event handlers appearing
        within the form controls to activate or deactivate
        that  portion of the user interface created by the markup
        contained within that <code>case</code> element.  
      </p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;switch id="01" default="initial"&gt;
  &lt;case id="us"&gt;
    &lt;group&gt;
      &lt;caption&gt;Please Specify a US Shipping Address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="uk"&gt;
    &lt;group &gt;
      &lt;caption&gt;Please specify a UK shipping address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="initial"&gt;
    &lt;group &gt;
      ...
    &lt;/group&gt;
  &lt;/case&gt;
&lt;/switch&gt;</pre></td></tr></table>

      <p>The above will result in the portion of the user interface
        contained within the <em>default case</em> being
        initially displayed.
        Next, we define an XForms event handler <code>toggle</code>  below for
        activating and deactivating different portions of this
        conditional construct.</p>  

      <div class="example">
        
<h5>Example: XML Representation: Action  &lt;<code>toggle</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;toggle switch="switchID" case="caseID" /&gt;</pre></td></tr></table>
        <blockquote><p>
          Attribute <code>switch</code> identifies the
            switch constructor to be affected.
          <br>Attribute <code>case</code> identifies the portion of
            the <code>switch</code> construct to activate.
        </p></blockquote>
      </div>
    <p>
      In addition to event handler <code>toggle</code>, event handler
      <code>scroll</code>
      might be used within construct <code>switch</code> to cycle through
      the various contained  <code>case</code> clauses.</p></div>

    
  </div><div class="div2">
    
<h3><a name="ui-repeat"></a>1.2 Repeating Structures</h3>
    
    <p>
      The XForms Model allows the definition of repeating
      structures such as multiple items being purchased
      within a purchase order.  When defining the XForms Model, such higher-level aggregations are constructed
      out of basic building blocks; similarly, here we
      define higher-level user interface constructs that
      build on the form controls defined previously, that can bind to
      data structures such as lists and collections.</p>

    <div class="div3">
      
<h4><a name="ui-repeat-design"></a>1.2.1 Design Rationale</h4>
      
      <p>
        The basic XForms form controls defined so far
        permit populating data instances  conforming to
        Schema simpleTypes.
        These form controls can be aggregated using
        <code>group</code>(see <a href="#"><b>???</b></a>)  to form higher-level user
        interface form controls. As an extension to this, the user interface markup for
        repeating structures only adds encapsulation  metadata 
        about the collection being populated, as well as the
        necessary controls needed for adding, deleting and
        navigating the items in the repeating structure.
        Finally, this section also defines relevant portions of the
        processing model that track the item that is
        <em>current</em> in a repeat structure..</p>


      
      <p> Element <code>repeat</code> encapsulates the following
        pieces of metadata:</p>

      <ul>
        <li>
          <p><em>
              Binding expression</em> specifying the collection to be
            populated by the contained XForms form
            controls. 
            This binding expression returns a <em>node-set</em> that
            represents the collection of items over which
            this <code>repeat</code> will iterate.</p>
          <div class="issue"><p class="prefix"><a name="nodeset-vs-ref"></a><b>Issue (nodeset-vs-ref):</b></p><p>Question: should we call this binding
              attribute <code>node-set</code> as opposed to
              <code>ref</code> to highlight that we
              use the returned node-set rather than the
              single desired node as in most other usages of the <code>ref</code> attribute? Note that submit and reset also use full node-set processing.</p></div>
        </li>
        <li>
          <p>
            <em>Starting index</em> of the first element from the
            collection to be displayed to the user.</p>
        </li>
        <li>
          <p><em>
              Number of elements</em> 
            from the collection to be displayed to the user.</p>
        </li>
      </ul>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-handlers"></a>1.2.2 Special Event Handlers For  Element <code>repeat</code></h4>

      <p>
        We define  XForms-specific event handlers for
        use within element <code>repeat</code>.
        These event handlers will appear within element
        <code>onevent</code> to specify the event handler to
        trigger when an event is received by the containing
        event listener.
        In the examples below, we will assume event
        <code>dom-click</code>;
        however, note that this specification does not normatively
        define the mapping between  physical events 
        and specific behaviors.</p>

      <p>
        Construct <code>repeat</code> introduces the notion of a
        <em>cursor</em> that is maintained by
        the XForms processing model for each repeating structure.
        Thus, each <code>repeat</code> has its own 
        a conceptual <em>cursor</em>.
        Event handlers are provided for querying and updating  the
        position of this cursor;
        this cursor position in turn is used for determining the
        behavior of <code>insert</code> and <code>delete</code>.
        Thus, these event handlers can be thought of as the markup
        equivalent of the additions to the XForms DOM
        introduced by construct <code>repeat</code>.
      </p>
      
      
      
      <ol>
        <li>
          <p>
            <code>setRepeatCursor</code>        for marking an item  as
            being <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>setRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;setRepeatCursor repeat="repeatId" cursor="itemID"/&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em> is to be updated.
              <br> Attribute <code>cursor</code> identifies  the
                <em>cursor</em>  position. It should be a
                binding expression that evaluates to an element of
                the node set being iterated over by this repeat construct.
              

              
            </p></blockquote>
          </div>

        </li>
        <li>
          <p>
            <code>getRepeatCursor</code>        for accessing 
            position of the repeat cursor.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>getRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;getRepeatCursor repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be obtained.
            </p></blockquote>
          </div>

        </li>
        <li><p>
            <code>scroll</code>       
            for changing item that is <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>scroll</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;scroll repeat="repeatId" step="n" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be updated.
              <br>Attribute <code>step</code> is an integer value that
                specifies  the amount by
                which the list is scrolled. Negative values may
                be used to scroll the list in the reverse direction.
            </p></blockquote>
            <div class="issue"><p class="prefix"><a name="additional-actions"></a><b>Issue (additional-actions):</b></p><p>We may add special values for scrolling to the
                top or bottom of the list, as well as other needed actions.</p></div>
          </div>
        </li>
        
        <li><p>
            <code>insert</code> for inserting an item at the current
            cursor position into the
            repeating structure. This causes the instantiation of
            the necessary user interface 
            for populating a new entry in the underlying collection. It also
            updates the instance data by instantiating the necessary
            nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>insert</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;insert repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>

        </li>
        <li><p> <code>delete</code> for deleting an item from the
            repeating structure.  This causes the destruction of
            the necessary user interface for populating the entry
            at the current cursor position in the underlying
            collection. It also updates the instance data by
            destroying  the necessary nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>delete</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;delete repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>
        </li>
      </ol>

      <p>
        The event handlers enumerated above may be used within event
        listeners attached to <code>button</code> elements
        placed inside the body of construct <code>repeat</code>.
        In combination with the facilities provided by
        element <code>group</code> and CSS layout, this allows
        document authors to customize the positioning of 
        controls for standard actions such as insert or
        delete.
      </p>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-repeat"></a>1.2.3 repeat</h4>
      
      <p>
        Element <code>repeat</code> represents a repeating homogenous
        collection, in other words, a collection consisting
        entirely of like form controls.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat ref="bindingExpr" startIndex="si" number="n"&gt;
  &lt;caption&gt;Shopping Cart&lt;/caption&gt;
  &lt;!-- XForms UI for one element of the collection --&gt;
  &lt;!-- controls for adding, deleting and navigating entries --&gt;
&lt;/repeat&gt;</pre></td></tr></table>

      
      <p>Notice that the underlying schema for the
        collection being populated would typically have defined
        attributes <code>minOccurs</code> and
        <code>maxOccurs</code>; these values will in
        turn determine if the user agent displays
        appropriate UI controls for the user to add or
        delete entries in the collection.  Event listeners 
        within element <code>repeat</code> control UI
        aspects such as scrolling and insertion. This
        specification will not specify normative means for
        displaying such add and delete controls; as with the
        rest of the XForms User Interface design, we leave
        these to be flexible while showing a default
        presentation.</p>

      <div class="example">
<h5>Example: XML Representation: &lt;<code>repeat</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat
  (common attributes)
  startIndex = xsd:positiveInteger : 1
  number = xsd:nonNegativeInteger
&gt;
  &lt;!-- caption, help?, hint?, onevent?, ( any form control )* --&gt;
&lt;/repeat&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>startIndex = xsd:positiveInteger : 1</b> -  1-based hint to the XForms Processor 
            as to which starting element from the collection to
            display.
          <br><b>number = xsd:nonNegativeInteger</b> - hint to the XForms Processor 
            as to how many elements from the collection to
            display.
          <br><b>any form control</b> - any form control
            defined in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div>

    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-consequences"></a>1.2.4 Design Consequences</h4>
      
      <p>
        This subsection enumerates the design consequences
        and is for members of the Working Group to evaluate
        the above design.</p>

      <ul>
        <li>
          <p>
            Binding expression is placed on element
            <code>repeat</code> and should refer to the
            collection being populated, not to an
            individual item of the collection. Thus, it
            would be   <code>items/item</code> in  a
            purchase order, where element <code>items</code>
            contains one or more <code>item</code>
            children.</p>
        </li>
        <li>
          <p>
            The form controls appearing inside
            element <code>repeat</code> needs to be suitable for
            populating individual items of the collection.
            Thus, to continue the purchase order example,
            the contained XForms form controls
            would need to be suitable for populating a data
            instance conforming to <code>item</code>.</p>
        </li>
        <li>
          <p>
            A simple but powerful consequence of the above
            is that if the XForms Model specifies nested
            collections, then we can create a corresponding
            user interface by <em>nesting</em>
            <code>repeat</code> elements.  As an example,
            consider the XForms Model  for a hypothetical
            purchase order that contains element
            <code>items</code> for holding collection of
            <code>item</code> elements. Further, assume that
            element <code>item</code> comprises of two atomic
            fields <code>catalogNumber</code>,
            <code>partNumber</code> and a collection
            <code>colors</code> which in turn holds one or more
            <code>color</code> elements.  The user interface for
            populating this data instance would use nested
            <code>repeat</code> elements.</p> </li> <li>
          <p>
            Notice that the
            contained XForms form controls inside
            element <code>repeat</code> do not explicitly
            specify the index of the collection entry being
            populated. This is intentional; it keeps both
            authoring as well as the processing model
            simple.  But as a consequence, the user
            interface cannot bind to an element from the
            underlying collection <em>out of
              sequence</em>.  Notice that this is not a
            serious drawback because the use interface layer
            can always populate a specific member of a
            collection without using element
            <code>repeat</code>.</p>
        </li>
      </ul>
    </div>
  </div><div class="div2">
    
<h3><a name="ui-template"></a>1.3 Reusable Form Controls</h3>
    <div class="div3">
      
<h4><a name="ui-templates-creating"></a>1.3.1 Creating User Interface Templates</h4>
      
      <p>
        <em>User Interface templates</em> allow the creation of
        reusable user interface components.  Just as we can
        define data types and structures that can be reused
        within the XForms Model,
        reusable user interface components allow us to
        design complex user interfaces using the basic
        building blocks described in the previous section, and then reuse
        these components in multiple situations. As with any
        component framework, this has two basic
        requirements:</p>

      <ul>
        <li>
          <p>
            Components need to declare what aspects of the component are parameterizable 
            by the caller.</p>
        </li>
        <li>
          <p>
            The caller needs to be able to override the default values of the parameters 
            declared in the component.</p>
        </li>
      </ul>
      
      <p>
        Here, we describe such a component framework along with sample markup. For 
        this example, assume that <code>USShippingAddress</code> is a reusable data 
        type that is used in multiple places in the <a title="" href="#">XForms Model</a>, e.g. the user will 
        be asked for a <code>billingAddress</code> and <code>shippingAddress</code>--both 
        of type <code>USShippingAddress</code>.</p>

      
      <p>
        First, we show a simple example that is designed to bind an XForms <a title="" href="#">form 
        control</a> to a <a title="" href="#">model item</a> of 
        type <code>address</code> with no attention to making the component 
        reusable.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox ref="address/street"&gt;
    &lt;caption&gt;Please enter your street address&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="address/zip"&gt;
    &lt;caption&gt;Zip Code&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        Next, we prepare the above 
        fragment to become a reusable component 
        that could be used for obtaining both the shipping and billing address. To do 
        this, we need to parameterize those portions of the <em>component</em> that 
        the caller will wish to modify.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uiTemplate id="AddressWidget"&gt;
  &lt;param name="streetPrompt"/&gt;
  &lt;param name="zipPrompt"/&gt;
  &lt;param name="border" value="line"/&gt;
  &lt;group border="$border"&gt;
    &lt;textbox ref="address/street"&gt;
      &lt;caption&gt;&lt;value-of name="streetPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
    &lt;textbox ref="address/zip"&gt;
      &lt;caption&gt;&lt;value-of name="zipPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
  &lt;/group&gt;
&lt;/uiTemplate&gt;</pre></td></tr></table>

      
      <p>
        Note that the markup shown above does not create a
        user interface; user interface is created by explicitly
        instantiating the component via element
        <code>useUITemplate</code> described next.</p>
      
      
      <p>
        Next, we use this component to instantiate the
        user interface for obtaining the shipping and
        billing address.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;useUITemplate ref="myAddress" component="AddressWidget"&gt;
  &lt;withParam name="streetPrompt"&gt;Shipping Street Address&lt;/withParam&gt;
  &lt;withParam name="zipPrompt"&gt;Zip Code for shipping state&lt;/withParam&gt;
  &lt;withParam name="border"&gt;dotted&lt;/withParam&gt;
&lt;/useUITemplate&gt;</pre></td></tr></table>

      
      <p>
        The reusable component is instantiated by element <code>useUITemplate</code>; 
        parameter values are specified by the contained
        <code>withParam</code> elements.
        Attribute <code>xform</code> sets the binding context relative to which binding expressions within the instantiated  template get evaluated.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-templates-dtd-temp"></a>1.3.2 DTD For uiTemplate And useUITemplate</h4>
      
      <p>TODO: convert to 'XML Representation' consistent with rest of spec.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!--       param element for use in uiTemplate --&gt;
&lt;!ELEMENT  param      EMPTY&gt;
&lt;!--       name       Name of parameter being declared           --&gt;
&lt;!ATTLIST  param
  name     CDATA      #REQUIRED&gt;
&lt;!--       Defines a reusable user interface template --&gt;
&lt;!ELEMENT  uiTemplate   (param*, %FormControls;+)&gt;
&lt;!--       id         Unique ID for use when instantiating this template --&gt;
&lt;!ATTLIST  uiTemplate
  id       ID         #REQUIRED&gt;
&lt;!--       Used to pass parameter values when instantiating uiTemplate --&gt;
&lt;!ELEMENT  withParam  #MIXED&gt;
&lt;!--       name       Name of parameter whose value is being specified --&gt;
&lt;!ATTLIST  withParam
name       CDATA      #REQUIRED&gt;</pre></td></tr></table>

    </div>
  </div><div class="div2">
    
<h3><a name="ui-layout"></a>1.4 Layout in XForms</h3>
    
    
    <p>
      The <code>group</code> element is used as a container
      for defining a hierarchy of form controls.  Groups lay
      out their children using a constraint-based system
      that supports both relative flexible sizing and
      intrinsic sizing.  Groups can be nested to create
      complex hierarchies. Using CSS, an inline box can be
      specified using the <code>display</code> property with
      a value of <code>inline</code>.  A block-level group can
      be specified with a value of <code>block</code>, which
      is the default.</p>

    <div class="example">
<h5>Example: XML Representation: &lt;<code>group</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;!-- all form controls &amp; mixed content --&gt;
&lt;/group&gt;</pre></td></tr></table>
      
    </div>

    <p>
      All form
      controls defined so far are treated as
      inline text for purposes of XHTML processing.
      XForms visual clients are expected to use   a  a box layout model as defined by CSS for
      determining the overall layout of the XForms visual
      interface. Grouping of form controls using
      element <code>group</code>
      also provides semantics about the relationship amongst user
      interface controls; such knowledge can be useful in
      delivering a coherent UI to small devices--e.g.,
      if the user interface needs to be split up amongst several
      screens,  controls appearing inside the
      same
      group would typically be rendered on the same screen.</p>

    
    <p>
      Finally, the hierarchy defined by nested group elements is used to determine the 
      traversal order specified by attribute <code>navindex</code> on form controls. 
      Setting the input focus on a  group results in the focus being set to the 
      lowest form control in the tabbing order within that
      group.</p>

    <div class="issue"><p class="prefix"><a name="group-binding"></a><b>Issue (group-binding):</b></p><p>t is an open issue whether the <a title="" href="#">binding</a> attribute <code>xform</code> 
        is allowed on element <code>group</code>.
        It might make authoring easier but makes
        implementations significantly harder.
        Note that this note is here because at one point in our
        design we said that controls inside a
        <code>group</code>
        could use relative XPath expressions with the context being
        set by the containing group. </p></div>
    <div class="div3">
      
<h4><a name="ui-layout-dir"></a>1.4.1 Orientation and Direction</h4>
      
      <p>
        Containers typically have an orientation and a direction.
        The <code>box-orient</code> CSS property specifies
        the orientation of the group.  It has values of
        <code>horizontal</code>, <code>vertical</code>, or
        <code>inherit</code>.  A horizontal group lays out its
        children in a horizontal line, and a vertical group
        stacks its children vertically.
      </p>

      
      <p>
        The <code>box-direction</code>
        CSS property specifies the direction of the group.  It has values of
        <code>normal</code>, <code>reverse</code>, and <code>inherit</code>.  
        A normal horizontal group lays out its children from left to right, and a normal
        vertical group lays out its children from top to bottom.  
      </p>

      
      <p>
        Direction within nested groups is inherited by
        default.  If direction is omitted on the outermost
        group, it is assumed to have a
        horizontal orientation and normal direction.
      </p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox  ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="/person/ssid"&gt;
    &lt;caption&gt;Enter your SSID&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        When items are placed in a group without specifying any additional 
        information about their size, then the  sizes the children 
        <em>intrinsically</em>. In other words, the group makes each child only as big
        as it needs to be. Notice that in 
        the above example, the two form controls are only as
        big as they need to be, and that this in turn
        determines the size of the group (since we assume for
        simplicity that this group is not nested).</p>

      
      <p>
        Widths can be specified for items inside a horizontal group. When an 
        object specifies its width in CSS, it is telling the group that 
        it would like to be that width. Similarly, heights can be specified in CSS
        for items in a vertical group. 
        A non-nested group placed inside an enclosing CSS block will obey
        all the usual sizing rules of the block.  For example, setting the width of
        a non-nested group to 100% ensures that the group is the maximum width permitted by 
        the enclosing CSS block.
      </p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-align"></a>1.4.2 Alignment</h4>
      
      <p>
        The <code>box-align</code> property specifies how controls are aligned along the orientation
        of the group.  Its possible values are <code>left</code>, <code>center</code>, <code>right</code>, 
        <code>top</code>, <code>bottom</code>, <code>baseline</code>, <code>stretch</code> and <code>inherit</code>.  
        The default value is <code>stretch</code>.
      </p>

      
      <p>
        By default a horizontal group ensures that all children are the same height.  Once a height
        is computed for a horizontal group, all of the children are stretched vertically to the
        height of the group (minus the CSS border and padding on the group).  
        Similarly, a vertical group ensures that all its children are
        the same width.  The stretch policy overrides any
        specified width or height values.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: vertical"&gt;
  &lt;output ref="/person/name"/&gt;
  &lt;output ref="/person/age"/&gt;
  &lt;output ref="/person/country"/&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In addition to <code>stretch</code>, a horizontal group can also align its children using the 
        values <code>top</code>, <code>center</code>, <code>baseline</code> and <code>bottom</code>.  A vertical
        group can align its children using the values <code>left</code>, <code>center</code>, and <code>right</code>.
        When these values are used, the items are no longer stretched.  They are sized intrinsically
        and then aligned on the group axis according to the specified property value on the containing
        group.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-sizing"></a>1.4.3 Controlling  Automatic Sizing </h4>
      
      <p>
        The layout algorithm can be controlled by specifying the
        degree to which items may <em>flex</em> i.e.,
        the degree to which an item allows itself to be
        <em>auto-sized</em>.
        Items in groupes fall into two categories: <code>flexible</code> and 
        <code>inflexible</code>. Inflexible objects will not grow, even when there is 
        extra space left over in the group.
        When several objects in a group are flexible, the extra space is divided 
        among the objects based on how flexible they are. The group determines how 
        much space to give an object by adding up the flex values on all of its 
        children. An object gets an amount of extra space equal to the percentage 
        of flex that it is responsible for.</p>

      
      <p>
        For example, if two objects have a flex of 1, then after both objects 
        are given their preferred sizes, the first object 
        gets 1/(1+1) = 1/2 of the extra space, and the second object also gets 1/2 
        of the extra space.</p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: horizontal; width: 200px"&gt;
  &lt;textbox  style="box-flex: 1"  ref="/person/name&gt;
    &lt;caption&gt;Please enter your full name: &lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox  style="box-flex: 1.5" ref="/person/age&gt;
    &lt;caption&gt;How young?&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-minmax"></a>1.4.4 Preferred, Minimum, and Maximum Sizes</h4>
      
      <p>
        For inflexible objects, the specification of the <code>width</code>
        and <code>height</code> CSS properties can be used to 
        specify a preferred  size. If these properties are omitted, 
        an inflexible object will be sized intrinsically, i.e., it will be given
        the minimum amount of space required to lay out the item.</p>

      
      <p>
        With flexible objects, there are more options. Just as with inflexible 
        objects, the <code>width</code>
        and <code>height</code> properties can be used to specify a preferred 
        size. Unlike inflexible objects, however, this size is only a guideline. 
        A flexible object will stretch as necessary. It will also 
        shrink if required until it can shrink no more (e.g., 
        when the object hits its minimum required intrinsic size).</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre> &lt;group style="box-orient: vertical"&gt;
  &lt;textbox style="box-flex: 1; height:1000px" ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name:&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In the above example if the group were to shrink, the
        textbox being flexible would shrink--despite its
        preferred height of <code>1000px</code>.  The group
        continues to shrink minimum required height for the
        textbox is reached. After that, the textbox can
        shrink no further. If the group were to continue to
        shrink, the form control's contents would be
        clipped, and a portion of the control would no
        longer be visible.</p>

      
      <p>
        For a more fine-grained control of
        minimum and maximum sizes, the
        <code>min-width</code>, <code>min-height</code>,
        <code>max-width</code>, and <code>max-height</code>
        CSS properties can be used. When specified, these
        properties provide extra information to the group as
        it shrinks and grows the object in question.</p>

      
      <p>
        In a horizontal group, for example, if a minimum
        width is specified, then the flexible object will
        not be allowed to shrink below that width. If a
        maximum width is specified, then the flexible object
        will not be allowed to grow beyond that width.</p>

      
      <p>
        The above example demonstrates the use of <code>min-height</code> and <code>max-height</code>
        within a vertical group. In the first 
        image the group has been shrunk until it is smaller than 100 pixels in 
        height. Because the <code>iframe</code> has a specified minimum height of 100 pixels, 
        it is not allowed to shrink any further, and so as the group falls below 100 
        pixels, the <code>iframe</code> gets clipped, and portions of it become invisible.</p>

      
      <p>
        In the second image, the group has been expanded past 300 pixels in 
        height. Even though the group is getting bigger, the extra space is not 
        being consumed by the <code>iframe</code>, because its maximum height of 300 pixels has 
        been reached. It will grow no further.</p>

      
      <p>
        Below is another example illustrating min and max width.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example unavailable at publication time</pre></td></tr></table>

      <p>
        In the above example, the group has been stretched so that it is very 
        wide. The first child has a maximum width of 50 pixels, and it divides the 
        excess space equally with the second child until its maximum width has 
        been reached. After that, since it is not allowed to grow any further, the 
        remaining space all goes to the second child.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-packing"></a>1.4.5 Packing Controls</h4> 
      
      <p>
        When all of the items within a <code>group</code>
        element are inflexible or when all objects have
        grown to their maximum sizes and can stretch no
        further, extra space may be left over in the group.
        An additional property can be used to dictate how
        any additional space should be distributed between
        objects.  The CSS property <code>box-pack</code> has
        the possible values of <code>left</code>,
        <code>right</code>, <code>top</code>,
        <code>bottom</code>, <code>center</code>,
        <code>justify</code> and <code>inherit</code>.  The
        default is <code>justify</code>.</p>

      
      <p>
        In the above example, the button is centered within the group using the <code>box-align</code>
        and <code>box-pack</code> properties together.  The former centers the button vertically, and
        the latter centers the button horizontally.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-overflow"></a>1.4.6 Overflow</h4>
      
      <p>
        Items within a group may use the CSS <code>overflow</code> property to obtain horizontal and
        vertical scrollbars as needed.  Flexible objects that shrink below their minimum intrinsic
        size (but that still have a size greater than a specified CSS minimum) can display 
        scrollbars using the <code>overflow</code> property.  If overflow is not specified,
        the object will be clipped instead.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-inline"></a>1.4.7 Inlines and Blocks</h4>
      
      <p>
        Whether an element is inline or block when placed directly inside a group is irrelevant.  Objects
        will be flowed horizontally or vertically based off the
        <code>box-orient</code> property.
      </p>

      
      <p>
        When any raw text nodes are encountered directly inside a group, an anonymous block is constructed
        to wrap the text.  This anonymous block then participates in the  layout as
        a single item.</p>

    </div>
    
  </div><div class="div2">
    
<h3><a name="ui-subforms"></a>1.5 Multiple Sub-forms Or Sub-pages</h3>
    <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">March 12, 2001</td></tr><tr><td valign="top" align="left" colspan="2">Notice that we originally started by creating
        an equivalent of <code>fieldset</code>--but given
        the present design of the XForms UI layer, and given
        that conditional construct <code>case</code> can take
        either <code>group</code> or <code>html:div</code> elements,
        there is little left in this construct that is
        additional to what is in XHTML <code>html:div</code>.  I
        therefore suggest simply reusing <code>html:div</code>--perhaps
        bind XForms specific behaviors through CSS
        e.g., a stack of cards for example?  The way I am
        thinking of this is that whether it is a stack of
        cards shown one at a time, or a sequence of tab
        dialogs is a presentation issue and might therefore be
        best left to CSS as we have done with the rest of the
        presentational issues in XForms.</td></tr></table>
    <div class="div3">
      
<h4><a name="ui-subforms-pages"></a>1.5.1 Subpages</h4>
      
      <p>
        Subpages provide a means to present XForms one bit at a time, breaking a complex 
        task into smaller, simpler parts. Presentation of a subpage can occupy the entire 
        "page" or just part of a page. Different presentations are possible, e.g. a 
        stack of <em>pages</em> with visible name tags, or as a set of buttons for flipping 
        through the stack or navigating directly to a particular subpage. One possible 
        representation is a <code>formset</code> element enclosing one or more <code>subpage</code> 
        elements, each of which starts with a
        <code>caption</code> element. </p>

      
      <p>
        As the name implies <code>subpage</code> is not specific to XForms--our intent 
        is to design <code>subpage</code> so that it can be used within XForms--and 
        more generally within XHTML to create presentations where document views are 
        presented to progressively reveal the document
        structure and content.</p>

    </div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="ui"></a>1 XForms User Interface</h2>
<div class="div2">
    
<h3><a name="ui-conditional"></a>1.1 Conditional Constructs For Dynamic User Interfaces</h3>
    
    <p>
      The XForms User Interface allows the authoring of
      dynamic user interfaces, i.e., user interfaces that
      vary based on the current state of the
      instance data being populated. As an example,
      portions of a questionnaire pertaining to the user's
      automobile may become <em>relevant</em> only if
      the user has answered in the affirmative to the
      question 'Do you own a car?'.  Another
      use case for such dynamic user interfaces
      is when the underlying <a title="" href="#">XForms Model</a> contains
      conditional structures.</p>

    <div class="div3">
      
<h4><a name="ui-conditional-switch"></a>1.1.1 switch</h4>
      <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">Please do not attach semantics to the
          element name to prejudge the design.
        </td></tr></table>
      <p>
        This element contains one or more
        <code>case</code> elements.  Each
        <code>case</code> has an <code>id</code> attribute
        that is used within event handlers appearing
        within the form controls to activate or deactivate
        that  portion of the user interface created by the markup
        contained within that <code>case</code> element.  
      </p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;switch id="01" default="initial"&gt;
  &lt;case id="us"&gt;
    &lt;group&gt;
      &lt;caption&gt;Please Specify a US Shipping Address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="uk"&gt;
    &lt;group &gt;
      &lt;caption&gt;Please specify a UK shipping address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="initial"&gt;
    &lt;group &gt;
      ...
    &lt;/group&gt;
  &lt;/case&gt;
&lt;/switch&gt;</pre></td></tr></table>

      <p>The above will result in the portion of the user interface
        contained within the <em>default case</em> being
        initially displayed.
        Next, we define an XForms event handler <code>toggle</code>  below for
        activating and deactivating different portions of this
        conditional construct.</p>  

      <div class="example">
        
<h5>Example: XML Representation: Action  &lt;<code>toggle</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;toggle switch="switchID" case="caseID" /&gt;</pre></td></tr></table>
        <blockquote><p>
          Attribute <code>switch</code> identifies the
            switch constructor to be affected.
          <br>Attribute <code>case</code> identifies the portion of
            the <code>switch</code> construct to activate.
        </p></blockquote>
      </div>
    <p>
      In addition to event handler <code>toggle</code>, event handler
      <code>scroll</code>
      might be used within construct <code>switch</code> to cycle through
      the various contained  <code>case</code> clauses.</p></div>

    
  </div><div class="div2">
    
<h3><a name="ui-repeat"></a>1.2 Repeating Structures</h3>
    
    <p>
      The XForms Model allows the definition of repeating
      structures such as multiple items being purchased
      within a purchase order.  When defining the XForms Model, such higher-level aggregations are constructed
      out of basic building blocks; similarly, here we
      define higher-level user interface constructs that
      build on the form controls defined previously, that can bind to
      data structures such as lists and collections.</p>

    <div class="div3">
      
<h4><a name="ui-repeat-design"></a>1.2.1 Design Rationale</h4>
      
      <p>
        The basic XForms form controls defined so far
        permit populating data instances  conforming to
        Schema simpleTypes.
        These form controls can be aggregated using
        <code>group</code>(see <a href="#"><b>???</b></a>)  to form higher-level user
        interface form controls. As an extension to this, the user interface markup for
        repeating structures only adds encapsulation  metadata 
        about the collection being populated, as well as the
        necessary controls needed for adding, deleting and
        navigating the items in the repeating structure.
        Finally, this section also defines relevant portions of the
        processing model that track the item that is
        <em>current</em> in a repeat structure..</p>


      
      <p> Element <code>repeat</code> encapsulates the following
        pieces of metadata:</p>

      <ul>
        <li>
          <p><em>
              Binding expression</em> specifying the collection to be
            populated by the contained XForms form
            controls. 
            This binding expression returns a <em>node-set</em> that
            represents the collection of items over which
            this <code>repeat</code> will iterate.</p>
          <div class="issue"><p class="prefix"><a name="nodeset-vs-ref"></a><b>Issue (nodeset-vs-ref):</b></p><p>Question: should we call this binding
              attribute <code>node-set</code> as opposed to
              <code>ref</code> to highlight that we
              use the returned node-set rather than the
              single desired node as in most other usages of the <code>ref</code> attribute? Note that submit and reset also use full node-set processing.</p></div>
        </li>
        <li>
          <p>
            <em>Starting index</em> of the first element from the
            collection to be displayed to the user.</p>
        </li>
        <li>
          <p><em>
              Number of elements</em> 
            from the collection to be displayed to the user.</p>
        </li>
      </ul>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-handlers"></a>1.2.2 Special Event Handlers For  Element <code>repeat</code></h4>

      <p>
        We define  XForms-specific event handlers for
        use within element <code>repeat</code>.
        These event handlers will appear within element
        <code>onevent</code> to specify the event handler to
        trigger when an event is received by the containing
        event listener.
        In the examples below, we will assume event
        <code>dom-click</code>;
        however, note that this specification does not normatively
        define the mapping between  physical events 
        and specific behaviors.</p>

      <p>
        Construct <code>repeat</code> introduces the notion of a
        <em>cursor</em> that is maintained by
        the XForms processing model for each repeating structure.
        Thus, each <code>repeat</code> has its own 
        a conceptual <em>cursor</em>.
        Event handlers are provided for querying and updating  the
        position of this cursor;
        this cursor position in turn is used for determining the
        behavior of <code>insert</code> and <code>delete</code>.
        Thus, these event handlers can be thought of as the markup
        equivalent of the additions to the XForms DOM
        introduced by construct <code>repeat</code>.
      </p>
      
      
      
      <ol>
        <li>
          <p>
            <code>setRepeatCursor</code>        for marking an item  as
            being <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>setRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;setRepeatCursor repeat="repeatId" cursor="itemID"/&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em> is to be updated.
              <br> Attribute <code>cursor</code> identifies  the
                <em>cursor</em>  position. It should be a
                binding expression that evaluates to an element of
                the node set being iterated over by this repeat construct.
              

              
            </p></blockquote>
          </div>

        </li>
        <li>
          <p>
            <code>getRepeatCursor</code>        for accessing 
            position of the repeat cursor.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>getRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;getRepeatCursor repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be obtained.
            </p></blockquote>
          </div>

        </li>
        <li><p>
            <code>scroll</code>       
            for changing item that is <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>scroll</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;scroll repeat="repeatId" step="n" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be updated.
              <br>Attribute <code>step</code> is an integer value that
                specifies  the amount by
                which the list is scrolled. Negative values may
                be used to scroll the list in the reverse direction.
            </p></blockquote>
            <div class="issue"><p class="prefix"><a name="additional-actions"></a><b>Issue (additional-actions):</b></p><p>We may add special values for scrolling to the
                top or bottom of the list, as well as other needed actions.</p></div>
          </div>
        </li>
        
        <li><p>
            <code>insert</code> for inserting an item at the current
            cursor position into the
            repeating structure. This causes the instantiation of
            the necessary user interface 
            for populating a new entry in the underlying collection. It also
            updates the instance data by instantiating the necessary
            nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>insert</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;insert repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>

        </li>
        <li><p> <code>delete</code> for deleting an item from the
            repeating structure.  This causes the destruction of
            the necessary user interface for populating the entry
            at the current cursor position in the underlying
            collection. It also updates the instance data by
            destroying  the necessary nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>delete</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;delete repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>
        </li>
      </ol>

      <p>
        The event handlers enumerated above may be used within event
        listeners attached to <code>button</code> elements
        placed inside the body of construct <code>repeat</code>.
        In combination with the facilities provided by
        element <code>group</code> and CSS layout, this allows
        document authors to customize the positioning of 
        controls for standard actions such as insert or
        delete.
      </p>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-repeat"></a>1.2.3 repeat</h4>
      
      <p>
        Element <code>repeat</code> represents a repeating homogenous
        collection, in other words, a collection consisting
        entirely of like form controls.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat ref="bindingExpr" startIndex="si" number="n"&gt;
  &lt;caption&gt;Shopping Cart&lt;/caption&gt;
  &lt;!-- XForms UI for one element of the collection --&gt;
  &lt;!-- controls for adding, deleting and navigating entries --&gt;
&lt;/repeat&gt;</pre></td></tr></table>

      
      <p>Notice that the underlying schema for the
        collection being populated would typically have defined
        attributes <code>minOccurs</code> and
        <code>maxOccurs</code>; these values will in
        turn determine if the user agent displays
        appropriate UI controls for the user to add or
        delete entries in the collection.  Event listeners 
        within element <code>repeat</code> control UI
        aspects such as scrolling and insertion. This
        specification will not specify normative means for
        displaying such add and delete controls; as with the
        rest of the XForms User Interface design, we leave
        these to be flexible while showing a default
        presentation.</p>

      <div class="example">
<h5>Example: XML Representation: &lt;<code>repeat</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat
  (common attributes)
  startIndex = xsd:positiveInteger : 1
  number = xsd:nonNegativeInteger
&gt;
  &lt;!-- caption, help?, hint?, onevent?, ( any form control )* --&gt;
&lt;/repeat&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>startIndex = xsd:positiveInteger : 1</b> -  1-based hint to the XForms Processor 
            as to which starting element from the collection to
            display.
          <br><b>number = xsd:nonNegativeInteger</b> - hint to the XForms Processor 
            as to how many elements from the collection to
            display.
          <br><b>any form control</b> - any form control
            defined in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div>

    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-consequences"></a>1.2.4 Design Consequences</h4>
      
      <p>
        This subsection enumerates the design consequences
        and is for members of the Working Group to evaluate
        the above design.</p>

      <ul>
        <li>
          <p>
            Binding expression is placed on element
            <code>repeat</code> and should refer to the
            collection being populated, not to an
            individual item of the collection. Thus, it
            would be   <code>items/item</code> in  a
            purchase order, where element <code>items</code>
            contains one or more <code>item</code>
            children.</p>
        </li>
        <li>
          <p>
            The form controls appearing inside
            element <code>repeat</code> needs to be suitable for
            populating individual items of the collection.
            Thus, to continue the purchase order example,
            the contained XForms form controls
            would need to be suitable for populating a data
            instance conforming to <code>item</code>.</p>
        </li>
        <li>
          <p>
            A simple but powerful consequence of the above
            is that if the XForms Model specifies nested
            collections, then we can create a corresponding
            user interface by <em>nesting</em>
            <code>repeat</code> elements.  As an example,
            consider the XForms Model  for a hypothetical
            purchase order that contains element
            <code>items</code> for holding collection of
            <code>item</code> elements. Further, assume that
            element <code>item</code> comprises of two atomic
            fields <code>catalogNumber</code>,
            <code>partNumber</code> and a collection
            <code>colors</code> which in turn holds one or more
            <code>color</code> elements.  The user interface for
            populating this data instance would use nested
            <code>repeat</code> elements.</p> </li> <li>
          <p>
            Notice that the
            contained XForms form controls inside
            element <code>repeat</code> do not explicitly
            specify the index of the collection entry being
            populated. This is intentional; it keeps both
            authoring as well as the processing model
            simple.  But as a consequence, the user
            interface cannot bind to an element from the
            underlying collection <em>out of
              sequence</em>.  Notice that this is not a
            serious drawback because the use interface layer
            can always populate a specific member of a
            collection without using element
            <code>repeat</code>.</p>
        </li>
      </ul>
    </div>
  </div><div class="div2">
    
<h3><a name="ui-template"></a>1.3 Reusable Form Controls</h3>
    <div class="div3">
      
<h4><a name="ui-templates-creating"></a>1.3.1 Creating User Interface Templates</h4>
      
      <p>
        <em>User Interface templates</em> allow the creation of
        reusable user interface components.  Just as we can
        define data types and structures that can be reused
        within the XForms Model,
        reusable user interface components allow us to
        design complex user interfaces using the basic
        building blocks described in the previous section, and then reuse
        these components in multiple situations. As with any
        component framework, this has two basic
        requirements:</p>

      <ul>
        <li>
          <p>
            Components need to declare what aspects of the component are parameterizable 
            by the caller.</p>
        </li>
        <li>
          <p>
            The caller needs to be able to override the default values of the parameters 
            declared in the component.</p>
        </li>
      </ul>
      
      <p>
        Here, we describe such a component framework along with sample markup. For 
        this example, assume that <code>USShippingAddress</code> is a reusable data 
        type that is used in multiple places in the <a title="" href="#">XForms Model</a>, e.g. the user will 
        be asked for a <code>billingAddress</code> and <code>shippingAddress</code>--both 
        of type <code>USShippingAddress</code>.</p>

      
      <p>
        First, we show a simple example that is designed to bind an XForms <a title="" href="#">form 
        control</a> to a <a title="" href="#">model item</a> of 
        type <code>address</code> with no attention to making the component 
        reusable.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox ref="address/street"&gt;
    &lt;caption&gt;Please enter your street address&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="address/zip"&gt;
    &lt;caption&gt;Zip Code&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        Next, we prepare the above 
        fragment to become a reusable component 
        that could be used for obtaining both the shipping and billing address. To do 
        this, we need to parameterize those portions of the <em>component</em> that 
        the caller will wish to modify.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uiTemplate id="AddressWidget"&gt;
  &lt;param name="streetPrompt"/&gt;
  &lt;param name="zipPrompt"/&gt;
  &lt;param name="border" value="line"/&gt;
  &lt;group border="$border"&gt;
    &lt;textbox ref="address/street"&gt;
      &lt;caption&gt;&lt;value-of name="streetPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
    &lt;textbox ref="address/zip"&gt;
      &lt;caption&gt;&lt;value-of name="zipPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
  &lt;/group&gt;
&lt;/uiTemplate&gt;</pre></td></tr></table>

      
      <p>
        Note that the markup shown above does not create a
        user interface; user interface is created by explicitly
        instantiating the component via element
        <code>useUITemplate</code> described next.</p>
      
      
      <p>
        Next, we use this component to instantiate the
        user interface for obtaining the shipping and
        billing address.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;useUITemplate ref="myAddress" component="AddressWidget"&gt;
  &lt;withParam name="streetPrompt"&gt;Shipping Street Address&lt;/withParam&gt;
  &lt;withParam name="zipPrompt"&gt;Zip Code for shipping state&lt;/withParam&gt;
  &lt;withParam name="border"&gt;dotted&lt;/withParam&gt;
&lt;/useUITemplate&gt;</pre></td></tr></table>

      
      <p>
        The reusable component is instantiated by element <code>useUITemplate</code>; 
        parameter values are specified by the contained
        <code>withParam</code> elements.
        Attribute <code>xform</code> sets the binding context relative to which binding expressions within the instantiated  template get evaluated.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-templates-dtd-temp"></a>1.3.2 DTD For uiTemplate And useUITemplate</h4>
      
      <p>TODO: convert to 'XML Representation' consistent with rest of spec.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!--       param element for use in uiTemplate --&gt;
&lt;!ELEMENT  param      EMPTY&gt;
&lt;!--       name       Name of parameter being declared           --&gt;
&lt;!ATTLIST  param
  name     CDATA      #REQUIRED&gt;
&lt;!--       Defines a reusable user interface template --&gt;
&lt;!ELEMENT  uiTemplate   (param*, %FormControls;+)&gt;
&lt;!--       id         Unique ID for use when instantiating this template --&gt;
&lt;!ATTLIST  uiTemplate
  id       ID         #REQUIRED&gt;
&lt;!--       Used to pass parameter values when instantiating uiTemplate --&gt;
&lt;!ELEMENT  withParam  #MIXED&gt;
&lt;!--       name       Name of parameter whose value is being specified --&gt;
&lt;!ATTLIST  withParam
name       CDATA      #REQUIRED&gt;</pre></td></tr></table>

    </div>
  </div><div class="div2">
    
<h3><a name="ui-layout"></a>1.4 Layout in XForms</h3>
    
    
    <p>
      The <code>group</code> element is used as a container
      for defining a hierarchy of form controls.  Groups lay
      out their children using a constraint-based system
      that supports both relative flexible sizing and
      intrinsic sizing.  Groups can be nested to create
      complex hierarchies. Using CSS, an inline box can be
      specified using the <code>display</code> property with
      a value of <code>inline</code>.  A block-level group can
      be specified with a value of <code>block</code>, which
      is the default.</p>

    <div class="example">
<h5>Example: XML Representation: &lt;<code>group</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;!-- all form controls &amp; mixed content --&gt;
&lt;/group&gt;</pre></td></tr></table>
      
    </div>

    <p>
      All form
      controls defined so far are treated as
      inline text for purposes of XHTML processing.
      XForms visual clients are expected to use   a  a box layout model as defined by CSS for
      determining the overall layout of the XForms visual
      interface. Grouping of form controls using
      element <code>group</code>
      also provides semantics about the relationship amongst user
      interface controls; such knowledge can be useful in
      delivering a coherent UI to small devices--e.g.,
      if the user interface needs to be split up amongst several
      screens,  controls appearing inside the
      same
      group would typically be rendered on the same screen.</p>

    
    <p>
      Finally, the hierarchy defined by nested group elements is used to determine the 
      traversal order specified by attribute <code>navindex</code> on form controls. 
      Setting the input focus on a  group results in the focus being set to the 
      lowest form control in the tabbing order within that
      group.</p>

    <div class="issue"><p class="prefix"><a name="group-binding"></a><b>Issue (group-binding):</b></p><p>t is an open issue whether the <a title="" href="#">binding</a> attribute <code>xform</code> 
        is allowed on element <code>group</code>.
        It might make authoring easier but makes
        implementations significantly harder.
        Note that this note is here because at one point in our
        design we said that controls inside a
        <code>group</code>
        could use relative XPath expressions with the context being
        set by the containing group. </p></div>
    <div class="div3">
      
<h4><a name="ui-layout-dir"></a>1.4.1 Orientation and Direction</h4>
      
      <p>
        Containers typically have an orientation and a direction.
        The <code>box-orient</code> CSS property specifies
        the orientation of the group.  It has values of
        <code>horizontal</code>, <code>vertical</code>, or
        <code>inherit</code>.  A horizontal group lays out its
        children in a horizontal line, and a vertical group
        stacks its children vertically.
      </p>

      
      <p>
        The <code>box-direction</code>
        CSS property specifies the direction of the group.  It has values of
        <code>normal</code>, <code>reverse</code>, and <code>inherit</code>.  
        A normal horizontal group lays out its children from left to right, and a normal
        vertical group lays out its children from top to bottom.  
      </p>

      
      <p>
        Direction within nested groups is inherited by
        default.  If direction is omitted on the outermost
        group, it is assumed to have a
        horizontal orientation and normal direction.
      </p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox  ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="/person/ssid"&gt;
    &lt;caption&gt;Enter your SSID&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        When items are placed in a group without specifying any additional 
        information about their size, then the  sizes the children 
        <em>intrinsically</em>. In other words, the group makes each child only as big
        as it needs to be. Notice that in 
        the above example, the two form controls are only as
        big as they need to be, and that this in turn
        determines the size of the group (since we assume for
        simplicity that this group is not nested).</p>

      
      <p>
        Widths can be specified for items inside a horizontal group. When an 
        object specifies its width in CSS, it is telling the group that 
        it would like to be that width. Similarly, heights can be specified in CSS
        for items in a vertical group. 
        A non-nested group placed inside an enclosing CSS block will obey
        all the usual sizing rules of the block.  For example, setting the width of
        a non-nested group to 100% ensures that the group is the maximum width permitted by 
        the enclosing CSS block.
      </p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-align"></a>1.4.2 Alignment</h4>
      
      <p>
        The <code>box-align</code> property specifies how controls are aligned along the orientation
        of the group.  Its possible values are <code>left</code>, <code>center</code>, <code>right</code>, 
        <code>top</code>, <code>bottom</code>, <code>baseline</code>, <code>stretch</code> and <code>inherit</code>.  
        The default value is <code>stretch</code>.
      </p>

      
      <p>
        By default a horizontal group ensures that all children are the same height.  Once a height
        is computed for a horizontal group, all of the children are stretched vertically to the
        height of the group (minus the CSS border and padding on the group).  
        Similarly, a vertical group ensures that all its children are
        the same width.  The stretch policy overrides any
        specified width or height values.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: vertical"&gt;
  &lt;output ref="/person/name"/&gt;
  &lt;output ref="/person/age"/&gt;
  &lt;output ref="/person/country"/&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In addition to <code>stretch</code>, a horizontal group can also align its children using the 
        values <code>top</code>, <code>center</code>, <code>baseline</code> and <code>bottom</code>.  A vertical
        group can align its children using the values <code>left</code>, <code>center</code>, and <code>right</code>.
        When these values are used, the items are no longer stretched.  They are sized intrinsically
        and then aligned on the group axis according to the specified property value on the containing
        group.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-sizing"></a>1.4.3 Controlling  Automatic Sizing </h4>
      
      <p>
        The layout algorithm can be controlled by specifying the
        degree to which items may <em>flex</em> i.e.,
        the degree to which an item allows itself to be
        <em>auto-sized</em>.
        Items in groupes fall into two categories: <code>flexible</code> and 
        <code>inflexible</code>. Inflexible objects will not grow, even when there is 
        extra space left over in the group.
        When several objects in a group are flexible, the extra space is divided 
        among the objects based on how flexible they are. The group determines how 
        much space to give an object by adding up the flex values on all of its 
        children. An object gets an amount of extra space equal to the percentage 
        of flex that it is responsible for.</p>

      
      <p>
        For example, if two objects have a flex of 1, then after both objects 
        are given their preferred sizes, the first object 
        gets 1/(1+1) = 1/2 of the extra space, and the second object also gets 1/2 
        of the extra space.</p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: horizontal; width: 200px"&gt;
  &lt;textbox  style="box-flex: 1"  ref="/person/name&gt;
    &lt;caption&gt;Please enter your full name: &lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox  style="box-flex: 1.5" ref="/person/age&gt;
    &lt;caption&gt;How young?&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-minmax"></a>1.4.4 Preferred, Minimum, and Maximum Sizes</h4>
      
      <p>
        For inflexible objects, the specification of the <code>width</code>
        and <code>height</code> CSS properties can be used to 
        specify a preferred  size. If these properties are omitted, 
        an inflexible object will be sized intrinsically, i.e., it will be given
        the minimum amount of space required to lay out the item.</p>

      
      <p>
        With flexible objects, there are more options. Just as with inflexible 
        objects, the <code>width</code>
        and <code>height</code> properties can be used to specify a preferred 
        size. Unlike inflexible objects, however, this size is only a guideline. 
        A flexible object will stretch as necessary. It will also 
        shrink if required until it can shrink no more (e.g., 
        when the object hits its minimum required intrinsic size).</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre> &lt;group style="box-orient: vertical"&gt;
  &lt;textbox style="box-flex: 1; height:1000px" ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name:&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In the above example if the group were to shrink, the
        textbox being flexible would shrink--despite its
        preferred height of <code>1000px</code>.  The group
        continues to shrink minimum required height for the
        textbox is reached. After that, the textbox can
        shrink no further. If the group were to continue to
        shrink, the form control's contents would be
        clipped, and a portion of the control would no
        longer be visible.</p>

      
      <p>
        For a more fine-grained control of
        minimum and maximum sizes, the
        <code>min-width</code>, <code>min-height</code>,
        <code>max-width</code>, and <code>max-height</code>
        CSS properties can be used. When specified, these
        properties provide extra information to the group as
        it shrinks and grows the object in question.</p>

      
      <p>
        In a horizontal group, for example, if a minimum
        width is specified, then the flexible object will
        not be allowed to shrink below that width. If a
        maximum width is specified, then the flexible object
        will not be allowed to grow beyond that width.</p>

      
      <p>
        The above example demonstrates the use of <code>min-height</code> and <code>max-height</code>
        within a vertical group. In the first 
        image the group has been shrunk until it is smaller than 100 pixels in 
        height. Because the <code>iframe</code> has a specified minimum height of 100 pixels, 
        it is not allowed to shrink any further, and so as the group falls below 100 
        pixels, the <code>iframe</code> gets clipped, and portions of it become invisible.</p>

      
      <p>
        In the second image, the group has been expanded past 300 pixels in 
        height. Even though the group is getting bigger, the extra space is not 
        being consumed by the <code>iframe</code>, because its maximum height of 300 pixels has 
        been reached. It will grow no further.</p>

      
      <p>
        Below is another example illustrating min and max width.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example unavailable at publication time</pre></td></tr></table>

      <p>
        In the above example, the group has been stretched so that it is very 
        wide. The first child has a maximum width of 50 pixels, and it divides the 
        excess space equally with the second child until its maximum width has 
        been reached. After that, since it is not allowed to grow any further, the 
        remaining space all goes to the second child.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-packing"></a>1.4.5 Packing Controls</h4> 
      
      <p>
        When all of the items within a <code>group</code>
        element are inflexible or when all objects have
        grown to their maximum sizes and can stretch no
        further, extra space may be left over in the group.
        An additional property can be used to dictate how
        any additional space should be distributed between
        objects.  The CSS property <code>box-pack</code> has
        the possible values of <code>left</code>,
        <code>right</code>, <code>top</code>,
        <code>bottom</code>, <code>center</code>,
        <code>justify</code> and <code>inherit</code>.  The
        default is <code>justify</code>.</p>

      
      <p>
        In the above example, the button is centered within the group using the <code>box-align</code>
        and <code>box-pack</code> properties together.  The former centers the button vertically, and
        the latter centers the button horizontally.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-overflow"></a>1.4.6 Overflow</h4>
      
      <p>
        Items within a group may use the CSS <code>overflow</code> property to obtain horizontal and
        vertical scrollbars as needed.  Flexible objects that shrink below their minimum intrinsic
        size (but that still have a size greater than a specified CSS minimum) can display 
        scrollbars using the <code>overflow</code> property.  If overflow is not specified,
        the object will be clipped instead.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-inline"></a>1.4.7 Inlines and Blocks</h4>
      
      <p>
        Whether an element is inline or block when placed directly inside a group is irrelevant.  Objects
        will be flowed horizontally or vertically based off the
        <code>box-orient</code> property.
      </p>

      
      <p>
        When any raw text nodes are encountered directly inside a group, an anonymous block is constructed
        to wrap the text.  This anonymous block then participates in the  layout as
        a single item.</p>

    </div>
    
  </div><div class="div2">
    
<h3><a name="ui-subforms"></a>1.5 Multiple Sub-forms Or Sub-pages</h3>
    <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">March 12, 2001</td></tr><tr><td valign="top" align="left" colspan="2">Notice that we originally started by creating
        an equivalent of <code>fieldset</code>--but given
        the present design of the XForms UI layer, and given
        that conditional construct <code>case</code> can take
        either <code>group</code> or <code>html:div</code> elements,
        there is little left in this construct that is
        additional to what is in XHTML <code>html:div</code>.  I
        therefore suggest simply reusing <code>html:div</code>--perhaps
        bind XForms specific behaviors through CSS
        e.g., a stack of cards for example?  The way I am
        thinking of this is that whether it is a stack of
        cards shown one at a time, or a sequence of tab
        dialogs is a presentation issue and might therefore be
        best left to CSS as we have done with the rest of the
        presentational issues in XForms.</td></tr></table>
    <div class="div3">
      
<h4><a name="ui-subforms-pages"></a>1.5.1 Subpages</h4>
      
      <p>
        Subpages provide a means to present XForms one bit at a time, breaking a complex 
        task into smaller, simpler parts. Presentation of a subpage can occupy the entire 
        "page" or just part of a page. Different presentations are possible, e.g. a 
        stack of <em>pages</em> with visible name tags, or as a set of buttons for flipping 
        through the stack or navigating directly to a particular subpage. One possible 
        representation is a <code>formset</code> element enclosing one or more <code>subpage</code> 
        elements, each of which starts with a
        <code>caption</code> element. </p>

      
      <p>
        As the name implies <code>subpage</code> is not specific to XForms--our intent 
        is to design <code>subpage</code> so that it can be used within XForms--and 
        more generally within XHTML to create presentations where document views are 
        presented to progressively reveal the document
        structure and content.</p>

    </div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="ui"></a>1 XForms User Interface</h2>
<div class="div2">
    
<h3><a name="ui-conditional"></a>1.1 Conditional Constructs For Dynamic User Interfaces</h3>
    
    <p>
      The XForms User Interface allows the authoring of
      dynamic user interfaces, i.e., user interfaces that
      vary based on the current state of the
      instance data being populated. As an example,
      portions of a questionnaire pertaining to the user's
      automobile may become <em>relevant</em> only if
      the user has answered in the affirmative to the
      question 'Do you own a car?'.  Another
      use case for such dynamic user interfaces
      is when the underlying <a title="" href="#">XForms Model</a> contains
      conditional structures.</p>

    <div class="div3">
      
<h4><a name="ui-conditional-switch"></a>1.1.1 switch</h4>
      <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">Please do not attach semantics to the
          element name to prejudge the design.
        </td></tr></table>
      <p>
        This element contains one or more
        <code>case</code> elements.  Each
        <code>case</code> has an <code>id</code> attribute
        that is used within event handlers appearing
        within the form controls to activate or deactivate
        that  portion of the user interface created by the markup
        contained within that <code>case</code> element.  
      </p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;switch id="01" default="initial"&gt;
  &lt;case id="us"&gt;
    &lt;group&gt;
      &lt;caption&gt;Please Specify a US Shipping Address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="uk"&gt;
    &lt;group &gt;
      &lt;caption&gt;Please specify a UK shipping address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="initial"&gt;
    &lt;group &gt;
      ...
    &lt;/group&gt;
  &lt;/case&gt;
&lt;/switch&gt;</pre></td></tr></table>

      <p>The above will result in the portion of the user interface
        contained within the <em>default case</em> being
        initially displayed.
        Next, we define an XForms event handler <code>toggle</code>  below for
        activating and deactivating different portions of this
        conditional construct.</p>  

      <div class="example">
        
<h5>Example: XML Representation: Action  &lt;<code>toggle</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;toggle switch="switchID" case="caseID" /&gt;</pre></td></tr></table>
        <blockquote><p>
          Attribute <code>switch</code> identifies the
            switch constructor to be affected.
          <br>Attribute <code>case</code> identifies the portion of
            the <code>switch</code> construct to activate.
        </p></blockquote>
      </div>
    <p>
      In addition to event handler <code>toggle</code>, event handler
      <code>scroll</code>
      might be used within construct <code>switch</code> to cycle through
      the various contained  <code>case</code> clauses.</p></div>

    
  </div><div class="div2">
    
<h3><a name="ui-repeat"></a>1.2 Repeating Structures</h3>
    
    <p>
      The XForms Model allows the definition of repeating
      structures such as multiple items being purchased
      within a purchase order.  When defining the XForms Model, such higher-level aggregations are constructed
      out of basic building blocks; similarly, here we
      define higher-level user interface constructs that
      build on the form controls defined previously, that can bind to
      data structures such as lists and collections.</p>

    <div class="div3">
      
<h4><a name="ui-repeat-design"></a>1.2.1 Design Rationale</h4>
      
      <p>
        The basic XForms form controls defined so far
        permit populating data instances  conforming to
        Schema simpleTypes.
        These form controls can be aggregated using
        <code>group</code>(see <a href="#"><b>???</b></a>)  to form higher-level user
        interface form controls. As an extension to this, the user interface markup for
        repeating structures only adds encapsulation  metadata 
        about the collection being populated, as well as the
        necessary controls needed for adding, deleting and
        navigating the items in the repeating structure.
        Finally, this section also defines relevant portions of the
        processing model that track the item that is
        <em>current</em> in a repeat structure..</p>


      
      <p> Element <code>repeat</code> encapsulates the following
        pieces of metadata:</p>

      <ul>
        <li>
          <p><em>
              Binding expression</em> specifying the collection to be
            populated by the contained XForms form
            controls. 
            This binding expression returns a <em>node-set</em> that
            represents the collection of items over which
            this <code>repeat</code> will iterate.</p>
          <div class="issue"><p class="prefix"><a name="nodeset-vs-ref"></a><b>Issue (nodeset-vs-ref):</b></p><p>Question: should we call this binding
              attribute <code>node-set</code> as opposed to
              <code>ref</code> to highlight that we
              use the returned node-set rather than the
              single desired node as in most other usages of the <code>ref</code> attribute? Note that submit and reset also use full node-set processing.</p></div>
        </li>
        <li>
          <p>
            <em>Starting index</em> of the first element from the
            collection to be displayed to the user.</p>
        </li>
        <li>
          <p><em>
              Number of elements</em> 
            from the collection to be displayed to the user.</p>
        </li>
      </ul>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-handlers"></a>1.2.2 Special Event Handlers For  Element <code>repeat</code></h4>

      <p>
        We define  XForms-specific event handlers for
        use within element <code>repeat</code>.
        These event handlers will appear within element
        <code>onevent</code> to specify the event handler to
        trigger when an event is received by the containing
        event listener.
        In the examples below, we will assume event
        <code>dom-click</code>;
        however, note that this specification does not normatively
        define the mapping between  physical events 
        and specific behaviors.</p>

      <p>
        Construct <code>repeat</code> introduces the notion of a
        <em>cursor</em> that is maintained by
        the XForms processing model for each repeating structure.
        Thus, each <code>repeat</code> has its own 
        a conceptual <em>cursor</em>.
        Event handlers are provided for querying and updating  the
        position of this cursor;
        this cursor position in turn is used for determining the
        behavior of <code>insert</code> and <code>delete</code>.
        Thus, these event handlers can be thought of as the markup
        equivalent of the additions to the XForms DOM
        introduced by construct <code>repeat</code>.
      </p>
      
      
      
      <ol>
        <li>
          <p>
            <code>setRepeatCursor</code>        for marking an item  as
            being <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>setRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;setRepeatCursor repeat="repeatId" cursor="itemID"/&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em> is to be updated.
              <br> Attribute <code>cursor</code> identifies  the
                <em>cursor</em>  position. It should be a
                binding expression that evaluates to an element of
                the node set being iterated over by this repeat construct.
              

              
            </p></blockquote>
          </div>

        </li>
        <li>
          <p>
            <code>getRepeatCursor</code>        for accessing 
            position of the repeat cursor.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>getRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;getRepeatCursor repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be obtained.
            </p></blockquote>
          </div>

        </li>
        <li><p>
            <code>scroll</code>       
            for changing item that is <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>scroll</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;scroll repeat="repeatId" step="n" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be updated.
              <br>Attribute <code>step</code> is an integer value that
                specifies  the amount by
                which the list is scrolled. Negative values may
                be used to scroll the list in the reverse direction.
            </p></blockquote>
            <div class="issue"><p class="prefix"><a name="additional-actions"></a><b>Issue (additional-actions):</b></p><p>We may add special values for scrolling to the
                top or bottom of the list, as well as other needed actions.</p></div>
          </div>
        </li>
        
        <li><p>
            <code>insert</code> for inserting an item at the current
            cursor position into the
            repeating structure. This causes the instantiation of
            the necessary user interface 
            for populating a new entry in the underlying collection. It also
            updates the instance data by instantiating the necessary
            nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>insert</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;insert repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>

        </li>
        <li><p> <code>delete</code> for deleting an item from the
            repeating structure.  This causes the destruction of
            the necessary user interface for populating the entry
            at the current cursor position in the underlying
            collection. It also updates the instance data by
            destroying  the necessary nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>delete</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;delete repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>
        </li>
      </ol>

      <p>
        The event handlers enumerated above may be used within event
        listeners attached to <code>button</code> elements
        placed inside the body of construct <code>repeat</code>.
        In combination with the facilities provided by
        element <code>group</code> and CSS layout, this allows
        document authors to customize the positioning of 
        controls for standard actions such as insert or
        delete.
      </p>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-repeat"></a>1.2.3 repeat</h4>
      
      <p>
        Element <code>repeat</code> represents a repeating homogenous
        collection, in other words, a collection consisting
        entirely of like form controls.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat ref="bindingExpr" startIndex="si" number="n"&gt;
  &lt;caption&gt;Shopping Cart&lt;/caption&gt;
  &lt;!-- XForms UI for one element of the collection --&gt;
  &lt;!-- controls for adding, deleting and navigating entries --&gt;
&lt;/repeat&gt;</pre></td></tr></table>

      
      <p>Notice that the underlying schema for the
        collection being populated would typically have defined
        attributes <code>minOccurs</code> and
        <code>maxOccurs</code>; these values will in
        turn determine if the user agent displays
        appropriate UI controls for the user to add or
        delete entries in the collection.  Event listeners 
        within element <code>repeat</code> control UI
        aspects such as scrolling and insertion. This
        specification will not specify normative means for
        displaying such add and delete controls; as with the
        rest of the XForms User Interface design, we leave
        these to be flexible while showing a default
        presentation.</p>

      <div class="example">
<h5>Example: XML Representation: &lt;<code>repeat</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat
  (common attributes)
  startIndex = xsd:positiveInteger : 1
  number = xsd:nonNegativeInteger
&gt;
  &lt;!-- caption, help?, hint?, onevent?, ( any form control )* --&gt;
&lt;/repeat&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>startIndex = xsd:positiveInteger : 1</b> -  1-based hint to the XForms Processor 
            as to which starting element from the collection to
            display.
          <br><b>number = xsd:nonNegativeInteger</b> - hint to the XForms Processor 
            as to how many elements from the collection to
            display.
          <br><b>any form control</b> - any form control
            defined in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div>

    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-consequences"></a>1.2.4 Design Consequences</h4>
      
      <p>
        This subsection enumerates the design consequences
        and is for members of the Working Group to evaluate
        the above design.</p>

      <ul>
        <li>
          <p>
            Binding expression is placed on element
            <code>repeat</code> and should refer to the
            collection being populated, not to an
            individual item of the collection. Thus, it
            would be   <code>items/item</code> in  a
            purchase order, where element <code>items</code>
            contains one or more <code>item</code>
            children.</p>
        </li>
        <li>
          <p>
            The form controls appearing inside
            element <code>repeat</code> needs to be suitable for
            populating individual items of the collection.
            Thus, to continue the purchase order example,
            the contained XForms form controls
            would need to be suitable for populating a data
            instance conforming to <code>item</code>.</p>
        </li>
        <li>
          <p>
            A simple but powerful consequence of the above
            is that if the XForms Model specifies nested
            collections, then we can create a corresponding
            user interface by <em>nesting</em>
            <code>repeat</code> elements.  As an example,
            consider the XForms Model  for a hypothetical
            purchase order that contains element
            <code>items</code> for holding collection of
            <code>item</code> elements. Further, assume that
            element <code>item</code> comprises of two atomic
            fields <code>catalogNumber</code>,
            <code>partNumber</code> and a collection
            <code>colors</code> which in turn holds one or more
            <code>color</code> elements.  The user interface for
            populating this data instance would use nested
            <code>repeat</code> elements.</p> </li> <li>
          <p>
            Notice that the
            contained XForms form controls inside
            element <code>repeat</code> do not explicitly
            specify the index of the collection entry being
            populated. This is intentional; it keeps both
            authoring as well as the processing model
            simple.  But as a consequence, the user
            interface cannot bind to an element from the
            underlying collection <em>out of
              sequence</em>.  Notice that this is not a
            serious drawback because the use interface layer
            can always populate a specific member of a
            collection without using element
            <code>repeat</code>.</p>
        </li>
      </ul>
    </div>
  </div><div class="div2">
    
<h3><a name="ui-template"></a>1.3 Reusable Form Controls</h3>
    <div class="div3">
      
<h4><a name="ui-templates-creating"></a>1.3.1 Creating User Interface Templates</h4>
      
      <p>
        <em>User Interface templates</em> allow the creation of
        reusable user interface components.  Just as we can
        define data types and structures that can be reused
        within the XForms Model,
        reusable user interface components allow us to
        design complex user interfaces using the basic
        building blocks described in the previous section, and then reuse
        these components in multiple situations. As with any
        component framework, this has two basic
        requirements:</p>

      <ul>
        <li>
          <p>
            Components need to declare what aspects of the component are parameterizable 
            by the caller.</p>
        </li>
        <li>
          <p>
            The caller needs to be able to override the default values of the parameters 
            declared in the component.</p>
        </li>
      </ul>
      
      <p>
        Here, we describe such a component framework along with sample markup. For 
        this example, assume that <code>USShippingAddress</code> is a reusable data 
        type that is used in multiple places in the <a title="" href="#">XForms Model</a>, e.g. the user will 
        be asked for a <code>billingAddress</code> and <code>shippingAddress</code>--both 
        of type <code>USShippingAddress</code>.</p>

      
      <p>
        First, we show a simple example that is designed to bind an XForms <a title="" href="#">form 
        control</a> to a <a title="" href="#">model item</a> of 
        type <code>address</code> with no attention to making the component 
        reusable.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox ref="address/street"&gt;
    &lt;caption&gt;Please enter your street address&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="address/zip"&gt;
    &lt;caption&gt;Zip Code&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        Next, we prepare the above 
        fragment to become a reusable component 
        that could be used for obtaining both the shipping and billing address. To do 
        this, we need to parameterize those portions of the <em>component</em> that 
        the caller will wish to modify.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uiTemplate id="AddressWidget"&gt;
  &lt;param name="streetPrompt"/&gt;
  &lt;param name="zipPrompt"/&gt;
  &lt;param name="border" value="line"/&gt;
  &lt;group border="$border"&gt;
    &lt;textbox ref="address/street"&gt;
      &lt;caption&gt;&lt;value-of name="streetPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
    &lt;textbox ref="address/zip"&gt;
      &lt;caption&gt;&lt;value-of name="zipPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
  &lt;/group&gt;
&lt;/uiTemplate&gt;</pre></td></tr></table>

      
      <p>
        Note that the markup shown above does not create a
        user interface; user interface is created by explicitly
        instantiating the component via element
        <code>useUITemplate</code> described next.</p>
      
      
      <p>
        Next, we use this component to instantiate the
        user interface for obtaining the shipping and
        billing address.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;useUITemplate ref="myAddress" component="AddressWidget"&gt;
  &lt;withParam name="streetPrompt"&gt;Shipping Street Address&lt;/withParam&gt;
  &lt;withParam name="zipPrompt"&gt;Zip Code for shipping state&lt;/withParam&gt;
  &lt;withParam name="border"&gt;dotted&lt;/withParam&gt;
&lt;/useUITemplate&gt;</pre></td></tr></table>

      
      <p>
        The reusable component is instantiated by element <code>useUITemplate</code>; 
        parameter values are specified by the contained
        <code>withParam</code> elements.
        Attribute <code>xform</code> sets the binding context relative to which binding expressions within the instantiated  template get evaluated.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-templates-dtd-temp"></a>1.3.2 DTD For uiTemplate And useUITemplate</h4>
      
      <p>TODO: convert to 'XML Representation' consistent with rest of spec.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!--       param element for use in uiTemplate --&gt;
&lt;!ELEMENT  param      EMPTY&gt;
&lt;!--       name       Name of parameter being declared           --&gt;
&lt;!ATTLIST  param
  name     CDATA      #REQUIRED&gt;
&lt;!--       Defines a reusable user interface template --&gt;
&lt;!ELEMENT  uiTemplate   (param*, %FormControls;+)&gt;
&lt;!--       id         Unique ID for use when instantiating this template --&gt;
&lt;!ATTLIST  uiTemplate
  id       ID         #REQUIRED&gt;
&lt;!--       Used to pass parameter values when instantiating uiTemplate --&gt;
&lt;!ELEMENT  withParam  #MIXED&gt;
&lt;!--       name       Name of parameter whose value is being specified --&gt;
&lt;!ATTLIST  withParam
name       CDATA      #REQUIRED&gt;</pre></td></tr></table>

    </div>
  </div><div class="div2">
    
<h3><a name="ui-layout"></a>1.4 Layout in XForms</h3>
    
    
    <p>
      The <code>group</code> element is used as a container
      for defining a hierarchy of form controls.  Groups lay
      out their children using a constraint-based system
      that supports both relative flexible sizing and
      intrinsic sizing.  Groups can be nested to create
      complex hierarchies. Using CSS, an inline box can be
      specified using the <code>display</code> property with
      a value of <code>inline</code>.  A block-level group can
      be specified with a value of <code>block</code>, which
      is the default.</p>

    <div class="example">
<h5>Example: XML Representation: &lt;<code>group</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;!-- all form controls &amp; mixed content --&gt;
&lt;/group&gt;</pre></td></tr></table>
      
    </div>

    <p>
      All form
      controls defined so far are treated as
      inline text for purposes of XHTML processing.
      XForms visual clients are expected to use   a  a box layout model as defined by CSS for
      determining the overall layout of the XForms visual
      interface. Grouping of form controls using
      element <code>group</code>
      also provides semantics about the relationship amongst user
      interface controls; such knowledge can be useful in
      delivering a coherent UI to small devices--e.g.,
      if the user interface needs to be split up amongst several
      screens,  controls appearing inside the
      same
      group would typically be rendered on the same screen.</p>

    
    <p>
      Finally, the hierarchy defined by nested group elements is used to determine the 
      traversal order specified by attribute <code>navindex</code> on form controls. 
      Setting the input focus on a  group results in the focus being set to the 
      lowest form control in the tabbing order within that
      group.</p>

    <div class="issue"><p class="prefix"><a name="group-binding"></a><b>Issue (group-binding):</b></p><p>t is an open issue whether the <a title="" href="#">binding</a> attribute <code>xform</code> 
        is allowed on element <code>group</code>.
        It might make authoring easier but makes
        implementations significantly harder.
        Note that this note is here because at one point in our
        design we said that controls inside a
        <code>group</code>
        could use relative XPath expressions with the context being
        set by the containing group. </p></div>
    <div class="div3">
      
<h4><a name="ui-layout-dir"></a>1.4.1 Orientation and Direction</h4>
      
      <p>
        Containers typically have an orientation and a direction.
        The <code>box-orient</code> CSS property specifies
        the orientation of the group.  It has values of
        <code>horizontal</code>, <code>vertical</code>, or
        <code>inherit</code>.  A horizontal group lays out its
        children in a horizontal line, and a vertical group
        stacks its children vertically.
      </p>

      
      <p>
        The <code>box-direction</code>
        CSS property specifies the direction of the group.  It has values of
        <code>normal</code>, <code>reverse</code>, and <code>inherit</code>.  
        A normal horizontal group lays out its children from left to right, and a normal
        vertical group lays out its children from top to bottom.  
      </p>

      
      <p>
        Direction within nested groups is inherited by
        default.  If direction is omitted on the outermost
        group, it is assumed to have a
        horizontal orientation and normal direction.
      </p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox  ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="/person/ssid"&gt;
    &lt;caption&gt;Enter your SSID&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        When items are placed in a group without specifying any additional 
        information about their size, then the  sizes the children 
        <em>intrinsically</em>. In other words, the group makes each child only as big
        as it needs to be. Notice that in 
        the above example, the two form controls are only as
        big as they need to be, and that this in turn
        determines the size of the group (since we assume for
        simplicity that this group is not nested).</p>

      
      <p>
        Widths can be specified for items inside a horizontal group. When an 
        object specifies its width in CSS, it is telling the group that 
        it would like to be that width. Similarly, heights can be specified in CSS
        for items in a vertical group. 
        A non-nested group placed inside an enclosing CSS block will obey
        all the usual sizing rules of the block.  For example, setting the width of
        a non-nested group to 100% ensures that the group is the maximum width permitted by 
        the enclosing CSS block.
      </p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-align"></a>1.4.2 Alignment</h4>
      
      <p>
        The <code>box-align</code> property specifies how controls are aligned along the orientation
        of the group.  Its possible values are <code>left</code>, <code>center</code>, <code>right</code>, 
        <code>top</code>, <code>bottom</code>, <code>baseline</code>, <code>stretch</code> and <code>inherit</code>.  
        The default value is <code>stretch</code>.
      </p>

      
      <p>
        By default a horizontal group ensures that all children are the same height.  Once a height
        is computed for a horizontal group, all of the children are stretched vertically to the
        height of the group (minus the CSS border and padding on the group).  
        Similarly, a vertical group ensures that all its children are
        the same width.  The stretch policy overrides any
        specified width or height values.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: vertical"&gt;
  &lt;output ref="/person/name"/&gt;
  &lt;output ref="/person/age"/&gt;
  &lt;output ref="/person/country"/&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In addition to <code>stretch</code>, a horizontal group can also align its children using the 
        values <code>top</code>, <code>center</code>, <code>baseline</code> and <code>bottom</code>.  A vertical
        group can align its children using the values <code>left</code>, <code>center</code>, and <code>right</code>.
        When these values are used, the items are no longer stretched.  They are sized intrinsically
        and then aligned on the group axis according to the specified property value on the containing
        group.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-sizing"></a>1.4.3 Controlling  Automatic Sizing </h4>
      
      <p>
        The layout algorithm can be controlled by specifying the
        degree to which items may <em>flex</em> i.e.,
        the degree to which an item allows itself to be
        <em>auto-sized</em>.
        Items in groupes fall into two categories: <code>flexible</code> and 
        <code>inflexible</code>. Inflexible objects will not grow, even when there is 
        extra space left over in the group.
        When several objects in a group are flexible, the extra space is divided 
        among the objects based on how flexible they are. The group determines how 
        much space to give an object by adding up the flex values on all of its 
        children. An object gets an amount of extra space equal to the percentage 
        of flex that it is responsible for.</p>

      
      <p>
        For example, if two objects have a flex of 1, then after both objects 
        are given their preferred sizes, the first object 
        gets 1/(1+1) = 1/2 of the extra space, and the second object also gets 1/2 
        of the extra space.</p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: horizontal; width: 200px"&gt;
  &lt;textbox  style="box-flex: 1"  ref="/person/name&gt;
    &lt;caption&gt;Please enter your full name: &lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox  style="box-flex: 1.5" ref="/person/age&gt;
    &lt;caption&gt;How young?&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-minmax"></a>1.4.4 Preferred, Minimum, and Maximum Sizes</h4>
      
      <p>
        For inflexible objects, the specification of the <code>width</code>
        and <code>height</code> CSS properties can be used to 
        specify a preferred  size. If these properties are omitted, 
        an inflexible object will be sized intrinsically, i.e., it will be given
        the minimum amount of space required to lay out the item.</p>

      
      <p>
        With flexible objects, there are more options. Just as with inflexible 
        objects, the <code>width</code>
        and <code>height</code> properties can be used to specify a preferred 
        size. Unlike inflexible objects, however, this size is only a guideline. 
        A flexible object will stretch as necessary. It will also 
        shrink if required until it can shrink no more (e.g., 
        when the object hits its minimum required intrinsic size).</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre> &lt;group style="box-orient: vertical"&gt;
  &lt;textbox style="box-flex: 1; height:1000px" ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name:&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In the above example if the group were to shrink, the
        textbox being flexible would shrink--despite its
        preferred height of <code>1000px</code>.  The group
        continues to shrink minimum required height for the
        textbox is reached. After that, the textbox can
        shrink no further. If the group were to continue to
        shrink, the form control's contents would be
        clipped, and a portion of the control would no
        longer be visible.</p>

      
      <p>
        For a more fine-grained control of
        minimum and maximum sizes, the
        <code>min-width</code>, <code>min-height</code>,
        <code>max-width</code>, and <code>max-height</code>
        CSS properties can be used. When specified, these
        properties provide extra information to the group as
        it shrinks and grows the object in question.</p>

      
      <p>
        In a horizontal group, for example, if a minimum
        width is specified, then the flexible object will
        not be allowed to shrink below that width. If a
        maximum width is specified, then the flexible object
        will not be allowed to grow beyond that width.</p>

      
      <p>
        The above example demonstrates the use of <code>min-height</code> and <code>max-height</code>
        within a vertical group. In the first 
        image the group has been shrunk until it is smaller than 100 pixels in 
        height. Because the <code>iframe</code> has a specified minimum height of 100 pixels, 
        it is not allowed to shrink any further, and so as the group falls below 100 
        pixels, the <code>iframe</code> gets clipped, and portions of it become invisible.</p>

      
      <p>
        In the second image, the group has been expanded past 300 pixels in 
        height. Even though the group is getting bigger, the extra space is not 
        being consumed by the <code>iframe</code>, because its maximum height of 300 pixels has 
        been reached. It will grow no further.</p>

      
      <p>
        Below is another example illustrating min and max width.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example unavailable at publication time</pre></td></tr></table>

      <p>
        In the above example, the group has been stretched so that it is very 
        wide. The first child has a maximum width of 50 pixels, and it divides the 
        excess space equally with the second child until its maximum width has 
        been reached. After that, since it is not allowed to grow any further, the 
        remaining space all goes to the second child.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-packing"></a>1.4.5 Packing Controls</h4> 
      
      <p>
        When all of the items within a <code>group</code>
        element are inflexible or when all objects have
        grown to their maximum sizes and can stretch no
        further, extra space may be left over in the group.
        An additional property can be used to dictate how
        any additional space should be distributed between
        objects.  The CSS property <code>box-pack</code> has
        the possible values of <code>left</code>,
        <code>right</code>, <code>top</code>,
        <code>bottom</code>, <code>center</code>,
        <code>justify</code> and <code>inherit</code>.  The
        default is <code>justify</code>.</p>

      
      <p>
        In the above example, the button is centered within the group using the <code>box-align</code>
        and <code>box-pack</code> properties together.  The former centers the button vertically, and
        the latter centers the button horizontally.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-overflow"></a>1.4.6 Overflow</h4>
      
      <p>
        Items within a group may use the CSS <code>overflow</code> property to obtain horizontal and
        vertical scrollbars as needed.  Flexible objects that shrink below their minimum intrinsic
        size (but that still have a size greater than a specified CSS minimum) can display 
        scrollbars using the <code>overflow</code> property.  If overflow is not specified,
        the object will be clipped instead.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-inline"></a>1.4.7 Inlines and Blocks</h4>
      
      <p>
        Whether an element is inline or block when placed directly inside a group is irrelevant.  Objects
        will be flowed horizontally or vertically based off the
        <code>box-orient</code> property.
      </p>

      
      <p>
        When any raw text nodes are encountered directly inside a group, an anonymous block is constructed
        to wrap the text.  This anonymous block then participates in the  layout as
        a single item.</p>

    </div>
    
  </div><div class="div2">
    
<h3><a name="ui-subforms"></a>1.5 Multiple Sub-forms Or Sub-pages</h3>
    <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">March 12, 2001</td></tr><tr><td valign="top" align="left" colspan="2">Notice that we originally started by creating
        an equivalent of <code>fieldset</code>--but given
        the present design of the XForms UI layer, and given
        that conditional construct <code>case</code> can take
        either <code>group</code> or <code>html:div</code> elements,
        there is little left in this construct that is
        additional to what is in XHTML <code>html:div</code>.  I
        therefore suggest simply reusing <code>html:div</code>--perhaps
        bind XForms specific behaviors through CSS
        e.g., a stack of cards for example?  The way I am
        thinking of this is that whether it is a stack of
        cards shown one at a time, or a sequence of tab
        dialogs is a presentation issue and might therefore be
        best left to CSS as we have done with the rest of the
        presentational issues in XForms.</td></tr></table>
    <div class="div3">
      
<h4><a name="ui-subforms-pages"></a>1.5.1 Subpages</h4>
      
      <p>
        Subpages provide a means to present XForms one bit at a time, breaking a complex 
        task into smaller, simpler parts. Presentation of a subpage can occupy the entire 
        "page" or just part of a page. Different presentations are possible, e.g. a 
        stack of <em>pages</em> with visible name tags, or as a set of buttons for flipping 
        through the stack or navigating directly to a particular subpage. One possible 
        representation is a <code>formset</code> element enclosing one or more <code>subpage</code> 
        elements, each of which starts with a
        <code>caption</code> element. </p>

      
      <p>
        As the name implies <code>subpage</code> is not specific to XForms--our intent 
        is to design <code>subpage</code> so that it can be used within XForms--and 
        more generally within XHTML to create presentations where document views are 
        presented to progressively reveal the document
        structure and content.</p>

    </div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="schema"></a>1 Schema for XForms</h2> 

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Micah (W3C XForms Working Group) --&gt;
&lt;!-- converted with http://www.w3.org/2001/03/webdata/xsu --&gt;
&lt;!DOCTYPE xsd:schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" [
&lt;!ENTITY % p 'xsd:'&gt;
&lt;!ENTITY % s ':xsd'&gt;
]&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xform="http://www.w3.org/2001/06/xforms"
targetNamespace="http://www.w3.org/2001/06/xforms"
elementFormDefault="qualified"&gt;
  &lt;!-- 
structural elements
--&gt;
  &lt;xsd:element name="xform"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of the xform container element.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element ref="xform:submitInfo" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:model" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:instance" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:bind" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="model"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of model container. Content model TBD.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="instance"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of instance container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any" maxOccurs="unbounded"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submitInfo"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of submit info container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
        &lt;!-- allow zero or more submitExtension elements --&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="target" type="xsd:anyURI" use="required"/&gt;
      &lt;xsd:attribute name="method" type="xform:methodType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:attributeGroup name="linkingAttributes"&gt;
    &lt;xsd:attribute name="href" type="xsd:anyURI"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="bind"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of bind container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
User Interface form controls and other elements
--&gt;
  &lt;xsd:attributeGroup name="commonUIAttributes"&gt;
    &lt;xsd:attribute name="lang" type="xsd:language" use="optional"/&gt;
    &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
    &lt;xsd:attribute name="class" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="style" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="xform" type="xsd:IDREF" use="optional"/&gt;
    &lt;xsd:attribute name="accessKey" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="navIndex" type="xsd:nonNegativeInteger" use="optional"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="caption"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="hint"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="help"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="onevent"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Defined in a different specification&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:group name="choiceGroup"&gt;
    &lt;xsd:choice&gt;
      &lt;xsd:element ref="xform:choices"/&gt;
      &lt;xsd:element ref="xform:item"/&gt;
    &lt;/xsd:choice&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="choices"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence maxOccurs="unbounded"&gt;
        &lt;xsd:group ref="xform:choiceGroup"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="item" type="xform:string"/&gt;
  &lt;xsd:group name="commonUIChildren"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xform:caption"/&gt;
      &lt;xsd:element ref="xform:help" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:hint" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:onevent" minOccurs="0"/&gt;
      &lt;xsd:any namespace="##any"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="textbox"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="secret"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="uploadMedia"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="mediaType" type="xform:spaceSeparatedListType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectOne"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectMany"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectBoolean"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="range"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="start" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="end" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="stepSize" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="button"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="output"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="xform" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="format" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submit"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="reset"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
Bring over xsd simpleTypes
--&gt;
  &lt;xsd:simpleType name="decimal"&gt;
    &lt;xsd:restriction base="xsd:decimal"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="string"&gt;
    &lt;xsd:restriction base="xsd:string"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="boolean"&gt;
    &lt;xsd:restriction base="xsd:boolean"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="date"&gt;
    &lt;xsd:restriction base="xsd:date"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="time"&gt;
    &lt;xsd:restriction base="xsd:time"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;!-- Note: similar for all other built-in Schema types; new schema was not available at publish 

time --&gt;
  &lt;!--
New simpleTypes
--&gt;
  &lt;xsd:simpleType name="currency"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="[A-Z]{3}"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="maskType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="((A|a|X|x|N|n|M|m)|(\\.))*([0-9\*](A|a|X|x|N|n|M|m))?"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="spaceSeparatedListType"&gt;
    &lt;xsd:list itemType="xsd:token"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="selectUIType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="radioGroup"/&gt;
      &lt;xsd:enumeration value="checkboxGroup"/&gt;
      &lt;xsd:enumeration value="pulldown"/&gt;
      &lt;xsd:enumeration value="listbox"/&gt;
      &lt;xsd:enumeration value="comboGroup"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="methodType"&gt;
    &lt;xsd:restriction base="xform:string"&gt;
      &lt;xsd:enumeration value="postXML"/&gt;
      &lt;xsd:enumeration value="post"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;</pre></td></tr></table>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="title"></a>1 Title</h2>
<p>x</p> 
  <div class="div2"> 
    
<h3><a name="N1000A"></a>1.1 x</h3> 
  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="ui"></a>1 XForms User Interface</h2>
<div class="div2">
    
<h3><a name="ui-conditional"></a>1.1 Conditional Constructs For Dynamic User Interfaces</h3>
    
    <p>
      The XForms User Interface allows the authoring of
      dynamic user interfaces, i.e., user interfaces that
      vary based on the current state of the
      instance data being populated. As an example,
      portions of a questionnaire pertaining to the user's
      automobile may become <em>relevant</em> only if
      the user has answered in the affirmative to the
      question 'Do you own a car?'.  Another
      use case for such dynamic user interfaces
      is when the underlying <a title="" href="#">XForms Model</a> contains
      conditional structures.</p>

    <div class="div3">
      
<h4><a name="ui-conditional-switch"></a>1.1.1 switch</h4>
      <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">Please do not attach semantics to the
          element name to prejudge the design.
        </td></tr></table>
      <p>
        This element contains one or more
        <code>case</code> elements.  Each
        <code>case</code> has an <code>id</code> attribute
        that is used within event handlers appearing
        within the form controls to activate or deactivate
        that  portion of the user interface created by the markup
        contained within that <code>case</code> element.  
      </p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;switch id="01" default="initial"&gt;
  &lt;case id="us"&gt;
    &lt;group&gt;
      &lt;caption&gt;Please Specify a US Shipping Address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="uk"&gt;
    &lt;group &gt;
      &lt;caption&gt;Please specify a UK shipping address.&lt;/caption&gt;
    &lt;/group&gt;
  &lt;/case&gt;
  &lt;case id="initial"&gt;
    &lt;group &gt;
      ...
    &lt;/group&gt;
  &lt;/case&gt;
&lt;/switch&gt;</pre></td></tr></table>

      <p>The above will result in the portion of the user interface
        contained within the <em>default case</em> being
        initially displayed.
        Next, we define an XForms event handler <code>toggle</code>  below for
        activating and deactivating different portions of this
        conditional construct.</p>  

      <div class="example">
        
<h5>Example: XML Representation: Action  &lt;<code>toggle</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;toggle switch="switchID" case="caseID" /&gt;</pre></td></tr></table>
        <blockquote><p>
          Attribute <code>switch</code> identifies the
            switch constructor to be affected.
          <br>Attribute <code>case</code> identifies the portion of
            the <code>switch</code> construct to activate.
        </p></blockquote>
      </div>
    <p>
      In addition to event handler <code>toggle</code>, event handler
      <code>scroll</code>
      might be used within construct <code>switch</code> to cycle through
      the various contained  <code>case</code> clauses.</p></div>

    
  </div><div class="div2">
    
<h3><a name="ui-repeat"></a>1.2 Repeating Structures</h3>
    
    <p>
      The XForms Model allows the definition of repeating
      structures such as multiple items being purchased
      within a purchase order.  When defining the XForms Model, such higher-level aggregations are constructed
      out of basic building blocks; similarly, here we
      define higher-level user interface constructs that
      build on the form controls defined previously, that can bind to
      data structures such as lists and collections.</p>

    <div class="div3">
      
<h4><a name="ui-repeat-design"></a>1.2.1 Design Rationale</h4>
      
      <p>
        The basic XForms form controls defined so far
        permit populating data instances  conforming to
        Schema simpleTypes.
        These form controls can be aggregated using
        <code>group</code>(see <a href="#"><b>???</b></a>)  to form higher-level user
        interface form controls. As an extension to this, the user interface markup for
        repeating structures only adds encapsulation  metadata 
        about the collection being populated, as well as the
        necessary controls needed for adding, deleting and
        navigating the items in the repeating structure.
        Finally, this section also defines relevant portions of the
        processing model that track the item that is
        <em>current</em> in a repeat structure..</p>


      
      <p> Element <code>repeat</code> encapsulates the following
        pieces of metadata:</p>

      <ul>
        <li>
          <p><em>
              Binding expression</em> specifying the collection to be
            populated by the contained XForms form
            controls. 
            This binding expression returns a <em>node-set</em> that
            represents the collection of items over which
            this <code>repeat</code> will iterate.</p>
          <div class="issue"><p class="prefix"><a name="nodeset-vs-ref"></a><b>Issue (nodeset-vs-ref):</b></p><p>Question: should we call this binding
              attribute <code>node-set</code> as opposed to
              <code>ref</code> to highlight that we
              use the returned node-set rather than the
              single desired node as in most other usages of the <code>ref</code> attribute? Note that submit and reset also use full node-set processing.</p></div>
        </li>
        <li>
          <p>
            <em>Starting index</em> of the first element from the
            collection to be displayed to the user.</p>
        </li>
        <li>
          <p><em>
              Number of elements</em> 
            from the collection to be displayed to the user.</p>
        </li>
      </ul>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-handlers"></a>1.2.2 Special Event Handlers For  Element <code>repeat</code></h4>

      <p>
        We define  XForms-specific event handlers for
        use within element <code>repeat</code>.
        These event handlers will appear within element
        <code>onevent</code> to specify the event handler to
        trigger when an event is received by the containing
        event listener.
        In the examples below, we will assume event
        <code>dom-click</code>;
        however, note that this specification does not normatively
        define the mapping between  physical events 
        and specific behaviors.</p>

      <p>
        Construct <code>repeat</code> introduces the notion of a
        <em>cursor</em> that is maintained by
        the XForms processing model for each repeating structure.
        Thus, each <code>repeat</code> has its own 
        a conceptual <em>cursor</em>.
        Event handlers are provided for querying and updating  the
        position of this cursor;
        this cursor position in turn is used for determining the
        behavior of <code>insert</code> and <code>delete</code>.
        Thus, these event handlers can be thought of as the markup
        equivalent of the additions to the XForms DOM
        introduced by construct <code>repeat</code>.
      </p>
      
      
      
      <ol>
        <li>
          <p>
            <code>setRepeatCursor</code>        for marking an item  as
            being <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>setRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;setRepeatCursor repeat="repeatId" cursor="itemID"/&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em> is to be updated.
              <br> Attribute <code>cursor</code> identifies  the
                <em>cursor</em>  position. It should be a
                binding expression that evaluates to an element of
                the node set being iterated over by this repeat construct.
              

              
            </p></blockquote>
          </div>

        </li>
        <li>
          <p>
            <code>getRepeatCursor</code>        for accessing 
            position of the repeat cursor.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>getRepeatCursor</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;getRepeatCursor repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be obtained.
            </p></blockquote>
          </div>

        </li>
        <li><p>
            <code>scroll</code>       
            for changing item that is <em>current</em>.
          </p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>scroll</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;scroll repeat="repeatId" step="n" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor whose <em>cursor</em>
                position is to be updated.
              <br>Attribute <code>step</code> is an integer value that
                specifies  the amount by
                which the list is scrolled. Negative values may
                be used to scroll the list in the reverse direction.
            </p></blockquote>
            <div class="issue"><p class="prefix"><a name="additional-actions"></a><b>Issue (additional-actions):</b></p><p>We may add special values for scrolling to the
                top or bottom of the list, as well as other needed actions.</p></div>
          </div>
        </li>
        
        <li><p>
            <code>insert</code> for inserting an item at the current
            cursor position into the
            repeating structure. This causes the instantiation of
            the necessary user interface 
            for populating a new entry in the underlying collection. It also
            updates the instance data by instantiating the necessary
            nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>insert</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;insert repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>

        </li>
        <li><p> <code>delete</code> for deleting an item from the
            repeating structure.  This causes the destruction of
            the necessary user interface for populating the entry
            at the current cursor position in the underlying
            collection. It also updates the instance data by
            destroying  the necessary nodes.</p>
          <div class="example">
            
<h5>Example: XML Representation:Action  &lt;<code>delete</code>&gt;</h5>
            <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;delete repeat="repeatId" /&gt;</pre></td></tr></table>
            <blockquote><p>
              Attribute <code>repeat</code> identifies the
                repeat constructor being affected, and defaults
                to the <code>repeat</code> construct within which
                this event handler appears.
              
            </p></blockquote>
          </div>
        </li>
      </ol>

      <p>
        The event handlers enumerated above may be used within event
        listeners attached to <code>button</code> elements
        placed inside the body of construct <code>repeat</code>.
        In combination with the facilities provided by
        element <code>group</code> and CSS layout, this allows
        document authors to customize the positioning of 
        controls for standard actions such as insert or
        delete.
      </p>
    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-repeat"></a>1.2.3 repeat</h4>
      
      <p>
        Element <code>repeat</code> represents a repeating homogenous
        collection, in other words, a collection consisting
        entirely of like form controls.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat ref="bindingExpr" startIndex="si" number="n"&gt;
  &lt;caption&gt;Shopping Cart&lt;/caption&gt;
  &lt;!-- XForms UI for one element of the collection --&gt;
  &lt;!-- controls for adding, deleting and navigating entries --&gt;
&lt;/repeat&gt;</pre></td></tr></table>

      
      <p>Notice that the underlying schema for the
        collection being populated would typically have defined
        attributes <code>minOccurs</code> and
        <code>maxOccurs</code>; these values will in
        turn determine if the user agent displays
        appropriate UI controls for the user to add or
        delete entries in the collection.  Event listeners 
        within element <code>repeat</code> control UI
        aspects such as scrolling and insertion. This
        specification will not specify normative means for
        displaying such add and delete controls; as with the
        rest of the XForms User Interface design, we leave
        these to be flexible while showing a default
        presentation.</p>

      <div class="example">
<h5>Example: XML Representation: &lt;<code>repeat</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat
  (common attributes)
  startIndex = xsd:positiveInteger : 1
  number = xsd:nonNegativeInteger
&gt;
  &lt;!-- caption, help?, hint?, onevent?, ( any form control )* --&gt;
&lt;/repeat&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>startIndex = xsd:positiveInteger : 1</b> -  1-based hint to the XForms Processor 
            as to which starting element from the collection to
            display.
          <br><b>number = xsd:nonNegativeInteger</b> - hint to the XForms Processor 
            as to how many elements from the collection to
            display.
          <br><b>any form control</b> - any form control
            defined in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div>

    </div>
    <div class="div3">
      
<h4><a name="ui-repeat-consequences"></a>1.2.4 Design Consequences</h4>
      
      <p>
        This subsection enumerates the design consequences
        and is for members of the Working Group to evaluate
        the above design.</p>

      <ul>
        <li>
          <p>
            Binding expression is placed on element
            <code>repeat</code> and should refer to the
            collection being populated, not to an
            individual item of the collection. Thus, it
            would be   <code>items/item</code> in  a
            purchase order, where element <code>items</code>
            contains one or more <code>item</code>
            children.</p>
        </li>
        <li>
          <p>
            The form controls appearing inside
            element <code>repeat</code> needs to be suitable for
            populating individual items of the collection.
            Thus, to continue the purchase order example,
            the contained XForms form controls
            would need to be suitable for populating a data
            instance conforming to <code>item</code>.</p>
        </li>
        <li>
          <p>
            A simple but powerful consequence of the above
            is that if the XForms Model specifies nested
            collections, then we can create a corresponding
            user interface by <em>nesting</em>
            <code>repeat</code> elements.  As an example,
            consider the XForms Model  for a hypothetical
            purchase order that contains element
            <code>items</code> for holding collection of
            <code>item</code> elements. Further, assume that
            element <code>item</code> comprises of two atomic
            fields <code>catalogNumber</code>,
            <code>partNumber</code> and a collection
            <code>colors</code> which in turn holds one or more
            <code>color</code> elements.  The user interface for
            populating this data instance would use nested
            <code>repeat</code> elements.</p> </li> <li>
          <p>
            Notice that the
            contained XForms form controls inside
            element <code>repeat</code> do not explicitly
            specify the index of the collection entry being
            populated. This is intentional; it keeps both
            authoring as well as the processing model
            simple.  But as a consequence, the user
            interface cannot bind to an element from the
            underlying collection <em>out of
              sequence</em>.  Notice that this is not a
            serious drawback because the use interface layer
            can always populate a specific member of a
            collection without using element
            <code>repeat</code>.</p>
        </li>
      </ul>
    </div>
  </div><div class="div2">
    
<h3><a name="ui-template"></a>1.3 Reusable Form Controls</h3>
    <div class="div3">
      
<h4><a name="ui-templates-creating"></a>1.3.1 Creating User Interface Templates</h4>
      
      <p>
        <em>User Interface templates</em> allow the creation of
        reusable user interface components.  Just as we can
        define data types and structures that can be reused
        within the XForms Model,
        reusable user interface components allow us to
        design complex user interfaces using the basic
        building blocks described in the previous section, and then reuse
        these components in multiple situations. As with any
        component framework, this has two basic
        requirements:</p>

      <ul>
        <li>
          <p>
            Components need to declare what aspects of the component are parameterizable 
            by the caller.</p>
        </li>
        <li>
          <p>
            The caller needs to be able to override the default values of the parameters 
            declared in the component.</p>
        </li>
      </ul>
      
      <p>
        Here, we describe such a component framework along with sample markup. For 
        this example, assume that <code>USShippingAddress</code> is a reusable data 
        type that is used in multiple places in the <a title="" href="#">XForms Model</a>, e.g. the user will 
        be asked for a <code>billingAddress</code> and <code>shippingAddress</code>--both 
        of type <code>USShippingAddress</code>.</p>

      
      <p>
        First, we show a simple example that is designed to bind an XForms <a title="" href="#">form 
        control</a> to a <a title="" href="#">model item</a> of 
        type <code>address</code> with no attention to making the component 
        reusable.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox ref="address/street"&gt;
    &lt;caption&gt;Please enter your street address&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="address/zip"&gt;
    &lt;caption&gt;Zip Code&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        Next, we prepare the above 
        fragment to become a reusable component 
        that could be used for obtaining both the shipping and billing address. To do 
        this, we need to parameterize those portions of the <em>component</em> that 
        the caller will wish to modify.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uiTemplate id="AddressWidget"&gt;
  &lt;param name="streetPrompt"/&gt;
  &lt;param name="zipPrompt"/&gt;
  &lt;param name="border" value="line"/&gt;
  &lt;group border="$border"&gt;
    &lt;textbox ref="address/street"&gt;
      &lt;caption&gt;&lt;value-of name="streetPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
    &lt;textbox ref="address/zip"&gt;
      &lt;caption&gt;&lt;value-of name="zipPrompt"/&gt;&lt;/caption&gt;
    &lt;/textbox&gt;
  &lt;/group&gt;
&lt;/uiTemplate&gt;</pre></td></tr></table>

      
      <p>
        Note that the markup shown above does not create a
        user interface; user interface is created by explicitly
        instantiating the component via element
        <code>useUITemplate</code> described next.</p>
      
      
      <p>
        Next, we use this component to instantiate the
        user interface for obtaining the shipping and
        billing address.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;useUITemplate ref="myAddress" component="AddressWidget"&gt;
  &lt;withParam name="streetPrompt"&gt;Shipping Street Address&lt;/withParam&gt;
  &lt;withParam name="zipPrompt"&gt;Zip Code for shipping state&lt;/withParam&gt;
  &lt;withParam name="border"&gt;dotted&lt;/withParam&gt;
&lt;/useUITemplate&gt;</pre></td></tr></table>

      
      <p>
        The reusable component is instantiated by element <code>useUITemplate</code>; 
        parameter values are specified by the contained
        <code>withParam</code> elements.
        Attribute <code>xform</code> sets the binding context relative to which binding expressions within the instantiated  template get evaluated.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-templates-dtd-temp"></a>1.3.2 DTD For uiTemplate And useUITemplate</h4>
      
      <p>TODO: convert to 'XML Representation' consistent with rest of spec.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!--       param element for use in uiTemplate --&gt;
&lt;!ELEMENT  param      EMPTY&gt;
&lt;!--       name       Name of parameter being declared           --&gt;
&lt;!ATTLIST  param
  name     CDATA      #REQUIRED&gt;
&lt;!--       Defines a reusable user interface template --&gt;
&lt;!ELEMENT  uiTemplate   (param*, %FormControls;+)&gt;
&lt;!--       id         Unique ID for use when instantiating this template --&gt;
&lt;!ATTLIST  uiTemplate
  id       ID         #REQUIRED&gt;
&lt;!--       Used to pass parameter values when instantiating uiTemplate --&gt;
&lt;!ELEMENT  withParam  #MIXED&gt;
&lt;!--       name       Name of parameter whose value is being specified --&gt;
&lt;!ATTLIST  withParam
name       CDATA      #REQUIRED&gt;</pre></td></tr></table>

    </div>
  </div><div class="div2">
    
<h3><a name="ui-layout"></a>1.4 Layout in XForms</h3>
    
    
    <p>
      The <code>group</code> element is used as a container
      for defining a hierarchy of form controls.  Groups lay
      out their children using a constraint-based system
      that supports both relative flexible sizing and
      intrinsic sizing.  Groups can be nested to create
      complex hierarchies. Using CSS, an inline box can be
      specified using the <code>display</code> property with
      a value of <code>inline</code>.  A block-level group can
      be specified with a value of <code>block</code>, which
      is the default.</p>

    <div class="example">
<h5>Example: XML Representation: &lt;<code>group</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;!-- all form controls &amp; mixed content --&gt;
&lt;/group&gt;</pre></td></tr></table>
      
    </div>

    <p>
      All form
      controls defined so far are treated as
      inline text for purposes of XHTML processing.
      XForms visual clients are expected to use   a  a box layout model as defined by CSS for
      determining the overall layout of the XForms visual
      interface. Grouping of form controls using
      element <code>group</code>
      also provides semantics about the relationship amongst user
      interface controls; such knowledge can be useful in
      delivering a coherent UI to small devices--e.g.,
      if the user interface needs to be split up amongst several
      screens,  controls appearing inside the
      same
      group would typically be rendered on the same screen.</p>

    
    <p>
      Finally, the hierarchy defined by nested group elements is used to determine the 
      traversal order specified by attribute <code>navindex</code> on form controls. 
      Setting the input focus on a  group results in the focus being set to the 
      lowest form control in the tabbing order within that
      group.</p>

    <div class="issue"><p class="prefix"><a name="group-binding"></a><b>Issue (group-binding):</b></p><p>t is an open issue whether the <a title="" href="#">binding</a> attribute <code>xform</code> 
        is allowed on element <code>group</code>.
        It might make authoring easier but makes
        implementations significantly harder.
        Note that this note is here because at one point in our
        design we said that controls inside a
        <code>group</code>
        could use relative XPath expressions with the context being
        set by the containing group. </p></div>
    <div class="div3">
      
<h4><a name="ui-layout-dir"></a>1.4.1 Orientation and Direction</h4>
      
      <p>
        Containers typically have an orientation and a direction.
        The <code>box-orient</code> CSS property specifies
        the orientation of the group.  It has values of
        <code>horizontal</code>, <code>vertical</code>, or
        <code>inherit</code>.  A horizontal group lays out its
        children in a horizontal line, and a vertical group
        stacks its children vertically.
      </p>

      
      <p>
        The <code>box-direction</code>
        CSS property specifies the direction of the group.  It has values of
        <code>normal</code>, <code>reverse</code>, and <code>inherit</code>.  
        A normal horizontal group lays out its children from left to right, and a normal
        vertical group lays out its children from top to bottom.  
      </p>

      
      <p>
        Direction within nested groups is inherited by
        default.  If direction is omitted on the outermost
        group, it is assumed to have a
        horizontal orientation and normal direction.
      </p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group&gt;
  &lt;textbox  ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name&lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox ref="/person/ssid"&gt;
    &lt;caption&gt;Enter your SSID&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        When items are placed in a group without specifying any additional 
        information about their size, then the  sizes the children 
        <em>intrinsically</em>. In other words, the group makes each child only as big
        as it needs to be. Notice that in 
        the above example, the two form controls are only as
        big as they need to be, and that this in turn
        determines the size of the group (since we assume for
        simplicity that this group is not nested).</p>

      
      <p>
        Widths can be specified for items inside a horizontal group. When an 
        object specifies its width in CSS, it is telling the group that 
        it would like to be that width. Similarly, heights can be specified in CSS
        for items in a vertical group. 
        A non-nested group placed inside an enclosing CSS block will obey
        all the usual sizing rules of the block.  For example, setting the width of
        a non-nested group to 100% ensures that the group is the maximum width permitted by 
        the enclosing CSS block.
      </p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-align"></a>1.4.2 Alignment</h4>
      
      <p>
        The <code>box-align</code> property specifies how controls are aligned along the orientation
        of the group.  Its possible values are <code>left</code>, <code>center</code>, <code>right</code>, 
        <code>top</code>, <code>bottom</code>, <code>baseline</code>, <code>stretch</code> and <code>inherit</code>.  
        The default value is <code>stretch</code>.
      </p>

      
      <p>
        By default a horizontal group ensures that all children are the same height.  Once a height
        is computed for a horizontal group, all of the children are stretched vertically to the
        height of the group (minus the CSS border and padding on the group).  
        Similarly, a vertical group ensures that all its children are
        the same width.  The stretch policy overrides any
        specified width or height values.</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: vertical"&gt;
  &lt;output ref="/person/name"/&gt;
  &lt;output ref="/person/age"/&gt;
  &lt;output ref="/person/country"/&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In addition to <code>stretch</code>, a horizontal group can also align its children using the 
        values <code>top</code>, <code>center</code>, <code>baseline</code> and <code>bottom</code>.  A vertical
        group can align its children using the values <code>left</code>, <code>center</code>, and <code>right</code>.
        When these values are used, the items are no longer stretched.  They are sized intrinsically
        and then aligned on the group axis according to the specified property value on the containing
        group.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-sizing"></a>1.4.3 Controlling  Automatic Sizing </h4>
      
      <p>
        The layout algorithm can be controlled by specifying the
        degree to which items may <em>flex</em> i.e.,
        the degree to which an item allows itself to be
        <em>auto-sized</em>.
        Items in groupes fall into two categories: <code>flexible</code> and 
        <code>inflexible</code>. Inflexible objects will not grow, even when there is 
        extra space left over in the group.
        When several objects in a group are flexible, the extra space is divided 
        among the objects based on how flexible they are. The group determines how 
        much space to give an object by adding up the flex values on all of its 
        children. An object gets an amount of extra space equal to the percentage 
        of flex that it is responsible for.</p>

      
      <p>
        For example, if two objects have a flex of 1, then after both objects 
        are given their preferred sizes, the first object 
        gets 1/(1+1) = 1/2 of the extra space, and the second object also gets 1/2 
        of the extra space.</p>

      
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;group style="box-orient: horizontal; width: 200px"&gt;
  &lt;textbox  style="box-flex: 1"  ref="/person/name&gt;
    &lt;caption&gt;Please enter your full name: &lt;/caption&gt;
  &lt;/textbox&gt;
  &lt;textbox  style="box-flex: 1.5" ref="/person/age&gt;
    &lt;caption&gt;How young?&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-minmax"></a>1.4.4 Preferred, Minimum, and Maximum Sizes</h4>
      
      <p>
        For inflexible objects, the specification of the <code>width</code>
        and <code>height</code> CSS properties can be used to 
        specify a preferred  size. If these properties are omitted, 
        an inflexible object will be sized intrinsically, i.e., it will be given
        the minimum amount of space required to lay out the item.</p>

      
      <p>
        With flexible objects, there are more options. Just as with inflexible 
        objects, the <code>width</code>
        and <code>height</code> properties can be used to specify a preferred 
        size. Unlike inflexible objects, however, this size is only a guideline. 
        A flexible object will stretch as necessary. It will also 
        shrink if required until it can shrink no more (e.g., 
        when the object hits its minimum required intrinsic size).</p>

      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre> &lt;group style="box-orient: vertical"&gt;
  &lt;textbox style="box-flex: 1; height:1000px" ref="/person/name"&gt;
    &lt;caption&gt;Please enter your name:&lt;/caption&gt;
  &lt;/textbox&gt;
&lt;/group&gt;</pre></td></tr></table>

      
      <p>
        In the above example if the group were to shrink, the
        textbox being flexible would shrink--despite its
        preferred height of <code>1000px</code>.  The group
        continues to shrink minimum required height for the
        textbox is reached. After that, the textbox can
        shrink no further. If the group were to continue to
        shrink, the form control's contents would be
        clipped, and a portion of the control would no
        longer be visible.</p>

      
      <p>
        For a more fine-grained control of
        minimum and maximum sizes, the
        <code>min-width</code>, <code>min-height</code>,
        <code>max-width</code>, and <code>max-height</code>
        CSS properties can be used. When specified, these
        properties provide extra information to the group as
        it shrinks and grows the object in question.</p>

      
      <p>
        In a horizontal group, for example, if a minimum
        width is specified, then the flexible object will
        not be allowed to shrink below that width. If a
        maximum width is specified, then the flexible object
        will not be allowed to grow beyond that width.</p>

      
      <p>
        The above example demonstrates the use of <code>min-height</code> and <code>max-height</code>
        within a vertical group. In the first 
        image the group has been shrunk until it is smaller than 100 pixels in 
        height. Because the <code>iframe</code> has a specified minimum height of 100 pixels, 
        it is not allowed to shrink any further, and so as the group falls below 100 
        pixels, the <code>iframe</code> gets clipped, and portions of it become invisible.</p>

      
      <p>
        In the second image, the group has been expanded past 300 pixels in 
        height. Even though the group is getting bigger, the extra space is not 
        being consumed by the <code>iframe</code>, because its maximum height of 300 pixels has 
        been reached. It will grow no further.</p>

      
      <p>
        Below is another example illustrating min and max width.</p>
      
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example unavailable at publication time</pre></td></tr></table>

      <p>
        In the above example, the group has been stretched so that it is very 
        wide. The first child has a maximum width of 50 pixels, and it divides the 
        excess space equally with the second child until its maximum width has 
        been reached. After that, since it is not allowed to grow any further, the 
        remaining space all goes to the second child.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-packing"></a>1.4.5 Packing Controls</h4> 
      
      <p>
        When all of the items within a <code>group</code>
        element are inflexible or when all objects have
        grown to their maximum sizes and can stretch no
        further, extra space may be left over in the group.
        An additional property can be used to dictate how
        any additional space should be distributed between
        objects.  The CSS property <code>box-pack</code> has
        the possible values of <code>left</code>,
        <code>right</code>, <code>top</code>,
        <code>bottom</code>, <code>center</code>,
        <code>justify</code> and <code>inherit</code>.  The
        default is <code>justify</code>.</p>

      
      <p>
        In the above example, the button is centered within the group using the <code>box-align</code>
        and <code>box-pack</code> properties together.  The former centers the button vertically, and
        the latter centers the button horizontally.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-overflow"></a>1.4.6 Overflow</h4>
      
      <p>
        Items within a group may use the CSS <code>overflow</code> property to obtain horizontal and
        vertical scrollbars as needed.  Flexible objects that shrink below their minimum intrinsic
        size (but that still have a size greater than a specified CSS minimum) can display 
        scrollbars using the <code>overflow</code> property.  If overflow is not specified,
        the object will be clipped instead.</p>

    </div>
    <div class="div3">
      
<h4><a name="ui-layout-inline"></a>1.4.7 Inlines and Blocks</h4>
      
      <p>
        Whether an element is inline or block when placed directly inside a group is irrelevant.  Objects
        will be flowed horizontally or vertically based off the
        <code>box-orient</code> property.
      </p>

      
      <p>
        When any raw text nodes are encountered directly inside a group, an anonymous block is constructed
        to wrap the text.  This anonymous block then participates in the  layout as
        a single item.</p>

    </div>
    
  </div><div class="div2">
    
<h3><a name="ui-subforms"></a>1.5 Multiple Sub-forms Or Sub-pages</h3>
    <table border="1" summary="Editorial note: Raman"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Raman</b></td><td width="50%" valign="top" align="right">March 12, 2001</td></tr><tr><td valign="top" align="left" colspan="2">Notice that we originally started by creating
        an equivalent of <code>fieldset</code>--but given
        the present design of the XForms UI layer, and given
        that conditional construct <code>case</code> can take
        either <code>group</code> or <code>html:div</code> elements,
        there is little left in this construct that is
        additional to what is in XHTML <code>html:div</code>.  I
        therefore suggest simply reusing <code>html:div</code>--perhaps
        bind XForms specific behaviors through CSS
        e.g., a stack of cards for example?  The way I am
        thinking of this is that whether it is a stack of
        cards shown one at a time, or a sequence of tab
        dialogs is a presentation issue and might therefore be
        best left to CSS as we have done with the rest of the
        presentational issues in XForms.</td></tr></table>
    <div class="div3">
      
<h4><a name="ui-subforms-pages"></a>1.5.1 Subpages</h4>
      
      <p>
        Subpages provide a means to present XForms one bit at a time, breaking a complex 
        task into smaller, simpler parts. Presentation of a subpage can occupy the entire 
        "page" or just part of a page. Different presentations are possible, e.g. a 
        stack of <em>pages</em> with visible name tags, or as a set of buttons for flipping 
        through the stack or navigating directly to a particular subpage. One possible 
        representation is a <code>formset</code> element enclosing one or more <code>subpage</code> 
        elements, each of which starts with a
        <code>caption</code> element. </p>

      
      <p>
        As the name implies <code>subpage</code> is not specific to XForms--our intent 
        is to design <code>subpage</code> so that it can be used within XForms--and 
        more generally within XHTML to create presentations where document views are 
        presented to progressively reveal the document
        structure and content.</p>

    </div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="schema"></a>1 Schema for XForms</h2> 

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Micah (W3C XForms Working Group) --&gt;
&lt;!-- converted with http://www.w3.org/2001/03/webdata/xsu --&gt;
&lt;!DOCTYPE xsd:schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" [
&lt;!ENTITY % p 'xsd:'&gt;
&lt;!ENTITY % s ':xsd'&gt;
]&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xform="http://www.w3.org/2001/06/xforms"
targetNamespace="http://www.w3.org/2001/06/xforms"
elementFormDefault="qualified"&gt;
  &lt;!-- 
structural elements
--&gt;
  &lt;xsd:element name="xform"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of the xform container element.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element ref="xform:submitInfo" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:model" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:instance" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:bind" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="model"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of model container. Content model TBD.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="instance"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of instance container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any" maxOccurs="unbounded"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submitInfo"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of submit info container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
        &lt;!-- allow zero or more submitExtension elements --&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="target" type="xsd:anyURI" use="required"/&gt;
      &lt;xsd:attribute name="method" type="xform:methodType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:attributeGroup name="linkingAttributes"&gt;
    &lt;xsd:attribute name="href" type="xsd:anyURI"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="bind"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of bind container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
User Interface form controls and other elements
--&gt;
  &lt;xsd:attributeGroup name="commonUIAttributes"&gt;
    &lt;xsd:attribute name="lang" type="xsd:language" use="optional"/&gt;
    &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
    &lt;xsd:attribute name="class" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="style" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="xform" type="xsd:IDREF" use="optional"/&gt;
    &lt;xsd:attribute name="accessKey" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="navIndex" type="xsd:nonNegativeInteger" use="optional"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="caption"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="hint"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="help"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="onevent"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Defined in a different specification&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:group name="choiceGroup"&gt;
    &lt;xsd:choice&gt;
      &lt;xsd:element ref="xform:choices"/&gt;
      &lt;xsd:element ref="xform:item"/&gt;
    &lt;/xsd:choice&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="choices"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence maxOccurs="unbounded"&gt;
        &lt;xsd:group ref="xform:choiceGroup"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="item" type="xform:string"/&gt;
  &lt;xsd:group name="commonUIChildren"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xform:caption"/&gt;
      &lt;xsd:element ref="xform:help" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:hint" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:onevent" minOccurs="0"/&gt;
      &lt;xsd:any namespace="##any"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="textbox"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="secret"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="uploadMedia"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="mediaType" type="xform:spaceSeparatedListType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectOne"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectMany"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectBoolean"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="range"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="start" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="end" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="stepSize" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="button"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="output"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="xform" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="format" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submit"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="reset"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
Bring over xsd simpleTypes
--&gt;
  &lt;xsd:simpleType name="decimal"&gt;
    &lt;xsd:restriction base="xsd:decimal"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="string"&gt;
    &lt;xsd:restriction base="xsd:string"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="boolean"&gt;
    &lt;xsd:restriction base="xsd:boolean"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="date"&gt;
    &lt;xsd:restriction base="xsd:date"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="time"&gt;
    &lt;xsd:restriction base="xsd:time"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;!-- Note: similar for all other built-in Schema types; new schema was not available at publish 

time --&gt;
  &lt;!--
New simpleTypes
--&gt;
  &lt;xsd:simpleType name="currency"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="[A-Z]{3}"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="maskType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="((A|a|X|x|N|n|M|m)|(\\.))*([0-9\*](A|a|X|x|N|n|M|m))?"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="spaceSeparatedListType"&gt;
    &lt;xsd:list itemType="xsd:token"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="selectUIType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="radioGroup"/&gt;
      &lt;xsd:enumeration value="checkboxGroup"/&gt;
      &lt;xsd:enumeration value="pulldown"/&gt;
      &lt;xsd:enumeration value="listbox"/&gt;
      &lt;xsd:enumeration value="comboGroup"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="methodType"&gt;
    &lt;xsd:restriction base="xform:string"&gt;
      &lt;xsd:enumeration value="postXML"/&gt;
      &lt;xsd:enumeration value="post"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;</pre></td></tr></table>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="prod-notes"></a>A Production Notes (Non-Normative)</h2> 
<p>This document was encoded in the <a href="http://www.w3.org/XML/1998/06/xmlspec-v21.dtd">XMLspec
DTD</a> (which has <a href="http://www.w3.org/XML/1998/06/xmlspec-report-v21.htm">documentation</a>
available). The primary tools used for editing were SoftQuad XMetaL and EMACS with psgml and XAE. The HTML versions
were produced with the <a href="http://www.w3.org/XML/1998/06/xmlspec.xsl">xmlspec.xsl</a>
XSLT stylesheet using the Saxon engine.</p>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div>