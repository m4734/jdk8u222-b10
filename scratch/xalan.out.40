<!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="schema"></a>1 Schema for XForms</h2> 

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Micah (W3C XForms Working Group) --&gt;
&lt;!-- converted with http://www.w3.org/2001/03/webdata/xsu --&gt;
&lt;!DOCTYPE xsd:schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" [
&lt;!ENTITY % p 'xsd:'&gt;
&lt;!ENTITY % s ':xsd'&gt;
]&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xform="http://www.w3.org/2001/06/xforms"
targetNamespace="http://www.w3.org/2001/06/xforms"
elementFormDefault="qualified"&gt;
  &lt;!-- 
structural elements
--&gt;
  &lt;xsd:element name="xform"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of the xform container element.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element ref="xform:submitInfo" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:model" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:instance" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:bind" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="model"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of model container. Content model TBD.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="instance"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of instance container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any" maxOccurs="unbounded"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submitInfo"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of submit info container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
        &lt;!-- allow zero or more submitExtension elements --&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="target" type="xsd:anyURI" use="required"/&gt;
      &lt;xsd:attribute name="method" type="xform:methodType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:attributeGroup name="linkingAttributes"&gt;
    &lt;xsd:attribute name="href" type="xsd:anyURI"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="bind"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of bind container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
User Interface form controls and other elements
--&gt;
  &lt;xsd:attributeGroup name="commonUIAttributes"&gt;
    &lt;xsd:attribute name="lang" type="xsd:language" use="optional"/&gt;
    &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
    &lt;xsd:attribute name="class" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="style" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="xform" type="xsd:IDREF" use="optional"/&gt;
    &lt;xsd:attribute name="accessKey" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="navIndex" type="xsd:nonNegativeInteger" use="optional"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="caption"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="hint"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="help"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="onevent"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Defined in a different specification&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:group name="choiceGroup"&gt;
    &lt;xsd:choice&gt;
      &lt;xsd:element ref="xform:choices"/&gt;
      &lt;xsd:element ref="xform:item"/&gt;
    &lt;/xsd:choice&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="choices"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence maxOccurs="unbounded"&gt;
        &lt;xsd:group ref="xform:choiceGroup"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="item" type="xform:string"/&gt;
  &lt;xsd:group name="commonUIChildren"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xform:caption"/&gt;
      &lt;xsd:element ref="xform:help" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:hint" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:onevent" minOccurs="0"/&gt;
      &lt;xsd:any namespace="##any"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="textbox"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="secret"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="uploadMedia"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="mediaType" type="xform:spaceSeparatedListType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectOne"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectMany"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectBoolean"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="range"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="start" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="end" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="stepSize" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="button"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="output"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="xform" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="format" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submit"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="reset"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
Bring over xsd simpleTypes
--&gt;
  &lt;xsd:simpleType name="decimal"&gt;
    &lt;xsd:restriction base="xsd:decimal"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="string"&gt;
    &lt;xsd:restriction base="xsd:string"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="boolean"&gt;
    &lt;xsd:restriction base="xsd:boolean"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="date"&gt;
    &lt;xsd:restriction base="xsd:date"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="time"&gt;
    &lt;xsd:restriction base="xsd:time"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;!-- Note: similar for all other built-in Schema types; new schema was not available at publish 

time --&gt;
  &lt;!--
New simpleTypes
--&gt;
  &lt;xsd:simpleType name="currency"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="[A-Z]{3}"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="maskType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="((A|a|X|x|N|n|M|m)|(\\.))*([0-9\*](A|a|X|x|N|n|M|m))?"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="spaceSeparatedListType"&gt;
    &lt;xsd:list itemType="xsd:token"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="selectUIType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="radioGroup"/&gt;
      &lt;xsd:enumeration value="checkboxGroup"/&gt;
      &lt;xsd:enumeration value="pulldown"/&gt;
      &lt;xsd:enumeration value="listbox"/&gt;
      &lt;xsd:enumeration value="comboGroup"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="methodType"&gt;
    &lt;xsd:restriction base="xform:string"&gt;
      &lt;xsd:enumeration value="postXML"/&gt;
      &lt;xsd:enumeration value="post"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;</pre></td></tr></table>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="rpm"></a>1 Processing Model</h2>

<div class="div2">
<h3><a name="rpm-intro"></a>1.1 Introduction</h3>

<p>The XForms Reference Processing Model is a normative explanation of the components, 
  predictive behavior, and mechanisms of XForms Processors. It is not intended to
  constrain implementations. XForms Processors may be implemented in any manner, so
  long as the end results are identical to that described in this chapter.</p>
  
<p>This chapter uses the terms <b>may</b>, <b>must</b>, and 
  <b>should</b> (when rendered as in this paragraph) in 
  accord with RFC 2119.</p>
  
<div class="issue"><p class="prefix"><a name="issue-processing"></a><b>Issue (issue-processing):</b></p>
<p>This chapter is still at an early phase and may contain errors or omissions.
Feedback on this chapter is especially appreciated.</p></div>

<div class="div3">
<h4><a name="rpm-intro-rationale"></a>1.1.1 Design Rationale</h4>

<p>The Reference Processing Model set out in this chapter will:</p>
<ul>
  <li><p>Be simple enough to implement across a wide range of devices, including 
    resource-constrained handhelds and appliances.</p></li>
  <li><p>Define a predictive processing model with enough detail for implementors 
    to create interoperable software.</p></li>
  <li><p>Define a well-ordered system for calculations and dependencies independent 
    of processor speed or threading.</p></li>
  <li><p>Provide a unified addressing scheme for binding expressions, independent 
    of how the structure of the instance data is defined.</p></li>
  <li><p>Be simple enough for the existing base of HTML authors to quickly get up 
    to speed.</p></li>
  <li><p>Be compatible (to the extent reasonably possible) with existing form processing.</p></li>
  
</ul>
</div>
</div>

<div class="div2">
<h3><a name="rpm-properties"></a>1.2 XForms Properties</h3>

<p>For each <code>xform</code> element, the XForms Processor maintains 
  a set of read-write properties, as described here. These properties are available to all
  expressions in the <a title="" href="#">containing document</a>.</p>
<ul>
  
  
  
  
  <li><p><code>immediate-refresh</code></p></li>
  <li><p><code>immediate-revalidate</code></p></li>
  <li><p><code>immediate-recalculate</code></p></li>
  <li><p><code>use-nil</code></p></li>
</ul>
<p><code>immediate-refresh</code>  controls whether changes in the 
  instance data are immediately updated in the UI</p>
<p><code>immediate-revalidate</code>  controls whether changes in 
  the instance data immediately trigger a validation</p>
<p><code>immedate-recalculate</code> controls whether changes in 
  the instance data immediately trigger a recalculation</p>
<p><code>use-nil</code> controls whether XML Schema Instance nils 
  are placed in the instance data</p><p>Additionally, the following properties are available for reading (but not modification). These properties are available to all expressions in the containing document.</p><ul>
  <li><p><code>version</code></p></li>
  <li><p><code>conformance-level</code></p></li>
  
  <li><p><code>timezone</code></p></li>
  
  
  
  
</ul><p><code>version</code>  is defined as the string "1.0" for 
  XForms 1.0</p>
<p><code>conformance-level</code> strings are defined later in this chapter</p>

<p><code>timezone</code>  strings are signed integers representing the 
  number of minutes offset from GMT</p>


</div>

<div class="div2">
<h3><a name="rpm-events"></a>1.3 Events</h3>
<p>XForms uses an events system as defined in <a href="#">[ref-dom2-events]</a>,
with a Capture phase, arrival at the Event Target, and then a Bubbling Phase.</p>

<p>Events fall into different groupings. One class of events indicates that some 
  processing is about to happen. That processing may be halted by the event handler:</p>
<ul>
  <li><p><code>xforms-submit</code></p></li>
  <li><p><code>xforms-reset</code></p></li>
  <li><p><code>xforms-value-changing</code></p></li>
  <li><p><code>xforms-interactive-value-changing</code></p></li>
  <li><p><code>xforms-instance-changed</code></p></li>
</ul>
<p>Another class of events indicates that some processing has already happened 
  or is in progress. Such processing can not be halted by the event hander:</p>
<ul>
  <li><p><code>xforms-construct</code></p></li>
  <li><p><code>xforms-destruct</code></p></li>
  
  <li><p><code>xforms-initialize</code></p></li>
  <li><p><code>xforms-exception</code></p></li>
</ul>
<p>Finally, certain events are used by the author or the XForms Processor to cause 
  processing to happen:</p>
<ul>
  <li><p><code>xforms-recalculate</code></p></li>
  <li><p><code>xforms-refresh</code></p></li>
</ul>
<p>Unless otherwise noted, the target node for all events is the <code>xform</code> 
  element. When a containing document has multiple <code>xform</code> 
  elements, the binding is used to determine which <code>xform</code> 
  element is used.</p>
  
<p>The Working Group is using pre-defined generic event handling, defined in <a href="#">[ref-xhtml-events]</a>, additionally defining a set of XForms-specific actions.</p>
</div>



<div class="div2">
<h3><a name="rpm-processing"></a>1.4 XForms Processing</h3>

<div class="div3">
<h4><a name="rpm-processing-init"></a>1.4.1 Initialization/Resume</h4>

<p>The following describes the initialization process for XForms. Initialization 
  must occur before any other processing. For each <code>xform</code> 
  element in the containing document, in document order, the following processing 
  occurs:</p>
<ol>
  <li><p> An <code>xforms-construct</code> event is fired; this is the place for 
    authors to handle any initialization tasks.</p></li><li><p>Instance data is constructed (<a href="#"><b>???</b></a>).</p></li>
  
  <li><p>An <code>xforms-initialize</code> event is fired. A handler for this event could perform form initialization tasks such as a database lookup.</p></li>
  <li><p>A recalculation (<a href="#"><b>???</b></a>) takes place.</p></li>
  <li><p>A UI refresh (<a href="#"><b>???</b></a>) takes place.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-instance"></a>1.4.2 Instance Data Construction</h4><p>The following steps describe how the instance data associated with each <code>xform</code> element is constructed. Of the following options, the first applicable option is chosen. Only one of the following applies:</p><ol>
  <li><p>If an <code>instance</code> element is present and contains non-whitespace child nodes, the contents of the <code>instance</code> element are copied into the instance data tree, based on the infoset mappings defined in the XPath <a href="#">[ref-xpath-1.0]</a>data model.</p></li><li><p>If an <code>instance</code> element is present and contains a reference to non-local 
    initial instance data, it is retrieved by traversing the link to it, then copied into the instance data as described above.  A remote instance that
    is unretrievable for any reason is ignored, in which case an 
    XForms Processor <b>may</b> issue a warning.</p></li>
  <li><p>If  an <code>instance</code> element is not present, then a default instance data configuration is produced, according to the following rules:
  </p><ol>
      <li><p>Each form control bound to the 
        <code>xform</code> element currently being processed is visited 
        in document order. Each form control's binding expression is 
        evaluated.</p></li>
      <li><p>If the instance data item 
        result of evaluating the binding expression doesn't already exist, it is 
        created, and if the <code>use-nil</code> 
        property is true, populated with a nil value (an <code>xsi:nil="true"</code> attribute). Note that  only 
        elements can hold nil values. The form control receives a default
        blank value. The algorithm for creating instance data items is 
        as follows: For each location step in the canonical binding expression,
        from left to right, where no matching node exists in the
        instance data, a new node is inserted.</p><div class="issue"><p class="prefix"><a name="creating-instance-nodes"></a><b>Issue (creating-instance-nodes):</b></p><p>The algorithm for creating instance nodes is under discussion, with one possibility being ignoring the path information, using only the local name, in a flat list.</p></div></li>
  </ol></li><li><p>If none of the above options are fulfilled, this is an error condition, and the XForms Processor <b>must</b> stop processing with an error message.</p></li></ol></div><div class="div3">
<h4><a name="rpm-processing-navorder"></a>1.4.3 Navigation Sequence Algorithm</h4>

<p> Navigation is determined on a containing document-wide basis. The navigation sequence 
  is determined as follows:</p>
<ol>
  <li><p> Those form controls that support <code>navindex</code> and assign a positive 
    value to it are navigated first. Navigation proceeds from the form control 
    with the lowest <code>navindex</code> value to the form control with the highest 
    value. Values need not be sequential nor must they begin with any particular 
    value. form controls that have identical 
    <code>navindex</code> values should be navigated in document order.</p></li>
  <li><p> Those form controls that do not supply <code>navindex</code> or supply 
    a value of "0" are navigated next. These form controls are navigated in document 
    order.</p></li>
  <li><p>Those form controls that are disabled, hidden, or on a non <code>relevant</code> 
    subtree are assigned a relative order in the overall sequence but do not participate 
    as navigable controls.</p></li>
  <li><p> The navigation sequence past the the last form control (or before the first) 
    is undefined. XForms Processors may cycle back to the first/last control, 
    remove focus from the form, or other possibilities.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-interact"></a>1.4.4 Interactivity</h4>

<p>XForms provides similar processing to the HTML <code>onChange</code> event. 
  As users indicate completion of a form control by navigating away the following 
  occurs:</p>
<ol>
  <li><p> If the display value has changed since the user last navigated to the form 
    control, an <code>xforms-value-changing</code> event is fired. If the 
    display value hasn't changed, processing for this event ends.
  </p><ol>
      <li><p>Any listener may prevent default processing (one option under consideration 
        provides a <code>&lt;stopevent/&gt;</code> action), which will end event 
        processing immediately after the Capture and Bubbling phases. Alternatively, 
        a listener may perform a custom translation from display value to canonical 
        value. Any listener may have side-effects that modify any instance data item,
        in which case the modified instance data items must be marked "dirty".</p></li>
    <li><p>Default processing is to convert the display value of the form control 
      to the canonical value as specified in the Datatypes chapter. Default processing 
      should automatically take into account regional settings (if any), such 
      as decimal character symbol, date formats, etc.</p></li>
  </ol></li>
  <li><p>If the <code>immediate-revalidate</code> property is true, all validations
    (<a href="#"><b>???</b></a>) bound to the form control are run. Note that validation is performed against 
    the canonical value, not the display value.
  </p><ol>
    <li><p>If any validation fails, the user <b>must</b> be notified, and 
      <b>may</b> not be allowed to navigate away from the control. The 
      invalid entry in the form control <b>should</b> be preserved. 
      The associated instance data item is left unchanged, thereby ending processing 
      for this event.</p></li>
  </ol></li>
  <li><p>The instance data item is updated with the new value, and marked "dirty".</p></li>
  <li><p> If the <code>immediate-recalculate</code> property is true, a recalculate
  (<a href="#"><b>???</b></a>) occurs to perform any defined calculations.</p></li>
  <li><p>If the <code>immediate-refresh</code> property is true, a refresh (<a href="#"><b>???</b></a>) 
    occurs to update any form controls that might be dependent on this newly changed 
    value.</p></li>
</ol>
<p>Certain form controls allow interactive response without finalizing on a value. 
  Examples of this include edit boxes (users can type various characters before 
  "tabbing out") and slider controls (users can be continuously adjusting 
  the value before releasing at a certain value). Interactive temporary values 
  such as this are expressly allowed to be "invalid", that is outside 
  the permissible value space. This is because incomplete data may be present 
  while the user is entering transitional values.</p>
<p>Example: A partially entered currency value of "U" is not valid because 
  it doesn't (yet) have 3 characters. This is permitted temporarily, as long as 
  the user remains on the form control. XForms Processors with sufficient processing 
  resources would typically update/refresh on every character. Resource-constrained 
  XForms Processors would typically only update/refresh on the final value.</p>
<ol>
  <li><p> Any time the display value of a form control changes (such as through character 
    or cut/paste activities), even without indication that this is a final value, 
    an <code>xforms-interactive-value-changing</code> event is fired. Resource-constrained 
    XForms Processor implementations <b>may</b> choose to ignore all 
    such events.
  </p><ol>
    <li><p>Event listeners may prevent default processing.</p></li>
    <li><p>Otherwise, default handling is as follows: The current form control is 
      revalidated (<a href="#"><b>???</b></a>). This is for internal purposes only, 
      and happens regardless of the <code>immediate-revalidate</code> setting. 
      If all validations on the form control are successful, the instance data item
      is updated, and marked "dirty". If any validations fail (indicating 
      a transitional value) all form controls bound to the same instance data item
      <b>may</b> be directly updated with the display value. Otherwise, 
      the following occurs:</p></li>
    <li><p>If the <code>immediate-recalculate</code> property is true, a recalculation
      (<a href="#"><b>???</b></a>) occurs to perform any defined calculations.</p></li>
    <li><p>If the <code>immediate-refresh</code> property is true, a refresh (<a href="#"><b>???</b></a>) 
      occurs to update any form controls that might be dependent on this newly 
      changed value.</p></li>
  </ol></li>
</ol>
<p>Implementations that choose to respond <code>xforms-interactive-value-changing</code> 
  are expected optimize processing (for instance not flashing the entire screen 
  for each character entered, etc.).</p>
</div>

<div class="div3">
<h4><a name="rpm-processing-recalc"></a>1.4.5 Recalculation Algorithm</h4>

<p>XForms Processors are free (and encouraged) to skip or change any steps in 
  this algorithm, as long as the end result is the same. Each form control may 
  have a model item property <code>priority</code> value, which is the main factor 
  in determining calculation order.</p>
<p>Following is the default handling for an <code>xforms-recalculate</code> event:</p>
<ol>
  <li><p>Each model item with a bound <code>calculate</code> model item property
  is visited in <b>calculation order</b>, which is defined as follows:
  </p><ol>
    <li><p>Those model items that are bound to a <code>priority</code> and assign 
      a positive integer to it are computed first. Computation proceeds from the 
      model item with the lowest bound <code>priority</code> to the model item 
      with the highest bound <code>priority</code>. Values need not be sequential 
      nor must they begin with any particular value. Model items with the same bound
      <code>priority</code> value are computed in document order.</p></li>
    <li><p>Those model items not bound to a priority or bound to one with the value 
      "0" are computed next. These model items are computed in document 
      order.</p></li>
  </ol></li>
  <li><p>For each model item, the expression in the <code>calculate</code> model item 
  property is evaluated. Any instance data item changes as a result of 
    this are marked with a "dirty" flag.</p></li>
  <li><p>The instance data item bound to the model item is updated with the result 
    of the <code>calculate</code> expression, and the "dirty" flag is set.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-refresh"></a>1.4.6 UI Refresh Algorithm</h4>
<p>Following is the default handling for an <code>xforms-refresh</code> event:</p>
<ol>
  <li><p> For purposes of UI refresh, the instance data as it exists at the 
    beginning of processing the <code>xforms-refresh</code> event is used.</p></li>
  <li><p> Each form control is visited in refresh order, which is defined as follows:
  </p><ol>
    <li><p>Those form controls that have a given or computed navigation sequence 
      value are visited first, in the navigation sequence.</p></li>
    <li><p>Those form controls outside the navigation sequence are visited next. 
      These form controls are visited in document order.</p></li>
  </ol></li>
  <li><p>For each form control, the <code>relevant</code> constraint is evaluated, 
    which might result in the form control being disabled/hidden/etc. as specified 
    in the chapter <a href="#"><b>???</b></a>.</p></li>
  <li><p>For each form control, the binding expression is evaluated. If the
  instance data indicates that the instance data item is not "dirty", processing for
  that particular form control completes.
  </p><ol>
    <li><p>Otherwise, if the instance data item is "dirty", an <code>xforms-instance-changed</code> 
      event is fired.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are free to 
      compute a new display value.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are prohibited 
      from directly updating any form controls present.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are prohibited 
      from altering any portion of the instance data. To attempt to do so 
      results in an <code>xforms-exception</code> being fired.</p></li>
    <li><p>Listeners may prevent the default processing of the <code>xforms-instance-changed</code> 
      event.</p></li>
    <li><p>Default processing is to convert the canonical value into a display value, 
      taking into account regional settings (if any) such as decimal separator 
      character, etc.</p></li>
  </ol></li>
  <li><p>The form control is updated with the display value.</p></li>
  <li><p>After all form controls have been updated, all "dirty" flags in 
    the instance data are cleared.</p></li>
</ol>

<div class="note"><p class="prefix"><b>Note:</b></p><p>Editor's Note: Still to be addressed is the processing when a datatype facet 
  or model item property are changed--what gets marked "dirty"?; what 
  gets recalculated?; what gets revalidated?; what gets refreshed?</p></div>
</div>

<div class="div3">
<h4><a name="rpm-processing-revalidate"></a>1.4.7 Revalidation Algorithm</h4>

<p>Revalildation always occurs within the scope of a context form control.
Following is the revalidation process:</p>
<ol>
  <li><p> The bound instance data item is checked against any bound XForms Datatype 
    constraining facets. If any fail, the context form control is considered invalid.</p></li>
  <li><p> The bound instance data item is checked against any bound Schema Datatype 
    constraining facets. If any fail, the context form control is considered invalid.</p></li>
  <li><p> If a <code>validate</code> model item property is bound to the context 
    form control, the expression within is evaluated. If it evaluates to false, 
    the context form control is considered invalid.</p></li>
  <li><p> If the context form control is invalid, the XForms Processor <b>must</b> 
    notify the user. The XForms Processor <b>may</b> combine messages 
    before presentation to the user.</p></li>
</ol>
</div>
</div>

<div class="div2">
<h3><a name="rpm-send"></a>1.5 Submit and Reset</h3>

<p>The form filling experience ends with submitting the form, 
  or starting over. The XForms processing for these events are covered here. The following sections describe how to instance data is prepared for submission.</p>


<div class="div3">
<h4><a name="rpm-send-submit"></a>1.5.1 Submit</h4>

<p>In response to an <code>xforms-submit</code> event, the following takes place:</p>
<ol>
  <li><p>Event listeners may prevent default processing of the submit request. Otherwise, 
    default handling as described below occurs.</p></li>
  <li><p>Every form control is revalidated (<a href="#"><b>???</b></a>). Any invalid 
    values <b>must</b> be reported to the user and submit processing 
    <b>must</b> not continue.</p></li>
  <li><p>A subset or all of the instance data is selected based on
  the binding expression used to invoke the submit request. The selected nodes and all children are selected for serialization as submitted data.
  If no <code>ref</code> attribute is specified, all nodes in the instance data are selected by default. </p><ol>
    <li><p>If the instance data selection results in an empty node-set, the submit 
      <b>must</b> be aborted and submit processing <b>must</b> 
      not continue.</p></li>
  </ol></li>
  <li><p>Instance data is serialized according to one of the processes defined below.</p></li>
  <li><p>Instance data is delivered over the network as an HTTP POST.</p></li><li><p>Upon successful delivery of the submit data, an <code>xforms-destruct</code> event is fired and form processing shuts down.</p></li><li><p>The response page sent by the server replaces the current containing document.</p></li>
</ol>
<div class="issue"><p class="prefix"><a name="method-strings"></a><b>Issue (method-strings):</b></p><p>We have yet to define the method strings (e.g. <code>method="post"</code> in XHTML)</p></div></div>

<div class="div3">
<h4><a name="rpm-send-reset"></a>1.5.2 Reset</h4>
<p>In response to an <code>xforms-reset</code> event, the following takes place:</p>
<ol>
  <li><p>Event listeners may prevent default processing of the reset request. Otherwise, 
    default handling as described below occurs.</p></li>
  <li><p>A subset or all of the instance data is selected based on the
  binding expression used to invoke the suspend request.
   The selected nodes and all children are selected for resetting.
  If no <code>ref</code> attribute is specified, all nodes in the instance data are selected by default. </p><ol>
    <li><p>If the instance data selection results in an empty node-set, the reset 
      has no effect.</p></li>
  </ol></li>
  <li><p>New instance data for the selected instance data is prepared, based on the <code>instance</code> element associated with the current <code>xform</code> element, according to 
    the rules for initialization above.</p></li>
  <li><p>The selected instance data is replaced with the new instance data.</p></li>
</ol>
</div>


</div>  
  
<div class="div2">
<h3><a name="rpm-serialize"></a>1.6 Serialization Formats for  Instance Data</h3><div class="div3">
<h4><a name="rpm-send-urlencoded"></a>1.6.1 application/x-www-form-urlencoded</h4>

<p>This format is intended to facilitate the integration of XForms into HTML forms 
  processing environments, and represents an extension of the <a href="#">[ref-xhtml-1.0]</a>
  form content type of the same name with extensions to expresses the hierarchical
  nature of instance data.</p>
<p>This format is not suitable for the persistence of binary content. Therefore, 
  it is recommended that XForms capable of containing binary content use either 
  the multipart/form-data (<a href="#"><b>???</b></a>) or text/xml (<a href="#"><b>???</b></a>) formats.</p>
<div class="issue"><p class="prefix"><a name="issue-urlencoding-mods"></a><b>Issue (issue-urlencoding-mods):</b></p><p class="prefix"><b>Modifications to urlencoding process</b></p>
<p>The urlencoding technique given here does not exactly match how legacy
  implementations produce urlencoded data. (In particular, we are adding contextual
  information with slashes and multiple location-steps) Will this approach interfere
  with legacy implementations?</p></div>
<div class="issue"><p class="prefix"><a name="issue-utf8-encoding"></a><b>Issue (issue-utf8-encoding):</b></p><p>Under discussion 
  is the intent to have the data be UTF8 encoded; however, this is dependent upon 
  IETF developments. Would UTF8 meet the needs of the forms community?</p></div>
<p>The steps for building this persistence format is as follows:</p>
<ol>
  <li><p>Prepare a new UTF-8 encoded string buffer to hold the persisted instance
  data.</p></li>
  <li><p>Beginning with the root element of the  instance data, iterate
    over the selected content of the instance data in document order and build an ordered set of
    strings by performing the following steps: 
    
  </p><ol>
      <li><p>For each element with an attribute, append to the set a string of the 
        format "<em>path</em>=<em>value</em>" where
        <em>path</em> is the canonical binding expression that refers to each
        attribute, and <em>value</em> is the character content of each attribute
        (urlencoded if necessary).</p></li>
      <li><p>For each element enclosing character content, append to the set a string 
        of the format "<em>path</em>=<em>value</em>" where <em>path</em> is 
        the canonical binding expression that refers to the element, and
        <em>value</em> is the character content of the element (urlencoded if
        necessary).</p></li>
      <li><p>For each element enclosing element content, continue the iteration.</p></li>
    </ol></li>
  <li><p>Append the strings from the ordered set together, delimiting the strings 
    with an ampersand '&amp;' character, and place the result of the append into 
    the UTF-8 encoded string buffer.</p></li>
</ol>
<p>Example:</p>
<div class="example">
<h5>Example: application/x-www-form-urlencoded</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>/PersonName/@title=Mr&amp;/PersonName/FirstName=Roland</pre></td></tr></table>
<p>This format consists of sets of a canonical binding expression paired with a value.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;PersonName title="Mr"&gt;
  &lt;FirstName&gt;Roland&lt;/FirstName&gt;
&lt;/PersonName&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p>
</div>
</div>

<div class="div3">
<h4><a name="rpm-send-multipart"></a>1.6.2 multipart/form-data</h4>

<p>This format is intended to facilitate the integration of XForms into HTML forms 
  processing environments, and represents an extension of the <a href="#">[ref-xhtml-1.0]</a>
  form content type of the same name that expresses the hierarchical 
  nature of instance data. Unlike the application/x-www-form-urlencoded (<a href="#"><b>???</b></a>) 
  format, this format is suitable for the persistence of binary content.</p>
<p>This format follows the rules of all multipart MIME data streams for form data as outlined 
  in <a href="#">[ref-rfc-2388]</a>, with the "name" of each part being the canonical binding expression that references the selected instance data item.</p>

<p>Example:</p>
<div class="example">
<h5>Example: multipart/form-data</h5>

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
  Content-Disposition: form-data; name="/PersonName/@title"

Mr
--AaB03x
  Content-Disposition: form-data; name="/PersonName/FirstName"

Roland
--AaB03x

...Possibly more data...

--AaB03x-</pre></td></tr></table>
 <p>This format consists of sets of a canonical binding expression paired 
   with a value.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;PersonName title="Mr"&gt;
  &lt;FirstName&gt;Roland&lt;/FirstName&gt;
&lt;/PersonName&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p>
</div>


</div>

<div class="div3">
<h4><a name="rpm-send-xml"></a>1.6.3 text/xml</h4>
<p>This format permits the expression of the instance data as an XML-based format 
  that is straightforward to process with off-the-shelf XML processing tools. 
  In addition, this format is suitable for the persistence of binary content.</p>
<p>The steps for building this persistence format is as follows:</p>
<ol>
  <li><p>Prepare a new empty XML document to hold the persisted instance data.</p></li>
  <li><p>If the selected content of the instance data corresponds to a singly-rooted data
  structure, serialize, into the XML document the entire content of the selected instance
  data, beginning at the root node.</p></li>
  <li><p>If the selected content of the instance data corresponds to a multiply-rooted data
  structure (such as a general parsed entity), an unqualified root element of &lt;<code>Envelope</code>&gt;,
  with an unqualified element &lt;<code>Body</code>&gt; is inserted into the XML document, and the
  selected instance data serialized into the content of the &lt;<code>Body</code>&gt; element.</p></li>
</ol>

<div class="div4">
<h5><a name="rpm-send-xml-binary"></a>1.6.3.1 Binary Content</h5>

<p>Instance data items of the types xsd:base64Binary and xsd:hexBinary are specifically
allowed, and are included in the serialized data according to the rules defined in
<a href="#">[ref-xschema-2]</a></p>
<div class="issue"><p class="prefix"><a name="issue-instance-metadata"></a><b>Issue (issue-instance-metadata):</b></p><p>Where a value 
  within the instance data represents binary content, can we store meta-information
  with an <code>xform:mediaType</code> attribute reflecting the appropriate content
  type (e.g., "image/jpg")?</p></div>
</div>
</div></div><div class="div2">
<h3><a name="rpm-conform"></a>1.7 Conformance</h3>
<p>XForms are being designed for use on hardware platforms of all sizes, from tiny handheld devices to high-powered servers. Clearly, a one-size-fits-all approach has its drawbacks. For this reason, the XForms Working Group has begun specifying two conformance levels for XForms Processors, documents, and authoring tools.</p>
<div class="div3">
<h4><a name="rpm-conform-basic"></a>1.7.1 XForms Basic</h4><p>This conformance level will be suitable for devices with limited computing power, such as mobile phones, handheld computers, and appliances. This conformance level will depend on a subset of XML Schema, and will not include any resource-intensive features. Implementations of XForms Basic should return "<code>basic</code>" for the <code>conformance-level</code> property.</p></div><div class="div3">
<h4><a name="rpm-conform-full"></a>1.7.2 XForms Full</h4><p>


This conformance level will be suitable for more powerful forms processing, such as might be found on a standard desktop browser or a server. Implementations of XForms Full should return "<code>full</code>" for the <code>conformance-level</code> property.</p><p>Additional details will be provided in future revisions of this chapter.</p></div></div>

</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="binding"></a>1 Binding</h2> <div class="div2">
<h3><a name="binding-intro"></a>1.1 Introduction</h3> 
<p><a title="" href="#">Binding</a> is the glue that connects the 
  separate pieces of XForms--the <a title="" href="#">XForms Model</a>,
  <a title="" href="#">instance data</a>, and <a title="" href="#">form control</a>s.
  The binding is independent of the user interface language used.</p>
<p>Binding is specified through the use of 
  <a title="" href="#">binding expression</a>s. The syntax 
  and details of binding expressions are defined in the chapter <a href="#"><b>???</b></a>. 
  This chapter describes the wider topic of how binding expressions are used within XForms.</p>
<p>A future revision of this chapter will address binding 
  across XForms Models, for instance declaring an "address" in one XForms Model
  and referencing it from another.</p>

</div>

<div class="div2">
<h3><a name="binding-attributes"></a>1.2 Binding Attributes</h3>
<p>XForms defines an attribute <code>ref</code> that can be placed on any form 
  control. Note that when placed on form 
  controls outside of XForms, it must be appropriately namespace-qualified. The value 
  of the attribute is a binding expression, 
  based on <a href="#"><b>???</b></a>, that links the form control
  to a particular location in the instance data (and therefore a particular model 
  item). For example:</p>

  <div class="example">
<h5>Example: XForms User Interface Markup with Binding Attributes</h5>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="binding-expression"&gt;
   &lt;xform:caption&gt;Your first name&lt;/xform:caption&gt;
&lt;/xform:textbox&gt;</pre></td></tr></table>

<p>The <code>ref</code> attribute links the form 
        control to the instance data and XForms Model declared elsewhere 
        in the <a title="" href="#">containing document</a>.</p></div>
        
<p>This can also be used on non-XForms form controls, for instance XHTML:</p>

<div class="example">
<h5>Example: XHTML with Binding Attributes</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;html:input type="text" name="..." xform:ref="binding-expression"/&gt;</pre></td></tr></table>
<p> Here the <code>ref</code> attribute links an XHTML form 
    control to the instance data and XForms Model contained elsewhere 
    in the containing document. Note that the <code>html:</code> prefix is 
    used here to represent the XHTML namespace.</p></div>

<p>Details on the operation of binding expressions are given throughout the rest of this chapter.</p>
</div>

<div class="div2">
<h3><a name="binding-direct"></a>1.3 Direct Binding</h3>
<p>When a containing document has only a single XForms 
  Model and only a single set of instance data, binding is simpler because there 
  is no possibility of ambiguity as to which XForms 
  Model and instance data will participate. The following syntax can be used for the
  binding expression:</p>
<ul>
  <li><p>A binding expression that evaluates to a node-set in the instance 
    data. If the node-set contains more than one node, only the first node is used. If the
    node-set contains zero nodes, the binding expression is invalid.</p></li>
</ul>
<p>For example:</p>

<div class="example">
<h5>Example: Binding Expression</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a path through the instance data to the desired location.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;orderForm&gt;
  &lt;shipTo&gt;
    &lt;firstName&gt;value&lt;/firstName&gt;
  &lt;/shipTo&gt;
&lt;/orderForm&gt;</pre></td></tr></table>
<p>Here is the matching instance data for the above example.</p></div>

<p>A special case applies when binding to 
  an element in the instance data that 
  contains an attribute of type <code>xsd:ID</code>. In this case, an XPath function 
  <code>id()</code>, can be used:</p>

<div class="example">
<h5>Example: Binding Expression with XPath id() Syntax</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>

<p>Here the <code>ref</code> attribute specifies a link to an instance 
          data element with an id of <code>myfirstname</code>.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;a&gt;
  &lt;b id="myfirstname"&gt;value&lt;/b&gt;
&lt;/a&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>For this syntax to be valid, the following conditions must be true:</p>
<ul>
  <li><p>The instance data must be included 
    in the same document as the XForms User Interface</p></li>
  <li><p>Every referenced element in the instance 
    data must be marked with a valid ID (i.e. the ID is unique throughout 
    the whole document)</p></li>
  
</ul>
<p>Note also that:</p>
<ul>
  <li><p>this method is limited, because it requires exactly one instance, decorated 
    with ID attributes.</p></li>
  <li><p>It is still legal to have elements without ID attributes in the instance data.</p></li>
  <li><p>Only elements can be addressed</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-indirect"></a>1.4 Indirect Binding</h3>
<p>In situations where a form is designed by collaboration (such as between a 
  graphic designer and a database/XML specialist) it is desirable to locate all 
  binding expressions in a single area in the containing document. XForms allows 
  the binding expression to appear 
  in a separate element <code>bind</code>, a child of the <code>xform</code> element.</p>
<p>The attributes of <code>bind</code> are <code>id</code> of type <code>xsd:ID</code> 
  and <code>ref</code> which takes a binding expression. When a binding expression
  is defined this way, the form control 
  can reference the <code>id</code> of the <code>bind</code> element, 
  as seen here:</p>
  
<div class="example">
<h5>Example: Binding Expression Using Indirection</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a link to a binding 
          expression defined elsewhere.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:bind id="myfirstname" ref="orderForm/shipTo/firstName"/&gt;
&lt;xform:instance&gt;
  &lt;orderForm&gt;
    &lt;shipTo&gt;
      &lt;firstName&gt;value&lt;/firstName&gt;
    &lt;/shipTo&gt;
  &lt;/orderForm&gt;
&lt;/xform:instance&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>This accomplishes the following:</p>
<ul>
  <li><p>It is no longer necessary to add IDs to the instance.</p></li>
  <li><p>The binding mechanism is <em>independent</em>
    of the schema and user interface mechanisms.</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-multiple"></a>1.5 Multiple Forms per Page</h3>
<p>One design goal of XForms is to support multiple forms per page. This is accomplished 
  by having multiple <code>xform</code> elements within a containing document. 
  Each <code>xform</code> element might have a separate XForms Model or 
  instance data defined. This makes binding slightly more complex, because 
  the correct <code>xform</code> element needs to be referenced.</p>
<p>By default, binding expressions are based on the instance data
  associated with the first <code>xform</code> element in document 
  order. To refer to the contents of subsequent <code>xform</code> elements, 
  these must be decorated with <code>id</code> attributes of type <code>xsd:ID</code>. 
  Attached to the form control element, an additional attribute <code>xform</code> 
  serves to set the context node for the attached binding expression to the
  instance data or XForms Model associated with 
  the <code>xform</code> element with the matching <code>id</code>.</p>
<p>For example:</p>
<div class="example">
<h5>Example: Binding Expression Specifying Non-default <code>xform</code> Element</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox xform="b" ref="/orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>

<p>Here the <code>xform</code> and <code>ref</code> attributes specify 
          a binding to the instance data and XForms Model.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform id="b"&gt;
  &lt;xform:model&gt;
    ...
  &lt;/xform:model&gt;
  &lt;xform:instance&gt;
    &lt;orderForm xmlns="..."&gt;
      &lt;shipTo&gt;
        &lt;firstName&gt;value&lt;/firstName&gt;
      &lt;/shipTo&gt;
    &lt;/orderForm&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table></div>
<p>Scoped resolution of binding expressions, as defined in the chapter
  <a href="#"><b>???</b></a> can in some cases be used to avoid repetitive 
  uses of the <code>xform</code> attribute.</p>


  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="binding"></a>1 Binding</h2> <div class="div2">
<h3><a name="binding-intro"></a>1.1 Introduction</h3> 
<p><a title="" href="#">Binding</a> is the glue that connects the 
  separate pieces of XForms--the <a title="" href="#">XForms Model</a>,
  <a title="" href="#">instance data</a>, and <a title="" href="#">form control</a>s.
  The binding is independent of the user interface language used.</p>
<p>Binding is specified through the use of 
  <a title="" href="#">binding expression</a>s. The syntax 
  and details of binding expressions are defined in the chapter <a href="#"><b>???</b></a>. 
  This chapter describes the wider topic of how binding expressions are used within XForms.</p>
<p>A future revision of this chapter will address binding 
  across XForms Models, for instance declaring an "address" in one XForms Model
  and referencing it from another.</p>

</div>

<div class="div2">
<h3><a name="binding-attributes"></a>1.2 Binding Attributes</h3>
<p>XForms defines an attribute <code>ref</code> that can be placed on any form 
  control. Note that when placed on form 
  controls outside of XForms, it must be appropriately namespace-qualified. The value 
  of the attribute is a binding expression, 
  based on <a href="#"><b>???</b></a>, that links the form control
  to a particular location in the instance data (and therefore a particular model 
  item). For example:</p>

  <div class="example">
<h5>Example: XForms User Interface Markup with Binding Attributes</h5>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="binding-expression"&gt;
   &lt;xform:caption&gt;Your first name&lt;/xform:caption&gt;
&lt;/xform:textbox&gt;</pre></td></tr></table>

<p>The <code>ref</code> attribute links the form 
        control to the instance data and XForms Model declared elsewhere 
        in the <a title="" href="#">containing document</a>.</p></div>
        
<p>This can also be used on non-XForms form controls, for instance XHTML:</p>

<div class="example">
<h5>Example: XHTML with Binding Attributes</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;html:input type="text" name="..." xform:ref="binding-expression"/&gt;</pre></td></tr></table>
<p> Here the <code>ref</code> attribute links an XHTML form 
    control to the instance data and XForms Model contained elsewhere 
    in the containing document. Note that the <code>html:</code> prefix is 
    used here to represent the XHTML namespace.</p></div>

<p>Details on the operation of binding expressions are given throughout the rest of this chapter.</p>
</div>

<div class="div2">
<h3><a name="binding-direct"></a>1.3 Direct Binding</h3>
<p>When a containing document has only a single XForms 
  Model and only a single set of instance data, binding is simpler because there 
  is no possibility of ambiguity as to which XForms 
  Model and instance data will participate. The following syntax can be used for the
  binding expression:</p>
<ul>
  <li><p>A binding expression that evaluates to a node-set in the instance 
    data. If the node-set contains more than one node, only the first node is used. If the
    node-set contains zero nodes, the binding expression is invalid.</p></li>
</ul>
<p>For example:</p>

<div class="example">
<h5>Example: Binding Expression</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a path through the instance data to the desired location.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;orderForm&gt;
  &lt;shipTo&gt;
    &lt;firstName&gt;value&lt;/firstName&gt;
  &lt;/shipTo&gt;
&lt;/orderForm&gt;</pre></td></tr></table>
<p>Here is the matching instance data for the above example.</p></div>

<p>A special case applies when binding to 
  an element in the instance data that 
  contains an attribute of type <code>xsd:ID</code>. In this case, an XPath function 
  <code>id()</code>, can be used:</p>

<div class="example">
<h5>Example: Binding Expression with XPath id() Syntax</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>

<p>Here the <code>ref</code> attribute specifies a link to an instance 
          data element with an id of <code>myfirstname</code>.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;a&gt;
  &lt;b id="myfirstname"&gt;value&lt;/b&gt;
&lt;/a&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>For this syntax to be valid, the following conditions must be true:</p>
<ul>
  <li><p>The instance data must be included 
    in the same document as the XForms User Interface</p></li>
  <li><p>Every referenced element in the instance 
    data must be marked with a valid ID (i.e. the ID is unique throughout 
    the whole document)</p></li>
  
</ul>
<p>Note also that:</p>
<ul>
  <li><p>this method is limited, because it requires exactly one instance, decorated 
    with ID attributes.</p></li>
  <li><p>It is still legal to have elements without ID attributes in the instance data.</p></li>
  <li><p>Only elements can be addressed</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-indirect"></a>1.4 Indirect Binding</h3>
<p>In situations where a form is designed by collaboration (such as between a 
  graphic designer and a database/XML specialist) it is desirable to locate all 
  binding expressions in a single area in the containing document. XForms allows 
  the binding expression to appear 
  in a separate element <code>bind</code>, a child of the <code>xform</code> element.</p>
<p>The attributes of <code>bind</code> are <code>id</code> of type <code>xsd:ID</code> 
  and <code>ref</code> which takes a binding expression. When a binding expression
  is defined this way, the form control 
  can reference the <code>id</code> of the <code>bind</code> element, 
  as seen here:</p>
  
<div class="example">
<h5>Example: Binding Expression Using Indirection</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a link to a binding 
          expression defined elsewhere.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:bind id="myfirstname" ref="orderForm/shipTo/firstName"/&gt;
&lt;xform:instance&gt;
  &lt;orderForm&gt;
    &lt;shipTo&gt;
      &lt;firstName&gt;value&lt;/firstName&gt;
    &lt;/shipTo&gt;
  &lt;/orderForm&gt;
&lt;/xform:instance&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>This accomplishes the following:</p>
<ul>
  <li><p>It is no longer necessary to add IDs to the instance.</p></li>
  <li><p>The binding mechanism is <em>independent</em>
    of the schema and user interface mechanisms.</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-multiple"></a>1.5 Multiple Forms per Page</h3>
<p>One design goal of XForms is to support multiple forms per page. This is accomplished 
  by having multiple <code>xform</code> elements within a containing document. 
  Each <code>xform</code> element might have a separate XForms Model or 
  instance data defined. This makes binding slightly more complex, because 
  the correct <code>xform</code> element needs to be referenced.</p>
<p>By default, binding expressions are based on the instance data
  associated with the first <code>xform</code> element in document 
  order. To refer to the contents of subsequent <code>xform</code> elements, 
  these must be decorated with <code>id</code> attributes of type <code>xsd:ID</code>. 
  Attached to the form control element, an additional attribute <code>xform</code> 
  serves to set the context node for the attached binding expression to the
  instance data or XForms Model associated with 
  the <code>xform</code> element with the matching <code>id</code>.</p>
<p>For example:</p>
<div class="example">
<h5>Example: Binding Expression Specifying Non-default <code>xform</code> Element</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox xform="b" ref="/orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>

<p>Here the <code>xform</code> and <code>ref</code> attributes specify 
          a binding to the instance data and XForms Model.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform id="b"&gt;
  &lt;xform:model&gt;
    ...
  &lt;/xform:model&gt;
  &lt;xform:instance&gt;
    &lt;orderForm xmlns="..."&gt;
      &lt;shipTo&gt;
        &lt;firstName&gt;value&lt;/firstName&gt;
      &lt;/shipTo&gt;
    &lt;/orderForm&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table></div>
<p>Scoped resolution of binding expressions, as defined in the chapter
  <a href="#"><b>???</b></a> can in some cases be used to avoid repetitive 
  uses of the <code>xform</code> attribute.</p>


  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="datatypes"></a>1 Datatypes</h2>

<div class="div2">
<h3><a name="datatypes-schema"></a>1.1 XML Schema Datatypes</h3><p>XForms includes all XML
  Schema <a title="" href="#">datatype</a>s, including the concepts of
  <a title="" href="#">value space</a> and
  <a title="" href="#">lexical space</a>, and all constraining
  <a title="" href="#">facet</a>s, as specified in <a href="#">[ref-xschema-2]</a>.
  For reference, these are</p>
  <p>Built-in primitive types:</p>
  <blockquote><p>
  duration
  <br>dateTime
  <br>time
  <br>date
  <br>gYearMonth
  <br>gYear
  <br>gMonthDay
  <br>gDay
  <br>gMonth
  <br>string
  <br>boolean
  <br>base64Binary
  <br>hexBinary
  <br>float
  <br>decimal
  <br>double
  <br>anyURI
  <br>QName
  <br>NOTATION
  </p></blockquote><p>Built-in derived types:</p>
  <blockquote><p>
  normalizedString
  <br>token
  <br>language
  <br>Name
  <br>NCName
  <br>ID
  <br>IDREF
  <br>IDREFS
  <br>ENTITY
  <br>ENTITIES
  <br>integer
  <br>nonPositiveInteger
  <br>negativeInteger
  <br>long
  <br>int
  <br>short
  <br>byte
  <br>nonNegativeInteger
  <br>unsignedLong
  <br>unsignedInt
  <br>unsignedShort
  <br>unsignedByte
  <br>positiveInteger
  </p></blockquote><p>The Schema for XForms derives new types for all the above datatypes, placing no
  additional restrictions on the allowed value space, but including them in the XForms namespace.</p>
  <div class="issue"><p class="prefix"><a name="datatype-identifiers"></a><b>Issue (datatype-identifiers):</b></p><p>One requirement is for XForms to include unique identifiers
  for each datatype listed here. We believe the facilities in XML Schema are sufficient for this,
  but welcome feedback  on this issue.</p></div>
  <div class="issue"><p class="prefix"><a name="ieee-datatypes"></a><b>Issue (ieee-datatypes):</b></p><p>There is concern that IEEE floating point, as used by the
  datatypes <code>xsd:float</code> and <code>xsd:double</code> may be difficult or impossible
  to implement on small devices. XPath (see <a href="#"><b>???</b></a>) also uses IEEE representation
  for numbers, and must be taken into consideration as to resolution of this conflict.</p></div>
  
  <div class="issue"><p class="prefix"><a name="xml-datatypes"></a><b>Issue (xml-datatypes):</b></p><p>Several datatypes, namely <code>xsd:QName</code>,
  <code>xsd:NOTATION</code>, <code>xsd:Name</code>, <code>xsd:NCName</code>, <code>xsd:ID</code>,
  <code>xsd:IDREF</code>, <code>xsd:IDREFS</code>, <code>xsd:ENTITY</code>, and
  <code>xsd:ENTITES</code> are highly specific to XML, and perhaps not as useful in XForms.
  Particularly on small devices, the incremental cost of supporting these datatypes might be
  excessive.</p></div>
  
  <div class="issue"><p class="prefix"><a name="pattern-facet"></a><b>Issue (pattern-facet):</b></p><p>Fully implementing the <code>pattern</code> facet might be too
  expensive on small devices.</p></div>
  
  <div class="issue"><p class="prefix"><a name="mask-facet"></a><b>Issue (mask-facet):</b></p><p>Previous Working Drafts of XForms specified a <code>mask</code>
  facet, with less implementation cost than the Schema <code>pattern</code> facet. What are
  our options for adding an entirely new facet not defined in XML Schema?</p>
  <p>The mask facet was defined as follows:</p>
  <div class="example">
<h5>Example: Mask Facet</h5><p>XML Schema has defined a Regular Expression language which
  is "similar to the regular expression language used in the Perl Programming language", 
  and can be applied to most built-in datatypes. Regular expression syntax, however, 
  is considered complex by some. Therefore, XForms defines the concept of a <code>mask</code> 
  facet. All <code>mask</code> facets 
  are convertible into <code>pattern</code>s.</p>
<p>XML schema 
  allows multiple <code>pattern</code> facets to be specified. Similarly, multiple 
  <code>mask</code> or <code>pattern</code> facets, but not a mixture, are permitted.</p>
<p>XForms <code>mask</code> uses the syntax and processing from <a href="#">[ref-wml1.3]</a> 
  <code>format</code>. Some examples:</p>
<ul>
  <li><p><code>A</code> matches "A", "X", "$", "%", 
    or "."</p></li>
  <li><p><code>a</code> matches "a", "x", "$", "%", 
    or "."</p></li>
  <li><p><code>X</code> matches "A", "X", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>x</code> matches "a", "x", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>N</code> matches "0", "4", or "7"</p></li>
  <li><p><code>3N</code> matches "0", "63", or "999" 
    but not "1234" (Note: only allowed at end of mask)</p></li>
  <li><p><code>*X</code> matches "$", "3.0", or "ABCDEFG" 
    (Note: only allowed at end of mask)</p></li>
  <li><p><code>\</code> causes the next literal character to be inserted into the 
    mask</p></li>
  <li><p><code>NNN\-NNNN</code> matches "123-4567" but not "1234567"</p></li>
</ul>
<p>As with WML <code>format</code> processing, an XForms Processor must ignore 
  invalid <code>mask</code>s.</p></div></div>
  
  <div class="issue"><p class="prefix"><a name="now-facet"></a><b>Issue (now-facet):</b></p><p>Previous Working Drafts of XForms specified "dynamic facets"
  that could be reevaluated at arbitrary times. One benefit of that approach was that a
  <code>now()</code> expression could be used as a constraining facet on date/time datatypes.
  What are our options for including similar functionality within the framework of XML Schema
  datatypes?</p></div></div>
  
  <div class="div2">
<h3><a name="datatypes-xforms"></a>1.2 XForms Datatypes</h3><p>The Schema for XForms derives the
  following types for use within forms:</p>
  
  <div class="div3">
<h4><a name="dt-currency"></a>1.2.1 currency</h4>
<p>The XForms datatype <code>currency</code> is derived from the XForms datatype 
  <code>xform:string</code>. A <code>pattern</code> facet with a value of <code>[A-Z]{3}</code>
  is specified.</p>
<p>Valid currency values are specified in <a href="#">[ref-iso-4217]</a>.</p>
<div class="note"><p class="prefix"><b>Note:</b></p><p>Since new currencies may appear at any time, the currency values as defined  in
<a href="#">[ref-iso-4217]</a> are not strictly enforced.</p></div><ul>  

<li><p><b>Examples:</b>A value of 'Japanese Yen' would be represented as: </p>
<blockquote><p>JPY</p></blockquote></li>
<li> <p>A value 'US Dollars' would be represented as:</p>
<blockquote><p>USD</p></blockquote></li>

</ul>
</div><div class="div3">
<h4><a name="dt-money"></a>1.2.2 monetary</h4>

<p>Forms often deal with monetary values. In many cases the currency type in use is well-known,
and not even needed in the instance data. When an explicit currency identifier is needed,
authors can freely use separate <code>xform:decimal</code> and <code>xform:currency</code>
values to accomplish this. For a unified approach, a monetary datatype would combine, in a single lexical space,
both a currency code and a decimal value.</p>
<div class="issue"><p class="prefix"><a name="monetary-datatype"></a><b>Issue (monetary-datatype):</b></p><p>Is such a datatype needed in XForms? If yes, how can it
be defined in terms of XML Schema?</p></div><ul>  

<li><p><b>Examples:</b> A value of 42 Indonesian Rupiahs would be represented as:</p>
<blockquote><p>42IDR</p></blockquote>
</li><li><p> A value of 4.37 Euro would be represented as:</p>
<blockquote><p>4.37EUR</p></blockquote></li>

</ul>
</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="model"></a>1 The XForms Model</h2> 

<div class="div2">
<h3><a name="model-intro"></a>1.1 Introduction</h3>
<p>Chapter <a href="#"><b>???</b></a> described how XForms uses the XML Schema datatyping system, which can constrain the <a title="" href="#">value space</a> of datatypes that can be used in data collection. This chapter introduces a different set of properties, called <a title="" href="#">model item properties</a>, which define XForms-specific behaviors and metadata useful for data collection.</p>
</div>

<div class="div2">
<h3><a name="model-prop"></a>1.2 Model Item Properties</h3>

<p>Model item properties fall into two basic categories:</p><ul><li><p><a title="" href="#">Computed expressions</a> are XPath expressions that provide a value to the XForms Processor. The value is recomputed at certain times, according to the XForms Processing Model (see <a href="#"><b>???</b></a>).</p></li><li><p>All other properties are fixed, static values that the XForms Processor evaluates only once.</p></li></ul>
  
<p>The following properties are available for all <a title="" href="#">model items</a>,
  and their syntax is explained throughout this chapter. For each property the following information is provided:</p><blockquote><p>Description<br>Computed Expression (yes or no)<br>Legal Values<br>Default Value<br>Additional descriptive text</p></blockquote><div class="div3">
<h4><a name="model-prop-name"></a>1.2.1 name</h4>
<p>Description: provides a specific name for the model item.</p>
<p>Computed Expression: No</p><p>Legal Values: only values of type <code>xsd:NCName</code></p>
<p>Default Value: none.</p>
<p>Authors can associate a human-readable name with a model item through 
  the use of the <code>name</code> property. Each <code>name</code> should be 
  unique within the scope of the XForms Model where it is declared.</p>

</div>

<div class="div3">
<h4><a name="model-prop-type"></a>1.2.2 type</h4><p>Description: assigns a Schema datatype.</p><p>Computed Expression: No</p><p>Legal Values: any <code>xsd:QName</code> representing a Schema datatype.</p><p>Default Value: <code>xsd:anyType</code></p><p>The concept of typed data is important to forms. The assignment of a particular datatype to a model item affects validation of the data it can accept, as well as affecting which form controls to which it can bind.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>The XForms Model uses properties "name" and "type"
as in XML Schema;
the concrete syntax used to define XForm Models, and
consequently the use of these properties  will be
made concrete in a forthcoming revision of this Working Draft.
</p></div></div><div class="div3">
<h4><a name="model-prop-readOnly"></a>1.2.3 readOnly</h4>
<p>Description: describes whether the value is restricted from changing. 
  The ability of form controls to have focus and appear in the navigation order is unaffected 
  by this property.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code>.</p>
<p>Default Value: <code>false</code>.</p>
<p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should not allow any changes to the bound instance data item.</p><p>In addition to restricting value changes, the <code>readOnly</code> property 
  provides a hint to the XForms User Interface. Form controls 
  bound to a model item with the <code>readOnly</code> 
  property should indicate that entering or changing the value is not allowed. 
  The hint provided has no effect on visibility, focus, or navigation order.</p>
</div>

<div class="div3">
<h4><a name="model-prop-required"></a>1.2.4 required</h4>
<p>Description: describes whether a value is required before the instance 
  data is submitted.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>false</code>.</p>
<p>Often forms require certain values to be entered. This may be 
  a static requirement, or may only be the case if some condition is satisfied. When evaluating to <code>true</code>, this property indicates that a non-empty instance data item is required before a submission of instance data can occur. Non-empty is defined as:</p><ol><li><p>If the bound instance data item is the text content of an element, the element  must not have the <code>xsi:nil</code> attribute set to <code>true</code>.</p></li><li><p>The bound instance data item must be convertible to an XPath <code>string</code> with a length greater than zero.</p></li></ol>
<p>Except as noted below, the <code>required</code> property does not provide 
  a hint to the XForms User Interface regarding visibility, focus, or navigation order.
  XForms authors are strongly encouraged to make sure that form controls that
  accept <code>required</code> data are visible. An XForms Processor may provide a
  unique indication that a form control is required, and may provide immediate feedback, including limiting navigation, for required form controls.</p>

<div class="issue"><p class="prefix"><a name="issue-default-default"></a><b>Issue (issue-default-default):</b></p><p>It might be useful to set the default for the
required attribute for an entire XForms Model. What should the default default be?
How could we assign a default for a single XForms Model? This could apply to other
attributes as well, e.g. readOnly, etc...</p></div>
<p>The chapter <a href="#"><b>???</b></a> contains details on how the XForms Processor enforces required values.</p></div>

<div class="div3">
<h4><a name="model-prop-relevant"></a>1.2.5 relevant</h4>
<p>Description: indicates whether the model item is currently relevant to the
  rest of the XForms Model. XForms Processors would typically not render an
  associated form control, including children, when the value is <code>false</code>.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>Many forms have fields dependent on other conditions. For example, a form might 
  ask whether the respondent owns a car. It is only appropriate to ask for further information 
  about their car if they have indicated that they own one.</p><p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should render a form control, and conversely, when evaluating to <code>false</code>, indicates that the form control should not be rendered.</p>
<p>The <code>relevant</code> property provides hints to the XForms User Interface regarding 
  visibility, focus, and navigation order. In general, when <code>true</code>, associated 
  form controls should be made visible. When <code>false</code>, associated form
  controls should be made unavailable, removed from the navigation order, 
  and not allowed focus.</p>
<p>The following table shows the user interface interaction between <code>required</code> and 
  <code>relevant</code>.</p>
<table border="1" cellspacing="1" cellpadding="4" summary="shows combinations of depends and required">
<tbody><tr><td> </td><td><code>required="true"</code></td><td><code>required="false"</code></td></tr>
<tr><td><code>relevant="true"</code></td>
<td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is required.</td>
  <td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is optional.</td></tr>
  <tr><td><code>relevant="false"</code></td>
  <td>The form control (and any children) should be hidden or unavailable to 
  the user. Entering a value or obtaining focus should not be allowed. The 
  XForms User Interface may indicate that should the form control become relevant, 
  a value would be required.</td><td>The form control (and any children) should be
  hidden or unavailable to the user. Entering a value or obtaining focus should not
  be allowed.</td></tr></tbody></table>
 </div>

<div class="div3">
<h4><a name="model-prop-calculate"></a>1.2.6 calculate</h4>
<p>Description: indicates that the instance data item associated with the model item is to 
  be dynamically calculated.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible  to an XPath datatype compatible 
  with the associated XML Schema datatype.</p>
<p>Default Value: none.</p>
<p>An XForms Model may include model items that are computed from the other values 
  elsewhere. For example, the sum over line items for quantity times unit price, 
  or the amount of tax to be paid on an order. The computed value can be represented 
  as a computed expression using the values of other model items. The XForms Processing
  Model indicates how and when the calculation is recomputed.</p>
</div>

<div class="div3">
<h4><a name="model-prop-priority"></a>1.2.7 priority</h4>
<p>Description: indicates the relative priority for calculations of the 
  model item.</p><p>Computed Expression: No</p>
<p>Legal Values: any expression that is convertible to an integer in the range 
  0-32767.</p>
<p>Default Value: 0.</p>
<p>For model items that are calculated, this optional property specifies a calculation 
  order. The XForms Processing Model uses this property to determine the calculation order for multiple calculations.</p>
</div>

<div class="div3">
<h4><a name="model-prop-validate"></a>1.2.8 validate</h4>
<p>Description: specifies the predicate that needs to be satisfied for the associated instance data item to be considered valid.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>An XForms Model may include model items that need to be validated. When evaluating to <code>true</code>, indicates that the model item 
  is considered valid. The chapter <a href="#"><b>???</b></a>  describes 
  details such as immediate validation vs. onsubmit validation.</p>
<p>Computed expressions used here are not restricted to examining the instance 
  data item they are invoked on. XPath, plus the extensions in this chapter, provide 
  the means to traverse the instance data, as well as call-outs to external script, enabling potentially complex validations.</p>
<p>The XForms User Interface may indicate whether a form control is currently valid or 
  invalid.</p>
<div class="issue"><p class="prefix"><a name="issue-cascade"></a><b>Issue (issue-cascade):</b></p><p>Will the <code>validate</code> property be evaluated on
  all the parent or child model items whenever a value changes? We need to make sure
  that inter-model item constraints will get evaluated.</p></div>
</div>
</div>

<div class="div2">
<h3><a name="model-using"></a>1.3 Using Datatypes in the XForms Model</h3>
<p>The following section is being rewritten with the guidance of the XML Schema Working Group. In its current state, it is an informative listing of the functionality that we are planning in XForms 1.0, with illustrative examples of similar functionality in XML Schema. A subsequent Working Draft will contain normative details on how the functionality is described in terms of XForms.</p>
  
<div class="div3">
<h4><a name="model-using-atomic"></a>1.3.1 Atomic Datatype</h4>
<p>At the simplest level, it is necessary to associate a datatype with a model item. This has the effect of restricting the allowable values of the associated instance data item to valid representations of the lexical space of the datatype, including enforcing of any constraining facets.</p>
<p>Example Schema Syntax: declaring a datatype based on an <code>xsd:string</code> plus additional constraining facet would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:minLength value="1"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>


</div>

<div class="div3">
<h4><a name="model-using-enum"></a>1.3.2 Closed Enumeration</h4>
<p>Often it is necessary to restrict the allowable values of the associated instance data item to a closed list of alternatives. Also under consideration is a method to obtain a list at runtime, for example, from an XPath node-set.</p>



<p>Example Schema Syntax: declaring a datatype allowing enumerated values of an <code>xsd:string</code> would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:enumeration value="Mastercard"/&gt;
    &lt;xsd:enumeration value="Diner's Club"/&gt;
    &lt;xsd:enumeration value="American Express"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>

</div><div class="div3">
<h4><a name="model-using-openenum"></a>1.3.3 Open Enumeration</h4><p>A special case of enumerated datatypes is the common form design pattern of a list, with an 'other, please specify' choice. This is referred to as an open enumeration.</p><p>Example Schema Syntax: declaring an open enumeration is possible through a combination of union and enumeration features, as follows:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="xsd:string"&gt;
    &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:enumeration value="Mastercard"/&gt;
        &lt;xsd:enumeration value="Diner's Club"/&gt;
        &lt;xsd:enumeration value="American Express"/&gt;
      &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
  &lt;/xsd:union&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>


  
<div class="div3">
<h4><a name="model-using-union"></a>1.3.4 Union</h4>
<p> It may be desirable for data collection purpose to allow an instance data item to be a valid lexical value of one among several datatypes. Unions are defined in XML Schema.</p>
<p>Example Schema Syntax:  declaring a datatype allowing either a <code>creditCardType</code> or <code>bonusProgramType</code> value would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="creditCardType bonusProgramType"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>
</div><div class="div3">
<h4><a name="model-using-array"></a>1.3.5 Multiple Selection</h4><p>Some form controls, such as <code>selectMany</code>, have the notion of supporting more than one simpleType value at any given time. This corresponds with Schema list datatypes.</p><p>Example Schema Syntax: declaring a list-derived datatype would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType name="listOfMyIntType"&gt;
  &lt;xsd:list itemType="xsd:int"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>

<div class="div3">
<h4><a name="model-using-repeat"></a>1.3.6 Repeating Line Item</h4>
<p>It is common for certain types of forms, such as order forms, to contain repeating structures, typically line items. If each individual structure were represented as a Schema complexType, a line item group would be analogous to the <code>sequence</code> construct.</p>
<p>Example Schema Syntax: a datatype allowing a sequence of child elements would be declared as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:complexType&gt;
  &lt;xsd:sequence&gt;
    &lt;xsd:element name="child" type="xform:string" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</pre></td></tr></table>
<p>Chapter <a href="#"><b>???</b></a> contains details on representing this with XForms User Interface form controls, as well as details for how this relates to the instance data in chapter <a href="#"><b>???</b></a>.</p></div>

<div class="div3">
<h4><a name="model-using-switch"></a>1.3.7 Alternate Representation</h4>
<p>In some forms, alternate representations might be necessary for underlying instance data structures.</p>
<p>Example Schema Syntax: a Schema <code>choice</code> element is roughly analogous to this, although XForms uses a more dynamic version. Examples of this are found in <a href="#"><b>???</b></a></p>



</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="model"></a>1 The XForms Model</h2> 

<div class="div2">
<h3><a name="model-intro"></a>1.1 Introduction</h3>
<p>Chapter <a href="#"><b>???</b></a> described how XForms uses the XML Schema datatyping system, which can constrain the <a title="" href="#">value space</a> of datatypes that can be used in data collection. This chapter introduces a different set of properties, called <a title="" href="#">model item properties</a>, which define XForms-specific behaviors and metadata useful for data collection.</p>
</div>

<div class="div2">
<h3><a name="model-prop"></a>1.2 Model Item Properties</h3>

<p>Model item properties fall into two basic categories:</p><ul><li><p><a title="" href="#">Computed expressions</a> are XPath expressions that provide a value to the XForms Processor. The value is recomputed at certain times, according to the XForms Processing Model (see <a href="#"><b>???</b></a>).</p></li><li><p>All other properties are fixed, static values that the XForms Processor evaluates only once.</p></li></ul>
  
<p>The following properties are available for all <a title="" href="#">model items</a>,
  and their syntax is explained throughout this chapter. For each property the following information is provided:</p><blockquote><p>Description<br>Computed Expression (yes or no)<br>Legal Values<br>Default Value<br>Additional descriptive text</p></blockquote><div class="div3">
<h4><a name="model-prop-name"></a>1.2.1 name</h4>
<p>Description: provides a specific name for the model item.</p>
<p>Computed Expression: No</p><p>Legal Values: only values of type <code>xsd:NCName</code></p>
<p>Default Value: none.</p>
<p>Authors can associate a human-readable name with a model item through 
  the use of the <code>name</code> property. Each <code>name</code> should be 
  unique within the scope of the XForms Model where it is declared.</p>

</div>

<div class="div3">
<h4><a name="model-prop-type"></a>1.2.2 type</h4><p>Description: assigns a Schema datatype.</p><p>Computed Expression: No</p><p>Legal Values: any <code>xsd:QName</code> representing a Schema datatype.</p><p>Default Value: <code>xsd:anyType</code></p><p>The concept of typed data is important to forms. The assignment of a particular datatype to a model item affects validation of the data it can accept, as well as affecting which form controls to which it can bind.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>The XForms Model uses properties "name" and "type"
as in XML Schema;
the concrete syntax used to define XForm Models, and
consequently the use of these properties  will be
made concrete in a forthcoming revision of this Working Draft.
</p></div></div><div class="div3">
<h4><a name="model-prop-readOnly"></a>1.2.3 readOnly</h4>
<p>Description: describes whether the value is restricted from changing. 
  The ability of form controls to have focus and appear in the navigation order is unaffected 
  by this property.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code>.</p>
<p>Default Value: <code>false</code>.</p>
<p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should not allow any changes to the bound instance data item.</p><p>In addition to restricting value changes, the <code>readOnly</code> property 
  provides a hint to the XForms User Interface. Form controls 
  bound to a model item with the <code>readOnly</code> 
  property should indicate that entering or changing the value is not allowed. 
  The hint provided has no effect on visibility, focus, or navigation order.</p>
</div>

<div class="div3">
<h4><a name="model-prop-required"></a>1.2.4 required</h4>
<p>Description: describes whether a value is required before the instance 
  data is submitted.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>false</code>.</p>
<p>Often forms require certain values to be entered. This may be 
  a static requirement, or may only be the case if some condition is satisfied. When evaluating to <code>true</code>, this property indicates that a non-empty instance data item is required before a submission of instance data can occur. Non-empty is defined as:</p><ol><li><p>If the bound instance data item is the text content of an element, the element  must not have the <code>xsi:nil</code> attribute set to <code>true</code>.</p></li><li><p>The bound instance data item must be convertible to an XPath <code>string</code> with a length greater than zero.</p></li></ol>
<p>Except as noted below, the <code>required</code> property does not provide 
  a hint to the XForms User Interface regarding visibility, focus, or navigation order.
  XForms authors are strongly encouraged to make sure that form controls that
  accept <code>required</code> data are visible. An XForms Processor may provide a
  unique indication that a form control is required, and may provide immediate feedback, including limiting navigation, for required form controls.</p>

<div class="issue"><p class="prefix"><a name="issue-default-default"></a><b>Issue (issue-default-default):</b></p><p>It might be useful to set the default for the
required attribute for an entire XForms Model. What should the default default be?
How could we assign a default for a single XForms Model? This could apply to other
attributes as well, e.g. readOnly, etc...</p></div>
<p>The chapter <a href="#"><b>???</b></a> contains details on how the XForms Processor enforces required values.</p></div>

<div class="div3">
<h4><a name="model-prop-relevant"></a>1.2.5 relevant</h4>
<p>Description: indicates whether the model item is currently relevant to the
  rest of the XForms Model. XForms Processors would typically not render an
  associated form control, including children, when the value is <code>false</code>.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>Many forms have fields dependent on other conditions. For example, a form might 
  ask whether the respondent owns a car. It is only appropriate to ask for further information 
  about their car if they have indicated that they own one.</p><p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should render a form control, and conversely, when evaluating to <code>false</code>, indicates that the form control should not be rendered.</p>
<p>The <code>relevant</code> property provides hints to the XForms User Interface regarding 
  visibility, focus, and navigation order. In general, when <code>true</code>, associated 
  form controls should be made visible. When <code>false</code>, associated form
  controls should be made unavailable, removed from the navigation order, 
  and not allowed focus.</p>
<p>The following table shows the user interface interaction between <code>required</code> and 
  <code>relevant</code>.</p>
<table border="1" cellspacing="1" cellpadding="4" summary="shows combinations of depends and required">
<tbody><tr><td> </td><td><code>required="true"</code></td><td><code>required="false"</code></td></tr>
<tr><td><code>relevant="true"</code></td>
<td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is required.</td>
  <td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is optional.</td></tr>
  <tr><td><code>relevant="false"</code></td>
  <td>The form control (and any children) should be hidden or unavailable to 
  the user. Entering a value or obtaining focus should not be allowed. The 
  XForms User Interface may indicate that should the form control become relevant, 
  a value would be required.</td><td>The form control (and any children) should be
  hidden or unavailable to the user. Entering a value or obtaining focus should not
  be allowed.</td></tr></tbody></table>
 </div>

<div class="div3">
<h4><a name="model-prop-calculate"></a>1.2.6 calculate</h4>
<p>Description: indicates that the instance data item associated with the model item is to 
  be dynamically calculated.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible  to an XPath datatype compatible 
  with the associated XML Schema datatype.</p>
<p>Default Value: none.</p>
<p>An XForms Model may include model items that are computed from the other values 
  elsewhere. For example, the sum over line items for quantity times unit price, 
  or the amount of tax to be paid on an order. The computed value can be represented 
  as a computed expression using the values of other model items. The XForms Processing
  Model indicates how and when the calculation is recomputed.</p>
</div>

<div class="div3">
<h4><a name="model-prop-priority"></a>1.2.7 priority</h4>
<p>Description: indicates the relative priority for calculations of the 
  model item.</p><p>Computed Expression: No</p>
<p>Legal Values: any expression that is convertible to an integer in the range 
  0-32767.</p>
<p>Default Value: 0.</p>
<p>For model items that are calculated, this optional property specifies a calculation 
  order. The XForms Processing Model uses this property to determine the calculation order for multiple calculations.</p>
</div>

<div class="div3">
<h4><a name="model-prop-validate"></a>1.2.8 validate</h4>
<p>Description: specifies the predicate that needs to be satisfied for the associated instance data item to be considered valid.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>An XForms Model may include model items that need to be validated. When evaluating to <code>true</code>, indicates that the model item 
  is considered valid. The chapter <a href="#"><b>???</b></a>  describes 
  details such as immediate validation vs. onsubmit validation.</p>
<p>Computed expressions used here are not restricted to examining the instance 
  data item they are invoked on. XPath, plus the extensions in this chapter, provide 
  the means to traverse the instance data, as well as call-outs to external script, enabling potentially complex validations.</p>
<p>The XForms User Interface may indicate whether a form control is currently valid or 
  invalid.</p>
<div class="issue"><p class="prefix"><a name="issue-cascade"></a><b>Issue (issue-cascade):</b></p><p>Will the <code>validate</code> property be evaluated on
  all the parent or child model items whenever a value changes? We need to make sure
  that inter-model item constraints will get evaluated.</p></div>
</div>
</div>

<div class="div2">
<h3><a name="model-using"></a>1.3 Using Datatypes in the XForms Model</h3>
<p>The following section is being rewritten with the guidance of the XML Schema Working Group. In its current state, it is an informative listing of the functionality that we are planning in XForms 1.0, with illustrative examples of similar functionality in XML Schema. A subsequent Working Draft will contain normative details on how the functionality is described in terms of XForms.</p>
  
<div class="div3">
<h4><a name="model-using-atomic"></a>1.3.1 Atomic Datatype</h4>
<p>At the simplest level, it is necessary to associate a datatype with a model item. This has the effect of restricting the allowable values of the associated instance data item to valid representations of the lexical space of the datatype, including enforcing of any constraining facets.</p>
<p>Example Schema Syntax: declaring a datatype based on an <code>xsd:string</code> plus additional constraining facet would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:minLength value="1"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>


</div>

<div class="div3">
<h4><a name="model-using-enum"></a>1.3.2 Closed Enumeration</h4>
<p>Often it is necessary to restrict the allowable values of the associated instance data item to a closed list of alternatives. Also under consideration is a method to obtain a list at runtime, for example, from an XPath node-set.</p>



<p>Example Schema Syntax: declaring a datatype allowing enumerated values of an <code>xsd:string</code> would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:enumeration value="Mastercard"/&gt;
    &lt;xsd:enumeration value="Diner's Club"/&gt;
    &lt;xsd:enumeration value="American Express"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>

</div><div class="div3">
<h4><a name="model-using-openenum"></a>1.3.3 Open Enumeration</h4><p>A special case of enumerated datatypes is the common form design pattern of a list, with an 'other, please specify' choice. This is referred to as an open enumeration.</p><p>Example Schema Syntax: declaring an open enumeration is possible through a combination of union and enumeration features, as follows:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="xsd:string"&gt;
    &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:enumeration value="Mastercard"/&gt;
        &lt;xsd:enumeration value="Diner's Club"/&gt;
        &lt;xsd:enumeration value="American Express"/&gt;
      &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
  &lt;/xsd:union&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>


  
<div class="div3">
<h4><a name="model-using-union"></a>1.3.4 Union</h4>
<p> It may be desirable for data collection purpose to allow an instance data item to be a valid lexical value of one among several datatypes. Unions are defined in XML Schema.</p>
<p>Example Schema Syntax:  declaring a datatype allowing either a <code>creditCardType</code> or <code>bonusProgramType</code> value would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="creditCardType bonusProgramType"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>
</div><div class="div3">
<h4><a name="model-using-array"></a>1.3.5 Multiple Selection</h4><p>Some form controls, such as <code>selectMany</code>, have the notion of supporting more than one simpleType value at any given time. This corresponds with Schema list datatypes.</p><p>Example Schema Syntax: declaring a list-derived datatype would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType name="listOfMyIntType"&gt;
  &lt;xsd:list itemType="xsd:int"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>

<div class="div3">
<h4><a name="model-using-repeat"></a>1.3.6 Repeating Line Item</h4>
<p>It is common for certain types of forms, such as order forms, to contain repeating structures, typically line items. If each individual structure were represented as a Schema complexType, a line item group would be analogous to the <code>sequence</code> construct.</p>
<p>Example Schema Syntax: a datatype allowing a sequence of child elements would be declared as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:complexType&gt;
  &lt;xsd:sequence&gt;
    &lt;xsd:element name="child" type="xform:string" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</pre></td></tr></table>
<p>Chapter <a href="#"><b>???</b></a> contains details on representing this with XForms User Interface form controls, as well as details for how this relates to the instance data in chapter <a href="#"><b>???</b></a>.</p></div>

<div class="div3">
<h4><a name="model-using-switch"></a>1.3.7 Alternate Representation</h4>
<p>In some forms, alternate representations might be necessary for underlying instance data structures.</p>
<p>Example Schema Syntax: a Schema <code>choice</code> element is roughly analogous to this, although XForms uses a more dynamic version. Examples of this are found in <a href="#"><b>???</b></a></p>



</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="intro"></a>1 About the XForms 1.0 Specification</h2> 
<div class="div2"> 
<h3><a name="intro-background"></a>1.1 Background</h3> 
<p>Forms are an important part of the Web, and they continue to be the
      primary means of interactivity used by many Web sites. Web applications and
      eCommerce solutions have sparked the demand for better Web forms with richer
      interactions. XForms are the response to this demand--extended analysis,
      followed by the creation of a new platform-independent markup language for
      online interaction between an <a title="" href="#">XForms Processor</a> and
      a remote entity. XForms are the successor to XHTML forms, and benefit from the
      lessons learned in the years of HTML forms implementation experience.</p>
    <p>Further background information on XForms can be found at 
      <a href="http://www.w3.org/MarkUp/Forms/">http://www.w3.org/MarkUp/Forms</a>.</p>
  </div> 
  <div class="div2">
    
<h3><a name="intro-reading"></a>1.2 Reading the Specification</h3>
    <p>This specification has been written with various types of readers in
      mind--in particular XForms authors and XForms implementors. We hope the
      specification will provide authors with the tools they need to write efficient,
      attractive, and accessible documents, without overexposing them to the XForms
      implementation details. Implementors, however, should find all they need to
      build conforming XForms Processors. The specification begins with a general
      presentation of XForms and becomes more and more technical and specific towards
      the end. For quick access to information, a general table of contents, specific
      tables of contents at the beginning of each section, and an index provide easy
      navigation, in both the electronic and printed versions.</p>
    <p>The specification has been written with two modes of presentation in
      mind: electronic and printed. In case of a discrepancy, the electronic version
      is considered the authoritative version of the document.</p>
  </div>
  <div class="div2">
    
<h3><a name="intro-org"></a>1.3 How the Specification is Organized</h3>
    <p>The specification is organized into the following chapters:</p>
    <dl>
      
        <dt class="label">Chapters 1 and 2</dt>
        <dd>
          <p>An introduction to XForms The introduction includes a brief
            tutorial on XForms and a discussion of design principles behind XForms.</p>
        </dd>
      
      
        <dt class="label">Chapters 3 and up</dt>
        <dd>
          <p>XForms reference manual. The bulk of the reference manual consists
            of the specification of XForms. This reference defines what may go into XForms
            and how XForms Processors must interpret the various components in order to
            claim conformance.</p>
        </dd>
      
      
        <dt class="label">Appendixes</dt>
        <dd>
          <p>Appendixes contain a normative description of XForms described in
            XML Schema, information on optional function libraries, references, a change
            history, and other useful information.</p>
        </dd>
      
    </dl>
  </div>
  <div class="div2">
    
<h3><a name="intro-conventions"></a>1.4 Documentation Conventions</h3>
    <p>The following highlighting and typography is used to present technical
      material in this document and other documents from the XForms Working
      Group:</p>
      
    <p>Special terms are defined in their own chapter; hyperlinks connect uses
      of the term to the definition.</p>
      
    <p>Throughout this document, the namespace prefixes "<code>xform:</code>",
      "<code>xsd:</code>", and "<code>xsi:</code>" are used to denote the XForms, 
      XML Schema, and XML Schema for Instances namespaces
      respectively. This is by convention only; any namespace prefix may be used in
      practice.</p>
      
    <p>Official terms are defined in the following manner: [<a title="term" name="def-term">Definition</a>: 
    You can find most <b>terms</b> in the chapter <a href="#"><b>???</b></a>].
    Links to <a title="" href="#">term</a>s may be specially highlighted in the text.</p>
    
    <p>The XML representations of various elements within XForms are presented
  as follows: Listed are the element name, names of all attributes, allowed
  values of attributes appearing after a "=" character, default values of
  attributes appearing after a ":" character, and allowed content. One or
  more headings below the table provide additional explanatory information.</p>
  <div class="example">
<h5>Example: XML Syntax Representation &lt;<code>example</code>&gt;</h5><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;example
  count = integer
  size = (small | medium | large) : medium
&gt;
  &lt;!-- Content: (allowed-content) --&gt;
&lt;/example&gt;</pre></td></tr></table><blockquote><p>
    <b>count = integer</b> - description of this attribute
    <br><b>size = (small | medium | large) : medium</b> - description of
    this attribute
  </p></blockquote></div>  
  
  
  
  
  <p>Non-normative short examples are set off typographically:</p>
    <blockquote><p>Example Item</p></blockquote><p>or</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example Item</pre></td></tr></table>
    
    
  <p>References to external documents appear as follows: <a href="#">[ref-example]</a>
  with links to the references section of this document.</p><dl>
  <dt class="label"><a name="ref-example"></a>Sample Reference</dt><dd><cite>Reference</cite> - linked
  to from above.</dd></dl>
  
  <p>The following highlighting is used for non-normative commentary:</p>
  
  <div class="note"><p class="prefix"><b>Note:</b></p> <p>A general admonition to readers.</p></div>
  
  <table border="1" summary="Editorial note: Editorial Note Name"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Editorial Note Name</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2"> Editorial commentary.</td></tr></table>
  
  <div class="issue"><p class="prefix"><a name="issue-id"></a><b>Issue (issue-id):</b></p><p class="prefix"><b>Issue-Name</b></p>
  <p> A specific issue to which input from readers is requested.</p></div>
  
  </div>
</div>