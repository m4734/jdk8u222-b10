<!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="expr"></a>1 XPath Expressions in XForms</h2> 

<p>XPath is used within XForms to address instance data, as well as to perform basic operations, such as declaratively stating when a <a title="" href="#">form control</a>
   needs to be filled out, or defining a computation over other values such as unit prices, quantities, discounts, and tax and shipping costs. This chapter describes how XForms uses XPath, and additional XForms functions for use in forms.</p>

<div class="div2">
<h3><a name="expr-datatypes"></a>1.1 Datatypes</h3>
<p>In general, XPath uses a smaller set of datatypes than XML Schema.  XForms allows arbitrary Schema datatypes, including those defined in <a href="#"><b>???</b></a>, while XPath datatypes are limited to <code>boolean</code>, <code>string</code>, <code>number</code>, and <code>node-set</code>. (For completeness, XPath additionally has external objects and result tree fragments, but there is no special treatment for these types in the XForms specification.)</p>
  
<div class="note"><p class="prefix"><b>Note:</b></p><p>Resource-limited XForms Processors may define implementation
limits on the maximum size of a <code>node-set</code>.</p></div>

<p>The XForms specification is defined such that it is always clear whether XPath or XML Schema datatypes are used within a particular context. <a title="" href="#">Binding expression</a>s and <a title="" href="#">computed expression</a>s always use XPath datatypes, while everything else uses XML Schema datatypes.</p>


<div class="note"><p class="prefix"><b>Note:</b></p><p>A future version of XForms is expected to use XPath 2.0, which includes support for XML Schema datatypes, which will make the above distinction moot. </p></div></div>

<div class="div2">
<h3><a name="expr-instance"></a>1.2 Instance Data</h3>

<p>Every form has a current state, representing the values entered at any particular point in time. Within XForms, for each <code>xform</code> element, the XForms Processor must behave as if it internally maintains an XML  data structure modeled as a tree to represent the state of the form. This data structure is called <a title="" href="#">instance data</a> and conforms to the XPath Data Model <a href="#">[ref-xpath-1.0]</a>. Additionally, each node in the tree contains a boolean "dirty" flag, which is referenced elsewhere by the XForms Processing Model. In this context, "dirty" indicates that the data value might need to be refreshed in the presentation.</p>
  
<p>Elements and attributes in the instance data may have namespace information associated with them, as defined in the XPath Data Model. Unless otherwise specified, all instance data elements and attributes are unqualified. Instance data elements and attributes may not belong to  the XForms namespace.</p>
  
<div class="issue"><p class="prefix"><a name="issue-instance-data-access"></a><b>Issue (issue-instance-data-access):</b></p><p>Should there be specified a  DOM form of access (perhaps a document fragment), that maps to the instance data? If so, should it be read-only or read-write access? What are possible security 
  implications here?</p></div><p>The rules for defining the root and context nodes of the instance data are found in in the following section.</p>
        
 
  

  

</div><div class="div2">
<h3><a name="expr-eval"></a>1.3 Evaluation Context</h3>

<p>Applied to XForms, XPath references abstract <a title="" href="#">instance data</a> (using the "path" portion of XPath), instead of a discrete XML document. This reference is called a <a title="" href="#">binding expression</a> in this specification.</p><p>The following context is used for evaluating all XPath expressions in XForms:</p>
  
<ol><li><p>The context node for <b>outermost</b> binding elements (such as XForms UI elements) 
    is the XPath root (<code>/</code>). A "<b>binding element</b>" 
    is any element that is explicitly allowed to have an <code>xform:ref</code>
    attribute. An XForms element is "<b>outermost</b>" when the node-set returned by the XPath expression 
    <code>ancestor::*</code> includes no <b>binding element</b> nodes.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>The contents of the instance data below the XPath root node (<code>/</code>) are dependent on how the instance data was constructed, which is defined in <a href="#"><b>???</b></a>.</p></div></li><li><p>The context node for non-<b>outermost</b> binding elements 
    is determined by evaluating the binding expression of the <b>immediately enclosing</b> 
    element. An element is "<b>immediately enclosing</b>" when it is the first 
    <b>binding element </b>node in the node-set returned by the XPath expression <code>ancestor::*</code>. This 
    is also referred to as "scoped resolution".</p></li><li><p>The context size and position are both exactly 1.</p></li><li><p>No variable bindings are in place.</p></li><li><p>The available function library is defined below.</p></li><li><p>Any namespace declarations in scope for the attribute that defines the  expression are applied to the expression.</p></li></ol>



<p>Example:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;repeat ref="element1/foo/bar"&gt;
  &lt;selectOne ref="element2" ... /&gt;
  &lt;selectOne ref="@attr" ... /&gt;
&lt;/repeat&gt;</pre></td></tr></table>
  <p>In this example, the <code>repeat</code> has a binding expression
   of <code>element1/foo/bar</code>. According to the rules above, this outermost
   element would have a context node of <code>/</code>, which is the root of the instance data, or the parent to the <code>element1</code> element. Both of the <code>selectOne</code>s then inherit a context node from
   their parent, the context node being <code>/element1/foo/bar</code>. Based on this,
   the <code>selectOne</code> binding expressions evaluate respectively to
   <code>/element1/foo/bar/element2</code> and <code>/element1/foo/bar/@attr</code>.
   Matching instance data follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;element1&gt;
  &lt;foo&gt;
    &lt;bar attr="xyz"&gt;
      &lt;element2&gt;xyz&lt;/element2&gt;
    &lt;/bar&gt;
  &lt;/foo&gt;
&lt;/element1&gt;</pre></td></tr></table>


  

</div>

<div class="div2">
<h3><a name="expr-canonical"></a>1.4 Canonical Binding Expressions</h3><p>As with XPath, it is possible to construct many different binding 
  expressions that end up returning the same node-set. That said, it is 
  often useful to express a binding expression in a standard, compact representation,
  defined as a canonical binding expression.</p>

<p>Canonical binding expressions are represented as an <code>AbsoluteLocationPath</code> as 
  defined in <a href="#">[ref-xpath-1.0]</a>. Additionally, canonical binding expressions use
  only default abbreviated axis-specifiers (for elements) or the '@' abbreviation
  (for attributes). Examples:</p>
<ul>
  <li><p>(canonical) <code>/a/b/c</code></p></li>
  <li><p>(canonical) <code>/a/b/@c</code></p></li>
  <li><p>(non-canonical) <code>a/b/c</code> (not an absolute path)</p></li>
  <li><p>(non-canonical) <code>child::a/child::b/child::c</code></p></li>
  <li><p>(non-canonical) <code>/a/b/c/d/ancestor::c</code></p></li>
</ul></div><div class="div2">
<h3><a name="expr-lib"></a>1.5 Forms Core Function Library</h3>

<p>The XForms Core Function Library includes the entire <a href="#">[ref-xpath-1.0]</a>
  Core Function Library, including operations on node-sets, strings, numbers, 
  and booleans.</p>
  
<p>This section defines a set of required functions for use within XForms.</p>

<div class="issue"><p class="prefix"><a name="xpath-core-lib"></a><b>Issue (xpath-core-lib):</b></p><p> Further input is required on the ability for resource-constrained 
  devices to implement the complete XPath Core Function Library.</p></div>
  
<div class="div3">
<h4><a name="expr-lib-num"></a>1.5.1 Number Methods</h4>

<p><em>number</em> <b>average</b>(<var>node-set</var>)</p>

<p>The <code>average</code> function returns the arithmetic 
  average value, for each node in the argument node-set, of the result of converting 
  the string-values of each node to a number. The sum is computed with <code>sum()</code>, and divided with <code>div</code> by the value computed with <code>count()</code>.</p>
  
<p><em>number</em> <b>min</b>(<var>node-set</var>)</p>

<p>The <code>min</code> function returns the minimum value, 
  for each node in the argument node-set, of the result of converting the string-values of the node 
  to a number. "Minimum" is determined with the <code>&lt;</code> operator.</p>
  
<p><em>number</em> <b>max</b>(<var>node-set</var>)</p>

<p>The <code>max</code> function returns the maximum value, 
  for each node in the argument node-set, of the result of converting the string-values of the node 
  to a number. "Maximum" is determined with the <code>&lt;</code> operator.</p>

<p><em>number</em> <b>count-non-empty</b>(<var>node-set</var>)</p>

<p>The <code>count-non-empty</code> function returns the number of non-empty
  nodes in the argument node-set. A node is considered non-empty if it is convertible
  into a string with a greater-than zero length.</p>

<div class="note"><p class="prefix"><b>Note:</b></p><p>The following core functions are defined within <a href="#">[ref-xpath-1.0]</a>
  - <code>number(), sum(), floor(), ceiling(), and round()</code></p></div>
<div class="note"><p class="prefix"><b>Note:</b></p><p>The following useful numeric and boolean operators are defined within <a href="#">[ref-xpath-1.0]</a>
  - "<code>+</code>", "<code>-</code>", "<code>*</code>", "<code>div</code>", "<code>mod</code>",
  unary "<code>-</code>" ,"<code>=</code>", "<code>!=</code>", "<code>&lt;</code>", "<code>&gt;</code>",
  "<code>&lt;=</code>", "<code>&gt;=</code>", "<code>or</code>", "<code>and</code>".</p>
  </div></div>

<div class="div3">
<h4><a name="expr-lib-string"></a>1.5.2 String Methods</h4>

<p><em>string</em> <b>now</b>()</p>

<p>The <code>now</code> function returns the current system 
  time as a string value, in the canonical format defined within the XForms specification. 
  If local time zone information is available, it is included in the string.</p>

<div class="note"><p class="prefix"><b>Note:</b></p><p>Note: the following are defined within <a href="#">[ref-xpath-1.0]</a> 
  - <code>string(), concat(), starts-with(), contains(), substring-before(), substring-after(), 
  substring(), string-length(), normalize-space(), and translate().</code></p></div>
</div>

<div class="div3">
<h4><a name="expr-lib-misc"></a>1.5.3 Miscellaneous Methods</h4>

<p><em>boolean</em> <b>submit</b>()</p>

<p>The <code>submit</code> function immediately submits 
  the instance data bound to the node that contains the expression by triggering an <code>xforms-submit</code> event.</p>
  
<p><em>boolean</em> <b>reset</b>()</p>

<p>The <code>reset</code> function immediately resets the 
  instance data bound to the node that contains the expression by triggering an <code>xforms-reset</code> event.</p>

<p><em>string</em> <b>xforms-property</b>(<var>string</var>)</p>

<p>The <code>xforms-property</code> function accesses the XForms Property (defined in
  <a href="#"><b>???</b></a>) named by the string parameter, and returns the value of the property.</p>

</div>
</div>

<div class="div2">
<h3><a name="expr-extend"></a>1.6 Extensibility</h3>
<div class="issue"><p class="prefix"><a name="user-extensions"></a><b>Issue (user-extensions):</b></p><p>This section will be expanded in future revisions, to cover extension functions 
  and methods for calling out to script, perhaps something along the lines of <code>element-available</code> and <code>function-available</code>.</p></div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="prod-notes"></a>A Production Notes (Non-Normative)</h2> 
<p>This document was encoded in the <a href="http://www.w3.org/XML/1998/06/xmlspec-v21.dtd">XMLspec
DTD</a> (which has <a href="http://www.w3.org/XML/1998/06/xmlspec-report-v21.htm">documentation</a>
available). The primary tools used for editing were SoftQuad XMetaL and EMACS with psgml and XAE. The HTML versions
were produced with the <a href="http://www.w3.org/XML/1998/06/xmlspec.xsl">xmlspec.xsl</a>
XSLT stylesheet using the Saxon engine.</p>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="intro"></a>1 About the XForms 1.0 Specification</h2> 
<div class="div2"> 
<h3><a name="intro-background"></a>1.1 Background</h3> 
<p>Forms are an important part of the Web, and they continue to be the
      primary means of interactivity used by many Web sites. Web applications and
      eCommerce solutions have sparked the demand for better Web forms with richer
      interactions. XForms are the response to this demand--extended analysis,
      followed by the creation of a new platform-independent markup language for
      online interaction between an <a title="" href="#">XForms Processor</a> and
      a remote entity. XForms are the successor to XHTML forms, and benefit from the
      lessons learned in the years of HTML forms implementation experience.</p>
    <p>Further background information on XForms can be found at 
      <a href="http://www.w3.org/MarkUp/Forms/">http://www.w3.org/MarkUp/Forms</a>.</p>
  </div> 
  <div class="div2">
    
<h3><a name="intro-reading"></a>1.2 Reading the Specification</h3>
    <p>This specification has been written with various types of readers in
      mind--in particular XForms authors and XForms implementors. We hope the
      specification will provide authors with the tools they need to write efficient,
      attractive, and accessible documents, without overexposing them to the XForms
      implementation details. Implementors, however, should find all they need to
      build conforming XForms Processors. The specification begins with a general
      presentation of XForms and becomes more and more technical and specific towards
      the end. For quick access to information, a general table of contents, specific
      tables of contents at the beginning of each section, and an index provide easy
      navigation, in both the electronic and printed versions.</p>
    <p>The specification has been written with two modes of presentation in
      mind: electronic and printed. In case of a discrepancy, the electronic version
      is considered the authoritative version of the document.</p>
  </div>
  <div class="div2">
    
<h3><a name="intro-org"></a>1.3 How the Specification is Organized</h3>
    <p>The specification is organized into the following chapters:</p>
    <dl>
      
        <dt class="label">Chapters 1 and 2</dt>
        <dd>
          <p>An introduction to XForms The introduction includes a brief
            tutorial on XForms and a discussion of design principles behind XForms.</p>
        </dd>
      
      
        <dt class="label">Chapters 3 and up</dt>
        <dd>
          <p>XForms reference manual. The bulk of the reference manual consists
            of the specification of XForms. This reference defines what may go into XForms
            and how XForms Processors must interpret the various components in order to
            claim conformance.</p>
        </dd>
      
      
        <dt class="label">Appendixes</dt>
        <dd>
          <p>Appendixes contain a normative description of XForms described in
            XML Schema, information on optional function libraries, references, a change
            history, and other useful information.</p>
        </dd>
      
    </dl>
  </div>
  <div class="div2">
    
<h3><a name="intro-conventions"></a>1.4 Documentation Conventions</h3>
    <p>The following highlighting and typography is used to present technical
      material in this document and other documents from the XForms Working
      Group:</p>
      
    <p>Special terms are defined in their own chapter; hyperlinks connect uses
      of the term to the definition.</p>
      
    <p>Throughout this document, the namespace prefixes "<code>xform:</code>",
      "<code>xsd:</code>", and "<code>xsi:</code>" are used to denote the XForms, 
      XML Schema, and XML Schema for Instances namespaces
      respectively. This is by convention only; any namespace prefix may be used in
      practice.</p>
      
    <p>Official terms are defined in the following manner: [<a title="term" name="def-term">Definition</a>: 
    You can find most <b>terms</b> in the chapter <a href="#"><b>???</b></a>].
    Links to <a title="" href="#">term</a>s may be specially highlighted in the text.</p>
    
    <p>The XML representations of various elements within XForms are presented
  as follows: Listed are the element name, names of all attributes, allowed
  values of attributes appearing after a "=" character, default values of
  attributes appearing after a ":" character, and allowed content. One or
  more headings below the table provide additional explanatory information.</p>
  <div class="example">
<h5>Example: XML Syntax Representation &lt;<code>example</code>&gt;</h5><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;example
  count = integer
  size = (small | medium | large) : medium
&gt;
  &lt;!-- Content: (allowed-content) --&gt;
&lt;/example&gt;</pre></td></tr></table><blockquote><p>
    <b>count = integer</b> - description of this attribute
    <br><b>size = (small | medium | large) : medium</b> - description of
    this attribute
  </p></blockquote></div>  
  
  
  
  
  <p>Non-normative short examples are set off typographically:</p>
    <blockquote><p>Example Item</p></blockquote><p>or</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example Item</pre></td></tr></table>
    
    
  <p>References to external documents appear as follows: <a href="#">[ref-example]</a>
  with links to the references section of this document.</p><dl>
  <dt class="label"><a name="ref-example"></a>Sample Reference</dt><dd><cite>Reference</cite> - linked
  to from above.</dd></dl>
  
  <p>The following highlighting is used for non-normative commentary:</p>
  
  <div class="note"><p class="prefix"><b>Note:</b></p> <p>A general admonition to readers.</p></div>
  
  <table border="1" summary="Editorial note: Editorial Note Name"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Editorial Note Name</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2"> Editorial commentary.</td></tr></table>
  
  <div class="issue"><p class="prefix"><a name="issue-id"></a><b>Issue (issue-id):</b></p><p class="prefix"><b>Issue-Name</b></p>
  <p> A specific issue to which input from readers is requested.</p></div>
  
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="prod-notes"></a>A Production Notes (Non-Normative)</h2> 
<p>This document was encoded in the <a href="http://www.w3.org/XML/1998/06/xmlspec-v21.dtd">XMLspec
DTD</a> (which has <a href="http://www.w3.org/XML/1998/06/xmlspec-report-v21.htm">documentation</a>
available). The primary tools used for editing were SoftQuad XMetaL and EMACS with psgml and XAE. The HTML versions
were produced with the <a href="http://www.w3.org/XML/1998/06/xmlspec.xsl">xmlspec.xsl</a>
XSLT stylesheet using the Saxon engine.</p>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="datatypes"></a>1 Datatypes</h2>

<div class="div2">
<h3><a name="datatypes-schema"></a>1.1 XML Schema Datatypes</h3><p>XForms includes all XML
  Schema <a title="" href="#">datatype</a>s, including the concepts of
  <a title="" href="#">value space</a> and
  <a title="" href="#">lexical space</a>, and all constraining
  <a title="" href="#">facet</a>s, as specified in <a href="#">[ref-xschema-2]</a>.
  For reference, these are</p>
  <p>Built-in primitive types:</p>
  <blockquote><p>
  duration
  <br>dateTime
  <br>time
  <br>date
  <br>gYearMonth
  <br>gYear
  <br>gMonthDay
  <br>gDay
  <br>gMonth
  <br>string
  <br>boolean
  <br>base64Binary
  <br>hexBinary
  <br>float
  <br>decimal
  <br>double
  <br>anyURI
  <br>QName
  <br>NOTATION
  </p></blockquote><p>Built-in derived types:</p>
  <blockquote><p>
  normalizedString
  <br>token
  <br>language
  <br>Name
  <br>NCName
  <br>ID
  <br>IDREF
  <br>IDREFS
  <br>ENTITY
  <br>ENTITIES
  <br>integer
  <br>nonPositiveInteger
  <br>negativeInteger
  <br>long
  <br>int
  <br>short
  <br>byte
  <br>nonNegativeInteger
  <br>unsignedLong
  <br>unsignedInt
  <br>unsignedShort
  <br>unsignedByte
  <br>positiveInteger
  </p></blockquote><p>The Schema for XForms derives new types for all the above datatypes, placing no
  additional restrictions on the allowed value space, but including them in the XForms namespace.</p>
  <div class="issue"><p class="prefix"><a name="datatype-identifiers"></a><b>Issue (datatype-identifiers):</b></p><p>One requirement is for XForms to include unique identifiers
  for each datatype listed here. We believe the facilities in XML Schema are sufficient for this,
  but welcome feedback  on this issue.</p></div>
  <div class="issue"><p class="prefix"><a name="ieee-datatypes"></a><b>Issue (ieee-datatypes):</b></p><p>There is concern that IEEE floating point, as used by the
  datatypes <code>xsd:float</code> and <code>xsd:double</code> may be difficult or impossible
  to implement on small devices. XPath (see <a href="#"><b>???</b></a>) also uses IEEE representation
  for numbers, and must be taken into consideration as to resolution of this conflict.</p></div>
  
  <div class="issue"><p class="prefix"><a name="xml-datatypes"></a><b>Issue (xml-datatypes):</b></p><p>Several datatypes, namely <code>xsd:QName</code>,
  <code>xsd:NOTATION</code>, <code>xsd:Name</code>, <code>xsd:NCName</code>, <code>xsd:ID</code>,
  <code>xsd:IDREF</code>, <code>xsd:IDREFS</code>, <code>xsd:ENTITY</code>, and
  <code>xsd:ENTITES</code> are highly specific to XML, and perhaps not as useful in XForms.
  Particularly on small devices, the incremental cost of supporting these datatypes might be
  excessive.</p></div>
  
  <div class="issue"><p class="prefix"><a name="pattern-facet"></a><b>Issue (pattern-facet):</b></p><p>Fully implementing the <code>pattern</code> facet might be too
  expensive on small devices.</p></div>
  
  <div class="issue"><p class="prefix"><a name="mask-facet"></a><b>Issue (mask-facet):</b></p><p>Previous Working Drafts of XForms specified a <code>mask</code>
  facet, with less implementation cost than the Schema <code>pattern</code> facet. What are
  our options for adding an entirely new facet not defined in XML Schema?</p>
  <p>The mask facet was defined as follows:</p>
  <div class="example">
<h5>Example: Mask Facet</h5><p>XML Schema has defined a Regular Expression language which
  is "similar to the regular expression language used in the Perl Programming language", 
  and can be applied to most built-in datatypes. Regular expression syntax, however, 
  is considered complex by some. Therefore, XForms defines the concept of a <code>mask</code> 
  facet. All <code>mask</code> facets 
  are convertible into <code>pattern</code>s.</p>
<p>XML schema 
  allows multiple <code>pattern</code> facets to be specified. Similarly, multiple 
  <code>mask</code> or <code>pattern</code> facets, but not a mixture, are permitted.</p>
<p>XForms <code>mask</code> uses the syntax and processing from <a href="#">[ref-wml1.3]</a> 
  <code>format</code>. Some examples:</p>
<ul>
  <li><p><code>A</code> matches "A", "X", "$", "%", 
    or "."</p></li>
  <li><p><code>a</code> matches "a", "x", "$", "%", 
    or "."</p></li>
  <li><p><code>X</code> matches "A", "X", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>x</code> matches "a", "x", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>N</code> matches "0", "4", or "7"</p></li>
  <li><p><code>3N</code> matches "0", "63", or "999" 
    but not "1234" (Note: only allowed at end of mask)</p></li>
  <li><p><code>*X</code> matches "$", "3.0", or "ABCDEFG" 
    (Note: only allowed at end of mask)</p></li>
  <li><p><code>\</code> causes the next literal character to be inserted into the 
    mask</p></li>
  <li><p><code>NNN\-NNNN</code> matches "123-4567" but not "1234567"</p></li>
</ul>
<p>As with WML <code>format</code> processing, an XForms Processor must ignore 
  invalid <code>mask</code>s.</p></div></div>
  
  <div class="issue"><p class="prefix"><a name="now-facet"></a><b>Issue (now-facet):</b></p><p>Previous Working Drafts of XForms specified "dynamic facets"
  that could be reevaluated at arbitrary times. One benefit of that approach was that a
  <code>now()</code> expression could be used as a constraining facet on date/time datatypes.
  What are our options for including similar functionality within the framework of XML Schema
  datatypes?</p></div></div>
  
  <div class="div2">
<h3><a name="datatypes-xforms"></a>1.2 XForms Datatypes</h3><p>The Schema for XForms derives the
  following types for use within forms:</p>
  
  <div class="div3">
<h4><a name="dt-currency"></a>1.2.1 currency</h4>
<p>The XForms datatype <code>currency</code> is derived from the XForms datatype 
  <code>xform:string</code>. A <code>pattern</code> facet with a value of <code>[A-Z]{3}</code>
  is specified.</p>
<p>Valid currency values are specified in <a href="#">[ref-iso-4217]</a>.</p>
<div class="note"><p class="prefix"><b>Note:</b></p><p>Since new currencies may appear at any time, the currency values as defined  in
<a href="#">[ref-iso-4217]</a> are not strictly enforced.</p></div><ul>  

<li><p><b>Examples:</b>A value of 'Japanese Yen' would be represented as: </p>
<blockquote><p>JPY</p></blockquote></li>
<li> <p>A value 'US Dollars' would be represented as:</p>
<blockquote><p>USD</p></blockquote></li>

</ul>
</div><div class="div3">
<h4><a name="dt-money"></a>1.2.2 monetary</h4>

<p>Forms often deal with monetary values. In many cases the currency type in use is well-known,
and not even needed in the instance data. When an explicit currency identifier is needed,
authors can freely use separate <code>xform:decimal</code> and <code>xform:currency</code>
values to accomplish this. For a unified approach, a monetary datatype would combine, in a single lexical space,
both a currency code and a decimal value.</p>
<div class="issue"><p class="prefix"><a name="monetary-datatype"></a><b>Issue (monetary-datatype):</b></p><p>Is such a datatype needed in XForms? If yes, how can it
be defined in terms of XML Schema?</p></div><ul>  

<li><p><b>Examples:</b> A value of 42 Indonesian Rupiahs would be represented as:</p>
<blockquote><p>42IDR</p></blockquote>
</li><li><p> A value of 4.37 Euro would be represented as:</p>
<blockquote><p>4.37EUR</p></blockquote></li>

</ul>
</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="title"></a>1 Title</h2>
<p>x</p> 
  <div class="div2"> 
    
<h3><a name="N1000A"></a>1.1 x</h3> 
  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="datatypes"></a>1 Datatypes</h2>

<div class="div2">
<h3><a name="datatypes-schema"></a>1.1 XML Schema Datatypes</h3><p>XForms includes all XML
  Schema <a title="" href="#">datatype</a>s, including the concepts of
  <a title="" href="#">value space</a> and
  <a title="" href="#">lexical space</a>, and all constraining
  <a title="" href="#">facet</a>s, as specified in <a href="#">[ref-xschema-2]</a>.
  For reference, these are</p>
  <p>Built-in primitive types:</p>
  <blockquote><p>
  duration
  <br>dateTime
  <br>time
  <br>date
  <br>gYearMonth
  <br>gYear
  <br>gMonthDay
  <br>gDay
  <br>gMonth
  <br>string
  <br>boolean
  <br>base64Binary
  <br>hexBinary
  <br>float
  <br>decimal
  <br>double
  <br>anyURI
  <br>QName
  <br>NOTATION
  </p></blockquote><p>Built-in derived types:</p>
  <blockquote><p>
  normalizedString
  <br>token
  <br>language
  <br>Name
  <br>NCName
  <br>ID
  <br>IDREF
  <br>IDREFS
  <br>ENTITY
  <br>ENTITIES
  <br>integer
  <br>nonPositiveInteger
  <br>negativeInteger
  <br>long
  <br>int
  <br>short
  <br>byte
  <br>nonNegativeInteger
  <br>unsignedLong
  <br>unsignedInt
  <br>unsignedShort
  <br>unsignedByte
  <br>positiveInteger
  </p></blockquote><p>The Schema for XForms derives new types for all the above datatypes, placing no
  additional restrictions on the allowed value space, but including them in the XForms namespace.</p>
  <div class="issue"><p class="prefix"><a name="datatype-identifiers"></a><b>Issue (datatype-identifiers):</b></p><p>One requirement is for XForms to include unique identifiers
  for each datatype listed here. We believe the facilities in XML Schema are sufficient for this,
  but welcome feedback  on this issue.</p></div>
  <div class="issue"><p class="prefix"><a name="ieee-datatypes"></a><b>Issue (ieee-datatypes):</b></p><p>There is concern that IEEE floating point, as used by the
  datatypes <code>xsd:float</code> and <code>xsd:double</code> may be difficult or impossible
  to implement on small devices. XPath (see <a href="#"><b>???</b></a>) also uses IEEE representation
  for numbers, and must be taken into consideration as to resolution of this conflict.</p></div>
  
  <div class="issue"><p class="prefix"><a name="xml-datatypes"></a><b>Issue (xml-datatypes):</b></p><p>Several datatypes, namely <code>xsd:QName</code>,
  <code>xsd:NOTATION</code>, <code>xsd:Name</code>, <code>xsd:NCName</code>, <code>xsd:ID</code>,
  <code>xsd:IDREF</code>, <code>xsd:IDREFS</code>, <code>xsd:ENTITY</code>, and
  <code>xsd:ENTITES</code> are highly specific to XML, and perhaps not as useful in XForms.
  Particularly on small devices, the incremental cost of supporting these datatypes might be
  excessive.</p></div>
  
  <div class="issue"><p class="prefix"><a name="pattern-facet"></a><b>Issue (pattern-facet):</b></p><p>Fully implementing the <code>pattern</code> facet might be too
  expensive on small devices.</p></div>
  
  <div class="issue"><p class="prefix"><a name="mask-facet"></a><b>Issue (mask-facet):</b></p><p>Previous Working Drafts of XForms specified a <code>mask</code>
  facet, with less implementation cost than the Schema <code>pattern</code> facet. What are
  our options for adding an entirely new facet not defined in XML Schema?</p>
  <p>The mask facet was defined as follows:</p>
  <div class="example">
<h5>Example: Mask Facet</h5><p>XML Schema has defined a Regular Expression language which
  is "similar to the regular expression language used in the Perl Programming language", 
  and can be applied to most built-in datatypes. Regular expression syntax, however, 
  is considered complex by some. Therefore, XForms defines the concept of a <code>mask</code> 
  facet. All <code>mask</code> facets 
  are convertible into <code>pattern</code>s.</p>
<p>XML schema 
  allows multiple <code>pattern</code> facets to be specified. Similarly, multiple 
  <code>mask</code> or <code>pattern</code> facets, but not a mixture, are permitted.</p>
<p>XForms <code>mask</code> uses the syntax and processing from <a href="#">[ref-wml1.3]</a> 
  <code>format</code>. Some examples:</p>
<ul>
  <li><p><code>A</code> matches "A", "X", "$", "%", 
    or "."</p></li>
  <li><p><code>a</code> matches "a", "x", "$", "%", 
    or "."</p></li>
  <li><p><code>X</code> matches "A", "X", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>x</code> matches "a", "x", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>N</code> matches "0", "4", or "7"</p></li>
  <li><p><code>3N</code> matches "0", "63", or "999" 
    but not "1234" (Note: only allowed at end of mask)</p></li>
  <li><p><code>*X</code> matches "$", "3.0", or "ABCDEFG" 
    (Note: only allowed at end of mask)</p></li>
  <li><p><code>\</code> causes the next literal character to be inserted into the 
    mask</p></li>
  <li><p><code>NNN\-NNNN</code> matches "123-4567" but not "1234567"</p></li>
</ul>
<p>As with WML <code>format</code> processing, an XForms Processor must ignore 
  invalid <code>mask</code>s.</p></div></div>
  
  <div class="issue"><p class="prefix"><a name="now-facet"></a><b>Issue (now-facet):</b></p><p>Previous Working Drafts of XForms specified "dynamic facets"
  that could be reevaluated at arbitrary times. One benefit of that approach was that a
  <code>now()</code> expression could be used as a constraining facet on date/time datatypes.
  What are our options for including similar functionality within the framework of XML Schema
  datatypes?</p></div></div>
  
  <div class="div2">
<h3><a name="datatypes-xforms"></a>1.2 XForms Datatypes</h3><p>The Schema for XForms derives the
  following types for use within forms:</p>
  
  <div class="div3">
<h4><a name="dt-currency"></a>1.2.1 currency</h4>
<p>The XForms datatype <code>currency</code> is derived from the XForms datatype 
  <code>xform:string</code>. A <code>pattern</code> facet with a value of <code>[A-Z]{3}</code>
  is specified.</p>
<p>Valid currency values are specified in <a href="#">[ref-iso-4217]</a>.</p>
<div class="note"><p class="prefix"><b>Note:</b></p><p>Since new currencies may appear at any time, the currency values as defined  in
<a href="#">[ref-iso-4217]</a> are not strictly enforced.</p></div><ul>  

<li><p><b>Examples:</b>A value of 'Japanese Yen' would be represented as: </p>
<blockquote><p>JPY</p></blockquote></li>
<li> <p>A value 'US Dollars' would be represented as:</p>
<blockquote><p>USD</p></blockquote></li>

</ul>
</div><div class="div3">
<h4><a name="dt-money"></a>1.2.2 monetary</h4>

<p>Forms often deal with monetary values. In many cases the currency type in use is well-known,
and not even needed in the instance data. When an explicit currency identifier is needed,
authors can freely use separate <code>xform:decimal</code> and <code>xform:currency</code>
values to accomplish this. For a unified approach, a monetary datatype would combine, in a single lexical space,
both a currency code and a decimal value.</p>
<div class="issue"><p class="prefix"><a name="monetary-datatype"></a><b>Issue (monetary-datatype):</b></p><p>Is such a datatype needed in XForms? If yes, how can it
be defined in terms of XML Schema?</p></div><ul>  

<li><p><b>Examples:</b> A value of 42 Indonesian Rupiahs would be represented as:</p>
<blockquote><p>42IDR</p></blockquote>
</li><li><p> A value of 4.37 Euro would be represented as:</p>
<blockquote><p>4.37EUR</p></blockquote></li>

</ul>
</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="concepts"></a>1 Concepts</h2> 
<p>This informative chapter provides an easily approachable description of the design
  of XForms, describing the major components and how they relate. Not every feature of
  XForms is covered here. For a complete, normative description of XForms, refer to the
  remainder of this document.</p> 
  <div class="div2">
<h3><a name="concepts-purpose-presentation"></a>1.1 Purpose and Presentation</h3>
  <p>For explanatory purposes, a form can be considered to consist of 'purpose', 'presentation',
  and 'data'. Some examples:</p>
  <table width="100%"><thead><tr><td><b>Purpose</b></td><td><b>Presentation</b></td><td><b>Data</b></td></tr>
  </thead><tbody>
  <tr><td>Data collection</td><td>Arrangement of form controls</td><td>Registration information</td></tr>
  <tr><td>Time card</td><td>How dates are entered</td><td>Days and hours worked</td></tr>
  <tr><td>Order form</td><td>How to render the form controls on small devices</td><td>Order, shipping, and payment info</td></tr>
  <tr><td>Information Please</td><td>How the form integrates with a Web site</td><td>User contact information</td></tr>
  </tbody></table>
  
  <p>The design of existing Web forms didn't separate the purpose from the presentation
  of a form, and additionally offered only a restricted representation for data captured through the form. This is the primary difference between XForms and previous form technologies.</p></div><div class="div2"> 
    
<h3><a name="concepts-xhtml"></a>1.2  Current Approach: XHTML</h3> 
  <p> Take for instance a simple eCommerce form authored in XHTML 1.0:</p>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;
&lt;body&gt;
&lt;form action="http://example.com/submit" method="post"&gt;
  &lt;span&gt;Select Payment Method: &lt;/span&gt;
  &lt;input type="radio" name="paytype" value="cash"&gt;Cash&lt;/input&gt;
  &lt;input type="radio" name="paytype" value="credit"&gt;Credit&lt;/input&gt;&lt;br/&gt;
  &lt;label&gt;Credit Card Number: &lt;input type="text" name="cc"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;label&gt;Expiration Date: &lt;input type="text" name="exp"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table><p>A browser might render this form as follows:</p>
<img src="images/concepts-xhtml.png" alt="screen shot of a graphic rendering">
<p>This form makes no effort to separate purpose (data collection semantics) from  presentation (the <code>&lt;input&gt;</code> form controls), and offers no
control over the basic name/value formatting of the resulting data. XForms greatly
improves the expressive capabilities of electronic forms.</p>
</div>
<div class="div2">
<h3><a name="concepts-xfu"></a>1.3 Stepping Up to XForms</h3>
<p>XForms are comprised of separate sections that describe what the form does, and how
the form is to be presented. This allows for flexible presentation options, making it possible for classic XHTML
form controls, as well as other form control sets such as WML to be leveraged, as
shown here.</p>
<img src="images/arch1.jpg" alt="puzzle pieces; 'XForm Model' on the left, on the right 'XForms User Interface', 'XHTML', 'WML', and a stack of 'proprietary' pieces">
<p>The simplest case involves authoring only the new XForms
<a title="" href="#">form control</a>s, leaving out the other sections of the form. To convert the previous form into
XForms this way, an <code>xform</code> element is needed in the <code>head</code> section of
the document:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>With these changes to the containing document, the previous example could be rewritten
like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne xmlns="http://www.w3.org/2001/06/xforms" ref="paytype"&gt;
  &lt;caption&gt;Select Payment Method&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="cash"&gt;Cash&lt;/item&gt;
    &lt;item value="credit"&gt;Credit&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="cc"&gt;
  &lt;caption&gt;Credit Card Number&lt;/caption&gt;
&lt;/textbox&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="exp"&gt;
  &lt;caption&gt;Expiration Date&lt;/caption&gt;
&lt;/textbox&gt;
&lt;submit xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>Notice the following features of this design:</p>
<ul><li><p>The user interface is not hard-coded to use radio buttons. Different devices
  (such as a voice browser) can render the concept of "selectOne" as appropriate.</p></li>
<li><p>Form controls always have captions directly associated with them, as child elements.</p></li>
<li><p>There is no need for an enclosing <code>form</code> element.</p></li>
<li><p>Element names for form controls have been changed: <code>textbox</code> is a specific
element, rather than a <code>type</code> attribute on <code>input</code>, as in XHTML.</p> </li>
<li><p>Data entered through the form controls ends up submitted as XML.</p></li>
</ul>
<p>With these changes, the <a title="" href="#">XForms Processor</a>
will be able to directly submit XML instance data. The XML is constructed by creating a root
element with child elements reflecting the names given to each form control.  For instance,
the submitted data might look like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- envelope, generated separately --&gt;
&lt;Envelope&gt;
  &lt;Body&gt;</pre></td></tr></table><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>    &lt;!-- serialized instance data --&gt;
    &lt;paytype&gt;Credit&lt;/paytype&gt;
    &lt;cc&gt;12354677890123456&lt;/cc&gt;
    &lt;exp&gt;04-2001&lt;/exp&gt;</pre></td></tr></table>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;!-- envelope, generated separately --&gt;
  &lt;/Body&gt;
&lt;/Envelope&gt;</pre></td></tr></table></div>
<div class="div2">
<h3><a name="concpts-instance"></a>1.4 Providing XML Instance Data</h3>
<p>Understandably, authors will often desire greater control over exact construction of the
submitted instance data. One common case might be submitting to a server XML data that is
validated against a predefined DTD or XML Schema.</p>
<p>XForms keeps track of the state of the partially filled form through
<a title="" href="#">instance data</a>, which provides an outline
of the desired  XML data, including namespace information. The instance data starts
off with the initial values for the form, is updated as the user fills the form, and
eventually is serialized and submitted. The initial instance data is taken from the
<code>instance</code> element inside the <code>xform</code> element, defined as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
    &lt;payment type="credit" xmlns="http://commerce.example.com/payment"&gt;
      &lt;cc/&gt;
      &lt;exp/&gt;
    &lt;/payment&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>This design has features worth calling out:</p><ul>
<li><p>There is complete flexibility in the structure of the XML. Notice that the item
  <code>paytype</code> is now expressed as an attribute <code>type</code> of the element
  <code>payment</code>.</p></li>
<li><p>Empty elements <code>cc</code> and <code>exp</code> serve as placeholders in the XML structure,
  and will be filled in with form data provided by the user.</p></li>
<li><p>An initial value (<code>"credit"</code>) for the form control is provided through the
  <code>type</code> attribute in the instance data. In the submitted XML, this initial value will
  be replaced by the user input, if any.</p></li>
<li><p>The instance data provides a unique namespace, which will be used when the XML gets
  submitted.</p></li></ul>
  <p>To connect this instance data with  form controls, the
<code>ref</code> attributes on the form controls need to point to the proper part of the instance
data, using <a title="" href="#">binding expressions</a>:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;selectOne ref="payment/@type"&gt;
  ...
  &lt;inputText ref="payment/cc"&gt;
  ...
  &lt;inputText ref="payment/exp"&gt;</pre></td></tr></table>
<p>Binding expressions are based on XPath <a href="#">[ref-xpath-1.0]</a>, including
  the use of the '@' character to refer to attributes, as seen here.</p>
  </div> 
<div class="div2">
<h3><a name="concepts-model"></a>1.5 The XForms Model</h3>
<p>The earlier XHTML form in <a href="#"><b>???</b></a>. Even in this short form,
there are several aspects that would be desirable to express, but would only be possible
through the addition of unstructured script code:
</p>
<ul><li><p>The credit card information fields <code>cc</code> and <code>exp</code> are
only relevant if the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The credit card information fields <code>cc</code> and <code>exp</code> should be
required when the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The field <code>cc</code> should accept digits only, and should have exactly 14,
15, or 16 digits.</p></li>
<li><p>The field <code>exp</code> should accept only valid month/date combinations.</p></li></ul>
<p>By specifying a 3rd component, the <a title="" href="#">XForms Model</a>,
authors can include rich declarative datatype and validation information in forms.</p>
<table border="1" summary="Editorial note: MJD"><tr><td width="50%" valign="top" align="left"><b>Editorial note: MJD</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">The examples here are sketchy out of necessity; this section
will need to be rewritten after the Schema Basic task force delivers its syntax recommendations.</td></tr></table>
<p>An XForms Model consists of <a title="" href="#">model items</a>, which
include XML Schema datatype information <a href="#">[ref-xschema-2]</a> as well as properties
specific to XForms.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- add to the cc model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:string"
facet pattern of "\d{14,16}"

&lt;!-- add to the exp model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:gYearMonth"</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-multiple"></a>1.6 Multiple Forms per Document</h3>
<p>XForms places no limits on the number of individual forms that can be placed in a single
<a title="" href="#">containing document</a>. When multiple forms share
the same containing document, multiple
<code>xform</code> elements are needed. The first <code>xform</code> element may skip a unique <code>id</code>
attribute (as have all the examples above), but subsequent  <code>xform</code> elements require
an <code>id</code> so that they can be referenced from elsewhere in the containing document.</p>
<p>The other side of the equation is that form controls throughout the document need to specify
which <code>xform</code> element is associated with the instance data to which they bind. This is
accomplished through an <code>xform</code> attribute alongside the <code>ref</code> attribute. The
default for the <code>xform</code> attribute is to refer to the first <code>xform</code> element in
document order.</p><p>To add a second form, an opinion poll, to our commerce example, the
following would be authored in the head section of the XHTML:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
     ...payment instance data...
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;

&lt;xform:xform id="poll"&gt;
  &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table><p>Additionally, the following form control markup in the body:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="pollOption" xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"&gt;
  &lt;caption&gt;How useful is this page to you?&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="0"&gt;Not at all helpful&lt;/item&gt;
    &lt;item value="1"&gt;Barely helpful&lt;/item&gt;
    &lt;item value="2"&gt;Somewhat helpful&lt;/item&gt;
    &lt;item value="3"&gt;Very helpful&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;submit xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>The main difference to note here is the use of <code>xform="poll"</code>,
  which identifies which form the form control binds to.</p></div>
<div class="div2">
<h3><a name="concepts-advancedUI"></a>1.7 Additional User Interface Capabilities</h3>
<p>The visual layout appearance of the initial XHTML forms such as the above example
(<a href="#"><b>???</b></a>) leaves much to be desired. </p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Need extended UI example here</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-complete"></a>1.8 Complete Document</h3>
<p>This chapter presented various bits and pieces of XForms as a tool to help readers
understand the design. Presented here is the entire XHTML+XForms document presented
in one segment.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xform="http://www.w3.org/2001/06/xforms"
      xml:lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;XForms in XHTML&lt;/title&gt;

  &lt;xform:xform&gt;
    &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
    &lt;xform:instance&gt;
      &lt;payment type="credit" xmlns="http://commerce.wizard"&gt;
        &lt;cc/&gt;
        &lt;exp/&gt;
      &lt;/payment&gt;
    &lt;/xform:instance&gt;
  &lt;/xform:xform&gt;

  &lt;xform:xform id="poll"&gt;
    &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
  &lt;/xform:xform&gt;

&lt;/head&gt;
&lt;body&gt;
    ... include advanced UI markup here ...
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="schema"></a>1 Schema for XForms</h2> 

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- edited with XML Spy v3.5 NT (http://www.xmlspy.com) by Micah (W3C XForms Working Group) --&gt;
&lt;!-- converted with http://www.w3.org/2001/03/webdata/xsu --&gt;
&lt;!DOCTYPE xsd:schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd" [
&lt;!ENTITY % p 'xsd:'&gt;
&lt;!ENTITY % s ':xsd'&gt;
]&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xform="http://www.w3.org/2001/06/xforms"
targetNamespace="http://www.w3.org/2001/06/xforms"
elementFormDefault="qualified"&gt;
  &lt;!-- 
structural elements
--&gt;
  &lt;xsd:element name="xform"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of the xform container element.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element ref="xform:submitInfo" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:model" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:instance" minOccurs="0"/&gt;
        &lt;xsd:element ref="xform:bind" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="model"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of model container. Content model TBD.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="instance"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of instance container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any" maxOccurs="unbounded"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submitInfo"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of submit info container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
        &lt;!-- allow zero or more submitExtension elements --&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="target" type="xsd:anyURI" use="required"/&gt;
      &lt;xsd:attribute name="method" type="xform:methodType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:attributeGroup name="linkingAttributes"&gt;
    &lt;xsd:attribute name="href" type="xsd:anyURI"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="bind"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Definition of bind container.&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
User Interface form controls and other elements
--&gt;
  &lt;xsd:attributeGroup name="commonUIAttributes"&gt;
    &lt;xsd:attribute name="lang" type="xsd:language" use="optional"/&gt;
    &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
    &lt;xsd:attribute name="class" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="style" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="xform" type="xsd:IDREF" use="optional"/&gt;
    &lt;xsd:attribute name="accessKey" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="navIndex" type="xsd:nonNegativeInteger" use="optional"/&gt;
  &lt;/xsd:attributeGroup&gt;
  &lt;xsd:element name="caption"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="hint"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="help"&gt;
    &lt;xsd:complexType mixed="true"&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:any namespace="##any"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attributeGroup ref="xform:linkingAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="onevent"&gt;
    &lt;xsd:annotation&gt;
      &lt;xsd:documentation&gt;Defined in a different specification&lt;/xsd:documentation&gt;
    &lt;/xsd:annotation&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:group name="choiceGroup"&gt;
    &lt;xsd:choice&gt;
      &lt;xsd:element ref="xform:choices"/&gt;
      &lt;xsd:element ref="xform:item"/&gt;
    &lt;/xsd:choice&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="choices"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence maxOccurs="unbounded"&gt;
        &lt;xsd:group ref="xform:choiceGroup"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="item" type="xform:string"/&gt;
  &lt;xsd:group name="commonUIChildren"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xform:caption"/&gt;
      &lt;xsd:element ref="xform:help" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:hint" minOccurs="0"/&gt;
      &lt;xsd:element ref="xform:onevent" minOccurs="0"/&gt;
      &lt;xsd:any namespace="##any"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:group&gt;
  &lt;xsd:element name="textbox"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="secret"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="uploadMedia"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="mediaType" type="xform:spaceSeparatedListType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectOne"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectMany"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="selectBoolean"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:group ref="xform:commonUIChildren"/&gt;
        &lt;xsd:element ref="xform:choices"/&gt;
      &lt;/xsd:sequence&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="selectUI" type="xform:selectUIType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="range"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
      &lt;xsd:attribute name="start" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="end" type="xsd:string" use="required"/&gt;
      &lt;xsd:attribute name="stepSize" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="button"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="output"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attribute name="id" type="xsd:ID" use="optional"/&gt;
      &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="xform" type="xsd:string" use="optional"/&gt;
      &lt;xsd:attribute name="format" type="xsd:string" use="optional"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="submit"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;xsd:element name="reset"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:group ref="xform:commonUIChildren"/&gt;
      &lt;xsd:attributeGroup ref="xform:commonUIAttributes"/&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
  &lt;!--
Bring over xsd simpleTypes
--&gt;
  &lt;xsd:simpleType name="decimal"&gt;
    &lt;xsd:restriction base="xsd:decimal"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="string"&gt;
    &lt;xsd:restriction base="xsd:string"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="boolean"&gt;
    &lt;xsd:restriction base="xsd:boolean"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="date"&gt;
    &lt;xsd:restriction base="xsd:date"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="time"&gt;
    &lt;xsd:restriction base="xsd:time"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;!-- Note: similar for all other built-in Schema types; new schema was not available at publish 

time --&gt;
  &lt;!--
New simpleTypes
--&gt;
  &lt;xsd:simpleType name="currency"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="[A-Z]{3}"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="maskType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:pattern value="((A|a|X|x|N|n|M|m)|(\\.))*([0-9\*](A|a|X|x|N|n|M|m))?"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="spaceSeparatedListType"&gt;
    &lt;xsd:list itemType="xsd:token"/&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="selectUIType"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="radioGroup"/&gt;
      &lt;xsd:enumeration value="checkboxGroup"/&gt;
      &lt;xsd:enumeration value="pulldown"/&gt;
      &lt;xsd:enumeration value="listbox"/&gt;
      &lt;xsd:enumeration value="comboGroup"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
  &lt;xsd:simpleType name="methodType"&gt;
    &lt;xsd:restriction base="xform:string"&gt;
      &lt;xsd:enumeration value="postXML"/&gt;
      &lt;xsd:enumeration value="post"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;
&lt;/xsd:schema&gt;</pre></td></tr></table>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="title"></a>1 Title</h2>
<p>x</p> 
  <div class="div2"> 
    
<h3><a name="N1000A"></a>1.1 x</h3> 
  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="rpm"></a>1 Processing Model</h2>

<div class="div2">
<h3><a name="rpm-intro"></a>1.1 Introduction</h3>

<p>The XForms Reference Processing Model is a normative explanation of the components, 
  predictive behavior, and mechanisms of XForms Processors. It is not intended to
  constrain implementations. XForms Processors may be implemented in any manner, so
  long as the end results are identical to that described in this chapter.</p>
  
<p>This chapter uses the terms <b>may</b>, <b>must</b>, and 
  <b>should</b> (when rendered as in this paragraph) in 
  accord with RFC 2119.</p>
  
<div class="issue"><p class="prefix"><a name="issue-processing"></a><b>Issue (issue-processing):</b></p>
<p>This chapter is still at an early phase and may contain errors or omissions.
Feedback on this chapter is especially appreciated.</p></div>

<div class="div3">
<h4><a name="rpm-intro-rationale"></a>1.1.1 Design Rationale</h4>

<p>The Reference Processing Model set out in this chapter will:</p>
<ul>
  <li><p>Be simple enough to implement across a wide range of devices, including 
    resource-constrained handhelds and appliances.</p></li>
  <li><p>Define a predictive processing model with enough detail for implementors 
    to create interoperable software.</p></li>
  <li><p>Define a well-ordered system for calculations and dependencies independent 
    of processor speed or threading.</p></li>
  <li><p>Provide a unified addressing scheme for binding expressions, independent 
    of how the structure of the instance data is defined.</p></li>
  <li><p>Be simple enough for the existing base of HTML authors to quickly get up 
    to speed.</p></li>
  <li><p>Be compatible (to the extent reasonably possible) with existing form processing.</p></li>
  
</ul>
</div>
</div>

<div class="div2">
<h3><a name="rpm-properties"></a>1.2 XForms Properties</h3>

<p>For each <code>xform</code> element, the XForms Processor maintains 
  a set of read-write properties, as described here. These properties are available to all
  expressions in the <a title="" href="#">containing document</a>.</p>
<ul>
  
  
  
  
  <li><p><code>immediate-refresh</code></p></li>
  <li><p><code>immediate-revalidate</code></p></li>
  <li><p><code>immediate-recalculate</code></p></li>
  <li><p><code>use-nil</code></p></li>
</ul>
<p><code>immediate-refresh</code>  controls whether changes in the 
  instance data are immediately updated in the UI</p>
<p><code>immediate-revalidate</code>  controls whether changes in 
  the instance data immediately trigger a validation</p>
<p><code>immedate-recalculate</code> controls whether changes in 
  the instance data immediately trigger a recalculation</p>
<p><code>use-nil</code> controls whether XML Schema Instance nils 
  are placed in the instance data</p><p>Additionally, the following properties are available for reading (but not modification). These properties are available to all expressions in the containing document.</p><ul>
  <li><p><code>version</code></p></li>
  <li><p><code>conformance-level</code></p></li>
  
  <li><p><code>timezone</code></p></li>
  
  
  
  
</ul><p><code>version</code>  is defined as the string "1.0" for 
  XForms 1.0</p>
<p><code>conformance-level</code> strings are defined later in this chapter</p>

<p><code>timezone</code>  strings are signed integers representing the 
  number of minutes offset from GMT</p>


</div>

<div class="div2">
<h3><a name="rpm-events"></a>1.3 Events</h3>
<p>XForms uses an events system as defined in <a href="#">[ref-dom2-events]</a>,
with a Capture phase, arrival at the Event Target, and then a Bubbling Phase.</p>

<p>Events fall into different groupings. One class of events indicates that some 
  processing is about to happen. That processing may be halted by the event handler:</p>
<ul>
  <li><p><code>xforms-submit</code></p></li>
  <li><p><code>xforms-reset</code></p></li>
  <li><p><code>xforms-value-changing</code></p></li>
  <li><p><code>xforms-interactive-value-changing</code></p></li>
  <li><p><code>xforms-instance-changed</code></p></li>
</ul>
<p>Another class of events indicates that some processing has already happened 
  or is in progress. Such processing can not be halted by the event hander:</p>
<ul>
  <li><p><code>xforms-construct</code></p></li>
  <li><p><code>xforms-destruct</code></p></li>
  
  <li><p><code>xforms-initialize</code></p></li>
  <li><p><code>xforms-exception</code></p></li>
</ul>
<p>Finally, certain events are used by the author or the XForms Processor to cause 
  processing to happen:</p>
<ul>
  <li><p><code>xforms-recalculate</code></p></li>
  <li><p><code>xforms-refresh</code></p></li>
</ul>
<p>Unless otherwise noted, the target node for all events is the <code>xform</code> 
  element. When a containing document has multiple <code>xform</code> 
  elements, the binding is used to determine which <code>xform</code> 
  element is used.</p>
  
<p>The Working Group is using pre-defined generic event handling, defined in <a href="#">[ref-xhtml-events]</a>, additionally defining a set of XForms-specific actions.</p>
</div>



<div class="div2">
<h3><a name="rpm-processing"></a>1.4 XForms Processing</h3>

<div class="div3">
<h4><a name="rpm-processing-init"></a>1.4.1 Initialization/Resume</h4>

<p>The following describes the initialization process for XForms. Initialization 
  must occur before any other processing. For each <code>xform</code> 
  element in the containing document, in document order, the following processing 
  occurs:</p>
<ol>
  <li><p> An <code>xforms-construct</code> event is fired; this is the place for 
    authors to handle any initialization tasks.</p></li><li><p>Instance data is constructed (<a href="#"><b>???</b></a>).</p></li>
  
  <li><p>An <code>xforms-initialize</code> event is fired. A handler for this event could perform form initialization tasks such as a database lookup.</p></li>
  <li><p>A recalculation (<a href="#"><b>???</b></a>) takes place.</p></li>
  <li><p>A UI refresh (<a href="#"><b>???</b></a>) takes place.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-instance"></a>1.4.2 Instance Data Construction</h4><p>The following steps describe how the instance data associated with each <code>xform</code> element is constructed. Of the following options, the first applicable option is chosen. Only one of the following applies:</p><ol>
  <li><p>If an <code>instance</code> element is present and contains non-whitespace child nodes, the contents of the <code>instance</code> element are copied into the instance data tree, based on the infoset mappings defined in the XPath <a href="#">[ref-xpath-1.0]</a>data model.</p></li><li><p>If an <code>instance</code> element is present and contains a reference to non-local 
    initial instance data, it is retrieved by traversing the link to it, then copied into the instance data as described above.  A remote instance that
    is unretrievable for any reason is ignored, in which case an 
    XForms Processor <b>may</b> issue a warning.</p></li>
  <li><p>If  an <code>instance</code> element is not present, then a default instance data configuration is produced, according to the following rules:
  </p><ol>
      <li><p>Each form control bound to the 
        <code>xform</code> element currently being processed is visited 
        in document order. Each form control's binding expression is 
        evaluated.</p></li>
      <li><p>If the instance data item 
        result of evaluating the binding expression doesn't already exist, it is 
        created, and if the <code>use-nil</code> 
        property is true, populated with a nil value (an <code>xsi:nil="true"</code> attribute). Note that  only 
        elements can hold nil values. The form control receives a default
        blank value. The algorithm for creating instance data items is 
        as follows: For each location step in the canonical binding expression,
        from left to right, where no matching node exists in the
        instance data, a new node is inserted.</p><div class="issue"><p class="prefix"><a name="creating-instance-nodes"></a><b>Issue (creating-instance-nodes):</b></p><p>The algorithm for creating instance nodes is under discussion, with one possibility being ignoring the path information, using only the local name, in a flat list.</p></div></li>
  </ol></li><li><p>If none of the above options are fulfilled, this is an error condition, and the XForms Processor <b>must</b> stop processing with an error message.</p></li></ol></div><div class="div3">
<h4><a name="rpm-processing-navorder"></a>1.4.3 Navigation Sequence Algorithm</h4>

<p> Navigation is determined on a containing document-wide basis. The navigation sequence 
  is determined as follows:</p>
<ol>
  <li><p> Those form controls that support <code>navindex</code> and assign a positive 
    value to it are navigated first. Navigation proceeds from the form control 
    with the lowest <code>navindex</code> value to the form control with the highest 
    value. Values need not be sequential nor must they begin with any particular 
    value. form controls that have identical 
    <code>navindex</code> values should be navigated in document order.</p></li>
  <li><p> Those form controls that do not supply <code>navindex</code> or supply 
    a value of "0" are navigated next. These form controls are navigated in document 
    order.</p></li>
  <li><p>Those form controls that are disabled, hidden, or on a non <code>relevant</code> 
    subtree are assigned a relative order in the overall sequence but do not participate 
    as navigable controls.</p></li>
  <li><p> The navigation sequence past the the last form control (or before the first) 
    is undefined. XForms Processors may cycle back to the first/last control, 
    remove focus from the form, or other possibilities.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-interact"></a>1.4.4 Interactivity</h4>

<p>XForms provides similar processing to the HTML <code>onChange</code> event. 
  As users indicate completion of a form control by navigating away the following 
  occurs:</p>
<ol>
  <li><p> If the display value has changed since the user last navigated to the form 
    control, an <code>xforms-value-changing</code> event is fired. If the 
    display value hasn't changed, processing for this event ends.
  </p><ol>
      <li><p>Any listener may prevent default processing (one option under consideration 
        provides a <code>&lt;stopevent/&gt;</code> action), which will end event 
        processing immediately after the Capture and Bubbling phases. Alternatively, 
        a listener may perform a custom translation from display value to canonical 
        value. Any listener may have side-effects that modify any instance data item,
        in which case the modified instance data items must be marked "dirty".</p></li>
    <li><p>Default processing is to convert the display value of the form control 
      to the canonical value as specified in the Datatypes chapter. Default processing 
      should automatically take into account regional settings (if any), such 
      as decimal character symbol, date formats, etc.</p></li>
  </ol></li>
  <li><p>If the <code>immediate-revalidate</code> property is true, all validations
    (<a href="#"><b>???</b></a>) bound to the form control are run. Note that validation is performed against 
    the canonical value, not the display value.
  </p><ol>
    <li><p>If any validation fails, the user <b>must</b> be notified, and 
      <b>may</b> not be allowed to navigate away from the control. The 
      invalid entry in the form control <b>should</b> be preserved. 
      The associated instance data item is left unchanged, thereby ending processing 
      for this event.</p></li>
  </ol></li>
  <li><p>The instance data item is updated with the new value, and marked "dirty".</p></li>
  <li><p> If the <code>immediate-recalculate</code> property is true, a recalculate
  (<a href="#"><b>???</b></a>) occurs to perform any defined calculations.</p></li>
  <li><p>If the <code>immediate-refresh</code> property is true, a refresh (<a href="#"><b>???</b></a>) 
    occurs to update any form controls that might be dependent on this newly changed 
    value.</p></li>
</ol>
<p>Certain form controls allow interactive response without finalizing on a value. 
  Examples of this include edit boxes (users can type various characters before 
  "tabbing out") and slider controls (users can be continuously adjusting 
  the value before releasing at a certain value). Interactive temporary values 
  such as this are expressly allowed to be "invalid", that is outside 
  the permissible value space. This is because incomplete data may be present 
  while the user is entering transitional values.</p>
<p>Example: A partially entered currency value of "U" is not valid because 
  it doesn't (yet) have 3 characters. This is permitted temporarily, as long as 
  the user remains on the form control. XForms Processors with sufficient processing 
  resources would typically update/refresh on every character. Resource-constrained 
  XForms Processors would typically only update/refresh on the final value.</p>
<ol>
  <li><p> Any time the display value of a form control changes (such as through character 
    or cut/paste activities), even without indication that this is a final value, 
    an <code>xforms-interactive-value-changing</code> event is fired. Resource-constrained 
    XForms Processor implementations <b>may</b> choose to ignore all 
    such events.
  </p><ol>
    <li><p>Event listeners may prevent default processing.</p></li>
    <li><p>Otherwise, default handling is as follows: The current form control is 
      revalidated (<a href="#"><b>???</b></a>). This is for internal purposes only, 
      and happens regardless of the <code>immediate-revalidate</code> setting. 
      If all validations on the form control are successful, the instance data item
      is updated, and marked "dirty". If any validations fail (indicating 
      a transitional value) all form controls bound to the same instance data item
      <b>may</b> be directly updated with the display value. Otherwise, 
      the following occurs:</p></li>
    <li><p>If the <code>immediate-recalculate</code> property is true, a recalculation
      (<a href="#"><b>???</b></a>) occurs to perform any defined calculations.</p></li>
    <li><p>If the <code>immediate-refresh</code> property is true, a refresh (<a href="#"><b>???</b></a>) 
      occurs to update any form controls that might be dependent on this newly 
      changed value.</p></li>
  </ol></li>
</ol>
<p>Implementations that choose to respond <code>xforms-interactive-value-changing</code> 
  are expected optimize processing (for instance not flashing the entire screen 
  for each character entered, etc.).</p>
</div>

<div class="div3">
<h4><a name="rpm-processing-recalc"></a>1.4.5 Recalculation Algorithm</h4>

<p>XForms Processors are free (and encouraged) to skip or change any steps in 
  this algorithm, as long as the end result is the same. Each form control may 
  have a model item property <code>priority</code> value, which is the main factor 
  in determining calculation order.</p>
<p>Following is the default handling for an <code>xforms-recalculate</code> event:</p>
<ol>
  <li><p>Each model item with a bound <code>calculate</code> model item property
  is visited in <b>calculation order</b>, which is defined as follows:
  </p><ol>
    <li><p>Those model items that are bound to a <code>priority</code> and assign 
      a positive integer to it are computed first. Computation proceeds from the 
      model item with the lowest bound <code>priority</code> to the model item 
      with the highest bound <code>priority</code>. Values need not be sequential 
      nor must they begin with any particular value. Model items with the same bound
      <code>priority</code> value are computed in document order.</p></li>
    <li><p>Those model items not bound to a priority or bound to one with the value 
      "0" are computed next. These model items are computed in document 
      order.</p></li>
  </ol></li>
  <li><p>For each model item, the expression in the <code>calculate</code> model item 
  property is evaluated. Any instance data item changes as a result of 
    this are marked with a "dirty" flag.</p></li>
  <li><p>The instance data item bound to the model item is updated with the result 
    of the <code>calculate</code> expression, and the "dirty" flag is set.</p></li>
</ol>
</div>

<div class="div3">
<h4><a name="rpm-processing-refresh"></a>1.4.6 UI Refresh Algorithm</h4>
<p>Following is the default handling for an <code>xforms-refresh</code> event:</p>
<ol>
  <li><p> For purposes of UI refresh, the instance data as it exists at the 
    beginning of processing the <code>xforms-refresh</code> event is used.</p></li>
  <li><p> Each form control is visited in refresh order, which is defined as follows:
  </p><ol>
    <li><p>Those form controls that have a given or computed navigation sequence 
      value are visited first, in the navigation sequence.</p></li>
    <li><p>Those form controls outside the navigation sequence are visited next. 
      These form controls are visited in document order.</p></li>
  </ol></li>
  <li><p>For each form control, the <code>relevant</code> constraint is evaluated, 
    which might result in the form control being disabled/hidden/etc. as specified 
    in the chapter <a href="#"><b>???</b></a>.</p></li>
  <li><p>For each form control, the binding expression is evaluated. If the
  instance data indicates that the instance data item is not "dirty", processing for
  that particular form control completes.
  </p><ol>
    <li><p>Otherwise, if the instance data item is "dirty", an <code>xforms-instance-changed</code> 
      event is fired.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are free to 
      compute a new display value.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are prohibited 
      from directly updating any form controls present.</p></li>
    <li><p>Listeners to the <code>xforms-instance-changed</code> event are prohibited 
      from altering any portion of the instance data. To attempt to do so 
      results in an <code>xforms-exception</code> being fired.</p></li>
    <li><p>Listeners may prevent the default processing of the <code>xforms-instance-changed</code> 
      event.</p></li>
    <li><p>Default processing is to convert the canonical value into a display value, 
      taking into account regional settings (if any) such as decimal separator 
      character, etc.</p></li>
  </ol></li>
  <li><p>The form control is updated with the display value.</p></li>
  <li><p>After all form controls have been updated, all "dirty" flags in 
    the instance data are cleared.</p></li>
</ol>

<div class="note"><p class="prefix"><b>Note:</b></p><p>Editor's Note: Still to be addressed is the processing when a datatype facet 
  or model item property are changed--what gets marked "dirty"?; what 
  gets recalculated?; what gets revalidated?; what gets refreshed?</p></div>
</div>

<div class="div3">
<h4><a name="rpm-processing-revalidate"></a>1.4.7 Revalidation Algorithm</h4>

<p>Revalildation always occurs within the scope of a context form control.
Following is the revalidation process:</p>
<ol>
  <li><p> The bound instance data item is checked against any bound XForms Datatype 
    constraining facets. If any fail, the context form control is considered invalid.</p></li>
  <li><p> The bound instance data item is checked against any bound Schema Datatype 
    constraining facets. If any fail, the context form control is considered invalid.</p></li>
  <li><p> If a <code>validate</code> model item property is bound to the context 
    form control, the expression within is evaluated. If it evaluates to false, 
    the context form control is considered invalid.</p></li>
  <li><p> If the context form control is invalid, the XForms Processor <b>must</b> 
    notify the user. The XForms Processor <b>may</b> combine messages 
    before presentation to the user.</p></li>
</ol>
</div>
</div>

<div class="div2">
<h3><a name="rpm-send"></a>1.5 Submit and Reset</h3>

<p>The form filling experience ends with submitting the form, 
  or starting over. The XForms processing for these events are covered here. The following sections describe how to instance data is prepared for submission.</p>


<div class="div3">
<h4><a name="rpm-send-submit"></a>1.5.1 Submit</h4>

<p>In response to an <code>xforms-submit</code> event, the following takes place:</p>
<ol>
  <li><p>Event listeners may prevent default processing of the submit request. Otherwise, 
    default handling as described below occurs.</p></li>
  <li><p>Every form control is revalidated (<a href="#"><b>???</b></a>). Any invalid 
    values <b>must</b> be reported to the user and submit processing 
    <b>must</b> not continue.</p></li>
  <li><p>A subset or all of the instance data is selected based on
  the binding expression used to invoke the submit request. The selected nodes and all children are selected for serialization as submitted data.
  If no <code>ref</code> attribute is specified, all nodes in the instance data are selected by default. </p><ol>
    <li><p>If the instance data selection results in an empty node-set, the submit 
      <b>must</b> be aborted and submit processing <b>must</b> 
      not continue.</p></li>
  </ol></li>
  <li><p>Instance data is serialized according to one of the processes defined below.</p></li>
  <li><p>Instance data is delivered over the network as an HTTP POST.</p></li><li><p>Upon successful delivery of the submit data, an <code>xforms-destruct</code> event is fired and form processing shuts down.</p></li><li><p>The response page sent by the server replaces the current containing document.</p></li>
</ol>
<div class="issue"><p class="prefix"><a name="method-strings"></a><b>Issue (method-strings):</b></p><p>We have yet to define the method strings (e.g. <code>method="post"</code> in XHTML)</p></div></div>

<div class="div3">
<h4><a name="rpm-send-reset"></a>1.5.2 Reset</h4>
<p>In response to an <code>xforms-reset</code> event, the following takes place:</p>
<ol>
  <li><p>Event listeners may prevent default processing of the reset request. Otherwise, 
    default handling as described below occurs.</p></li>
  <li><p>A subset or all of the instance data is selected based on the
  binding expression used to invoke the suspend request.
   The selected nodes and all children are selected for resetting.
  If no <code>ref</code> attribute is specified, all nodes in the instance data are selected by default. </p><ol>
    <li><p>If the instance data selection results in an empty node-set, the reset 
      has no effect.</p></li>
  </ol></li>
  <li><p>New instance data for the selected instance data is prepared, based on the <code>instance</code> element associated with the current <code>xform</code> element, according to 
    the rules for initialization above.</p></li>
  <li><p>The selected instance data is replaced with the new instance data.</p></li>
</ol>
</div>


</div>  
  
<div class="div2">
<h3><a name="rpm-serialize"></a>1.6 Serialization Formats for  Instance Data</h3><div class="div3">
<h4><a name="rpm-send-urlencoded"></a>1.6.1 application/x-www-form-urlencoded</h4>

<p>This format is intended to facilitate the integration of XForms into HTML forms 
  processing environments, and represents an extension of the <a href="#">[ref-xhtml-1.0]</a>
  form content type of the same name with extensions to expresses the hierarchical
  nature of instance data.</p>
<p>This format is not suitable for the persistence of binary content. Therefore, 
  it is recommended that XForms capable of containing binary content use either 
  the multipart/form-data (<a href="#"><b>???</b></a>) or text/xml (<a href="#"><b>???</b></a>) formats.</p>
<div class="issue"><p class="prefix"><a name="issue-urlencoding-mods"></a><b>Issue (issue-urlencoding-mods):</b></p><p class="prefix"><b>Modifications to urlencoding process</b></p>
<p>The urlencoding technique given here does not exactly match how legacy
  implementations produce urlencoded data. (In particular, we are adding contextual
  information with slashes and multiple location-steps) Will this approach interfere
  with legacy implementations?</p></div>
<div class="issue"><p class="prefix"><a name="issue-utf8-encoding"></a><b>Issue (issue-utf8-encoding):</b></p><p>Under discussion 
  is the intent to have the data be UTF8 encoded; however, this is dependent upon 
  IETF developments. Would UTF8 meet the needs of the forms community?</p></div>
<p>The steps for building this persistence format is as follows:</p>
<ol>
  <li><p>Prepare a new UTF-8 encoded string buffer to hold the persisted instance
  data.</p></li>
  <li><p>Beginning with the root element of the  instance data, iterate
    over the selected content of the instance data in document order and build an ordered set of
    strings by performing the following steps: 
    
  </p><ol>
      <li><p>For each element with an attribute, append to the set a string of the 
        format "<em>path</em>=<em>value</em>" where
        <em>path</em> is the canonical binding expression that refers to each
        attribute, and <em>value</em> is the character content of each attribute
        (urlencoded if necessary).</p></li>
      <li><p>For each element enclosing character content, append to the set a string 
        of the format "<em>path</em>=<em>value</em>" where <em>path</em> is 
        the canonical binding expression that refers to the element, and
        <em>value</em> is the character content of the element (urlencoded if
        necessary).</p></li>
      <li><p>For each element enclosing element content, continue the iteration.</p></li>
    </ol></li>
  <li><p>Append the strings from the ordered set together, delimiting the strings 
    with an ampersand '&amp;' character, and place the result of the append into 
    the UTF-8 encoded string buffer.</p></li>
</ol>
<p>Example:</p>
<div class="example">
<h5>Example: application/x-www-form-urlencoded</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>/PersonName/@title=Mr&amp;/PersonName/FirstName=Roland</pre></td></tr></table>
<p>This format consists of sets of a canonical binding expression paired with a value.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;PersonName title="Mr"&gt;
  &lt;FirstName&gt;Roland&lt;/FirstName&gt;
&lt;/PersonName&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p>
</div>
</div>

<div class="div3">
<h4><a name="rpm-send-multipart"></a>1.6.2 multipart/form-data</h4>

<p>This format is intended to facilitate the integration of XForms into HTML forms 
  processing environments, and represents an extension of the <a href="#">[ref-xhtml-1.0]</a>
  form content type of the same name that expresses the hierarchical 
  nature of instance data. Unlike the application/x-www-form-urlencoded (<a href="#"><b>???</b></a>) 
  format, this format is suitable for the persistence of binary content.</p>
<p>This format follows the rules of all multipart MIME data streams for form data as outlined 
  in <a href="#">[ref-rfc-2388]</a>, with the "name" of each part being the canonical binding expression that references the selected instance data item.</p>

<p>Example:</p>
<div class="example">
<h5>Example: multipart/form-data</h5>

<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
  Content-Disposition: form-data; name="/PersonName/@title"

Mr
--AaB03x
  Content-Disposition: form-data; name="/PersonName/FirstName"

Roland
--AaB03x

...Possibly more data...

--AaB03x-</pre></td></tr></table>
 <p>This format consists of sets of a canonical binding expression paired 
   with a value.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;PersonName title="Mr"&gt;
  &lt;FirstName&gt;Roland&lt;/FirstName&gt;
&lt;/PersonName&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p>
</div>


</div>

<div class="div3">
<h4><a name="rpm-send-xml"></a>1.6.3 text/xml</h4>
<p>This format permits the expression of the instance data as an XML-based format 
  that is straightforward to process with off-the-shelf XML processing tools. 
  In addition, this format is suitable for the persistence of binary content.</p>
<p>The steps for building this persistence format is as follows:</p>
<ol>
  <li><p>Prepare a new empty XML document to hold the persisted instance data.</p></li>
  <li><p>If the selected content of the instance data corresponds to a singly-rooted data
  structure, serialize, into the XML document the entire content of the selected instance
  data, beginning at the root node.</p></li>
  <li><p>If the selected content of the instance data corresponds to a multiply-rooted data
  structure (such as a general parsed entity), an unqualified root element of &lt;<code>Envelope</code>&gt;,
  with an unqualified element &lt;<code>Body</code>&gt; is inserted into the XML document, and the
  selected instance data serialized into the content of the &lt;<code>Body</code>&gt; element.</p></li>
</ol>

<div class="div4">
<h5><a name="rpm-send-xml-binary"></a>1.6.3.1 Binary Content</h5>

<p>Instance data items of the types xsd:base64Binary and xsd:hexBinary are specifically
allowed, and are included in the serialized data according to the rules defined in
<a href="#">[ref-xschema-2]</a></p>
<div class="issue"><p class="prefix"><a name="issue-instance-metadata"></a><b>Issue (issue-instance-metadata):</b></p><p>Where a value 
  within the instance data represents binary content, can we store meta-information
  with an <code>xform:mediaType</code> attribute reflecting the appropriate content
  type (e.g., "image/jpg")?</p></div>
</div>
</div></div><div class="div2">
<h3><a name="rpm-conform"></a>1.7 Conformance</h3>
<p>XForms are being designed for use on hardware platforms of all sizes, from tiny handheld devices to high-powered servers. Clearly, a one-size-fits-all approach has its drawbacks. For this reason, the XForms Working Group has begun specifying two conformance levels for XForms Processors, documents, and authoring tools.</p>
<div class="div3">
<h4><a name="rpm-conform-basic"></a>1.7.1 XForms Basic</h4><p>This conformance level will be suitable for devices with limited computing power, such as mobile phones, handheld computers, and appliances. This conformance level will depend on a subset of XML Schema, and will not include any resource-intensive features. Implementations of XForms Basic should return "<code>basic</code>" for the <code>conformance-level</code> property.</p></div><div class="div3">
<h4><a name="rpm-conform-full"></a>1.7.2 XForms Full</h4><p>


This conformance level will be suitable for more powerful forms processing, such as might be found on a standard desktop browser or a server. Implementations of XForms Full should return "<code>full</code>" for the <code>conformance-level</code> property.</p><p>Additional details will be provided in future revisions of this chapter.</p></div></div>

</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="binding"></a>1 Binding</h2> <div class="div2">
<h3><a name="binding-intro"></a>1.1 Introduction</h3> 
<p><a title="" href="#">Binding</a> is the glue that connects the 
  separate pieces of XForms--the <a title="" href="#">XForms Model</a>,
  <a title="" href="#">instance data</a>, and <a title="" href="#">form control</a>s.
  The binding is independent of the user interface language used.</p>
<p>Binding is specified through the use of 
  <a title="" href="#">binding expression</a>s. The syntax 
  and details of binding expressions are defined in the chapter <a href="#"><b>???</b></a>. 
  This chapter describes the wider topic of how binding expressions are used within XForms.</p>
<p>A future revision of this chapter will address binding 
  across XForms Models, for instance declaring an "address" in one XForms Model
  and referencing it from another.</p>

</div>

<div class="div2">
<h3><a name="binding-attributes"></a>1.2 Binding Attributes</h3>
<p>XForms defines an attribute <code>ref</code> that can be placed on any form 
  control. Note that when placed on form 
  controls outside of XForms, it must be appropriately namespace-qualified. The value 
  of the attribute is a binding expression, 
  based on <a href="#"><b>???</b></a>, that links the form control
  to a particular location in the instance data (and therefore a particular model 
  item). For example:</p>

  <div class="example">
<h5>Example: XForms User Interface Markup with Binding Attributes</h5>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="binding-expression"&gt;
   &lt;xform:caption&gt;Your first name&lt;/xform:caption&gt;
&lt;/xform:textbox&gt;</pre></td></tr></table>

<p>The <code>ref</code> attribute links the form 
        control to the instance data and XForms Model declared elsewhere 
        in the <a title="" href="#">containing document</a>.</p></div>
        
<p>This can also be used on non-XForms form controls, for instance XHTML:</p>

<div class="example">
<h5>Example: XHTML with Binding Attributes</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;html:input type="text" name="..." xform:ref="binding-expression"/&gt;</pre></td></tr></table>
<p> Here the <code>ref</code> attribute links an XHTML form 
    control to the instance data and XForms Model contained elsewhere 
    in the containing document. Note that the <code>html:</code> prefix is 
    used here to represent the XHTML namespace.</p></div>

<p>Details on the operation of binding expressions are given throughout the rest of this chapter.</p>
</div>

<div class="div2">
<h3><a name="binding-direct"></a>1.3 Direct Binding</h3>
<p>When a containing document has only a single XForms 
  Model and only a single set of instance data, binding is simpler because there 
  is no possibility of ambiguity as to which XForms 
  Model and instance data will participate. The following syntax can be used for the
  binding expression:</p>
<ul>
  <li><p>A binding expression that evaluates to a node-set in the instance 
    data. If the node-set contains more than one node, only the first node is used. If the
    node-set contains zero nodes, the binding expression is invalid.</p></li>
</ul>
<p>For example:</p>

<div class="example">
<h5>Example: Binding Expression</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a path through the instance data to the desired location.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;orderForm&gt;
  &lt;shipTo&gt;
    &lt;firstName&gt;value&lt;/firstName&gt;
  &lt;/shipTo&gt;
&lt;/orderForm&gt;</pre></td></tr></table>
<p>Here is the matching instance data for the above example.</p></div>

<p>A special case applies when binding to 
  an element in the instance data that 
  contains an attribute of type <code>xsd:ID</code>. In this case, an XPath function 
  <code>id()</code>, can be used:</p>

<div class="example">
<h5>Example: Binding Expression with XPath id() Syntax</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>

<p>Here the <code>ref</code> attribute specifies a link to an instance 
          data element with an id of <code>myfirstname</code>.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;a&gt;
  &lt;b id="myfirstname"&gt;value&lt;/b&gt;
&lt;/a&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>For this syntax to be valid, the following conditions must be true:</p>
<ul>
  <li><p>The instance data must be included 
    in the same document as the XForms User Interface</p></li>
  <li><p>Every referenced element in the instance 
    data must be marked with a valid ID (i.e. the ID is unique throughout 
    the whole document)</p></li>
  
</ul>
<p>Note also that:</p>
<ul>
  <li><p>this method is limited, because it requires exactly one instance, decorated 
    with ID attributes.</p></li>
  <li><p>It is still legal to have elements without ID attributes in the instance data.</p></li>
  <li><p>Only elements can be addressed</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-indirect"></a>1.4 Indirect Binding</h3>
<p>In situations where a form is designed by collaboration (such as between a 
  graphic designer and a database/XML specialist) it is desirable to locate all 
  binding expressions in a single area in the containing document. XForms allows 
  the binding expression to appear 
  in a separate element <code>bind</code>, a child of the <code>xform</code> element.</p>
<p>The attributes of <code>bind</code> are <code>id</code> of type <code>xsd:ID</code> 
  and <code>ref</code> which takes a binding expression. When a binding expression
  is defined this way, the form control 
  can reference the <code>id</code> of the <code>bind</code> element, 
  as seen here:</p>
  
<div class="example">
<h5>Example: Binding Expression Using Indirection</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a link to a binding 
          expression defined elsewhere.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:bind id="myfirstname" ref="orderForm/shipTo/firstName"/&gt;
&lt;xform:instance&gt;
  &lt;orderForm&gt;
    &lt;shipTo&gt;
      &lt;firstName&gt;value&lt;/firstName&gt;
    &lt;/shipTo&gt;
  &lt;/orderForm&gt;
&lt;/xform:instance&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>This accomplishes the following:</p>
<ul>
  <li><p>It is no longer necessary to add IDs to the instance.</p></li>
  <li><p>The binding mechanism is <em>independent</em>
    of the schema and user interface mechanisms.</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-multiple"></a>1.5 Multiple Forms per Page</h3>
<p>One design goal of XForms is to support multiple forms per page. This is accomplished 
  by having multiple <code>xform</code> elements within a containing document. 
  Each <code>xform</code> element might have a separate XForms Model or 
  instance data defined. This makes binding slightly more complex, because 
  the correct <code>xform</code> element needs to be referenced.</p>
<p>By default, binding expressions are based on the instance data
  associated with the first <code>xform</code> element in document 
  order. To refer to the contents of subsequent <code>xform</code> elements, 
  these must be decorated with <code>id</code> attributes of type <code>xsd:ID</code>. 
  Attached to the form control element, an additional attribute <code>xform</code> 
  serves to set the context node for the attached binding expression to the
  instance data or XForms Model associated with 
  the <code>xform</code> element with the matching <code>id</code>.</p>
<p>For example:</p>
<div class="example">
<h5>Example: Binding Expression Specifying Non-default <code>xform</code> Element</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox xform="b" ref="/orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>

<p>Here the <code>xform</code> and <code>ref</code> attributes specify 
          a binding to the instance data and XForms Model.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform id="b"&gt;
  &lt;xform:model&gt;
    ...
  &lt;/xform:model&gt;
  &lt;xform:instance&gt;
    &lt;orderForm xmlns="..."&gt;
      &lt;shipTo&gt;
        &lt;firstName&gt;value&lt;/firstName&gt;
      &lt;/shipTo&gt;
    &lt;/orderForm&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table></div>
<p>Scoped resolution of binding expressions, as defined in the chapter
  <a href="#"><b>???</b></a> can in some cases be used to avoid repetitive 
  uses of the <code>xform</code> attribute.</p>


  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="concepts"></a>1 Concepts</h2> 
<p>This informative chapter provides an easily approachable description of the design
  of XForms, describing the major components and how they relate. Not every feature of
  XForms is covered here. For a complete, normative description of XForms, refer to the
  remainder of this document.</p> 
  <div class="div2">
<h3><a name="concepts-purpose-presentation"></a>1.1 Purpose and Presentation</h3>
  <p>For explanatory purposes, a form can be considered to consist of 'purpose', 'presentation',
  and 'data'. Some examples:</p>
  <table width="100%"><thead><tr><td><b>Purpose</b></td><td><b>Presentation</b></td><td><b>Data</b></td></tr>
  </thead><tbody>
  <tr><td>Data collection</td><td>Arrangement of form controls</td><td>Registration information</td></tr>
  <tr><td>Time card</td><td>How dates are entered</td><td>Days and hours worked</td></tr>
  <tr><td>Order form</td><td>How to render the form controls on small devices</td><td>Order, shipping, and payment info</td></tr>
  <tr><td>Information Please</td><td>How the form integrates with a Web site</td><td>User contact information</td></tr>
  </tbody></table>
  
  <p>The design of existing Web forms didn't separate the purpose from the presentation
  of a form, and additionally offered only a restricted representation for data captured through the form. This is the primary difference between XForms and previous form technologies.</p></div><div class="div2"> 
    
<h3><a name="concepts-xhtml"></a>1.2  Current Approach: XHTML</h3> 
  <p> Take for instance a simple eCommerce form authored in XHTML 1.0:</p>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;
&lt;body&gt;
&lt;form action="http://example.com/submit" method="post"&gt;
  &lt;span&gt;Select Payment Method: &lt;/span&gt;
  &lt;input type="radio" name="paytype" value="cash"&gt;Cash&lt;/input&gt;
  &lt;input type="radio" name="paytype" value="credit"&gt;Credit&lt;/input&gt;&lt;br/&gt;
  &lt;label&gt;Credit Card Number: &lt;input type="text" name="cc"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;label&gt;Expiration Date: &lt;input type="text" name="exp"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table><p>A browser might render this form as follows:</p>
<img src="images/concepts-xhtml.png" alt="screen shot of a graphic rendering">
<p>This form makes no effort to separate purpose (data collection semantics) from  presentation (the <code>&lt;input&gt;</code> form controls), and offers no
control over the basic name/value formatting of the resulting data. XForms greatly
improves the expressive capabilities of electronic forms.</p>
</div>
<div class="div2">
<h3><a name="concepts-xfu"></a>1.3 Stepping Up to XForms</h3>
<p>XForms are comprised of separate sections that describe what the form does, and how
the form is to be presented. This allows for flexible presentation options, making it possible for classic XHTML
form controls, as well as other form control sets such as WML to be leveraged, as
shown here.</p>
<img src="images/arch1.jpg" alt="puzzle pieces; 'XForm Model' on the left, on the right 'XForms User Interface', 'XHTML', 'WML', and a stack of 'proprietary' pieces">
<p>The simplest case involves authoring only the new XForms
<a title="" href="#">form control</a>s, leaving out the other sections of the form. To convert the previous form into
XForms this way, an <code>xform</code> element is needed in the <code>head</code> section of
the document:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>With these changes to the containing document, the previous example could be rewritten
like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne xmlns="http://www.w3.org/2001/06/xforms" ref="paytype"&gt;
  &lt;caption&gt;Select Payment Method&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="cash"&gt;Cash&lt;/item&gt;
    &lt;item value="credit"&gt;Credit&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="cc"&gt;
  &lt;caption&gt;Credit Card Number&lt;/caption&gt;
&lt;/textbox&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="exp"&gt;
  &lt;caption&gt;Expiration Date&lt;/caption&gt;
&lt;/textbox&gt;
&lt;submit xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>Notice the following features of this design:</p>
<ul><li><p>The user interface is not hard-coded to use radio buttons. Different devices
  (such as a voice browser) can render the concept of "selectOne" as appropriate.</p></li>
<li><p>Form controls always have captions directly associated with them, as child elements.</p></li>
<li><p>There is no need for an enclosing <code>form</code> element.</p></li>
<li><p>Element names for form controls have been changed: <code>textbox</code> is a specific
element, rather than a <code>type</code> attribute on <code>input</code>, as in XHTML.</p> </li>
<li><p>Data entered through the form controls ends up submitted as XML.</p></li>
</ul>
<p>With these changes, the <a title="" href="#">XForms Processor</a>
will be able to directly submit XML instance data. The XML is constructed by creating a root
element with child elements reflecting the names given to each form control.  For instance,
the submitted data might look like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- envelope, generated separately --&gt;
&lt;Envelope&gt;
  &lt;Body&gt;</pre></td></tr></table><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>    &lt;!-- serialized instance data --&gt;
    &lt;paytype&gt;Credit&lt;/paytype&gt;
    &lt;cc&gt;12354677890123456&lt;/cc&gt;
    &lt;exp&gt;04-2001&lt;/exp&gt;</pre></td></tr></table>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;!-- envelope, generated separately --&gt;
  &lt;/Body&gt;
&lt;/Envelope&gt;</pre></td></tr></table></div>
<div class="div2">
<h3><a name="concpts-instance"></a>1.4 Providing XML Instance Data</h3>
<p>Understandably, authors will often desire greater control over exact construction of the
submitted instance data. One common case might be submitting to a server XML data that is
validated against a predefined DTD or XML Schema.</p>
<p>XForms keeps track of the state of the partially filled form through
<a title="" href="#">instance data</a>, which provides an outline
of the desired  XML data, including namespace information. The instance data starts
off with the initial values for the form, is updated as the user fills the form, and
eventually is serialized and submitted. The initial instance data is taken from the
<code>instance</code> element inside the <code>xform</code> element, defined as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
    &lt;payment type="credit" xmlns="http://commerce.example.com/payment"&gt;
      &lt;cc/&gt;
      &lt;exp/&gt;
    &lt;/payment&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>This design has features worth calling out:</p><ul>
<li><p>There is complete flexibility in the structure of the XML. Notice that the item
  <code>paytype</code> is now expressed as an attribute <code>type</code> of the element
  <code>payment</code>.</p></li>
<li><p>Empty elements <code>cc</code> and <code>exp</code> serve as placeholders in the XML structure,
  and will be filled in with form data provided by the user.</p></li>
<li><p>An initial value (<code>"credit"</code>) for the form control is provided through the
  <code>type</code> attribute in the instance data. In the submitted XML, this initial value will
  be replaced by the user input, if any.</p></li>
<li><p>The instance data provides a unique namespace, which will be used when the XML gets
  submitted.</p></li></ul>
  <p>To connect this instance data with  form controls, the
<code>ref</code> attributes on the form controls need to point to the proper part of the instance
data, using <a title="" href="#">binding expressions</a>:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;selectOne ref="payment/@type"&gt;
  ...
  &lt;inputText ref="payment/cc"&gt;
  ...
  &lt;inputText ref="payment/exp"&gt;</pre></td></tr></table>
<p>Binding expressions are based on XPath <a href="#">[ref-xpath-1.0]</a>, including
  the use of the '@' character to refer to attributes, as seen here.</p>
  </div> 
<div class="div2">
<h3><a name="concepts-model"></a>1.5 The XForms Model</h3>
<p>The earlier XHTML form in <a href="#"><b>???</b></a>. Even in this short form,
there are several aspects that would be desirable to express, but would only be possible
through the addition of unstructured script code:
</p>
<ul><li><p>The credit card information fields <code>cc</code> and <code>exp</code> are
only relevant if the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The credit card information fields <code>cc</code> and <code>exp</code> should be
required when the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The field <code>cc</code> should accept digits only, and should have exactly 14,
15, or 16 digits.</p></li>
<li><p>The field <code>exp</code> should accept only valid month/date combinations.</p></li></ul>
<p>By specifying a 3rd component, the <a title="" href="#">XForms Model</a>,
authors can include rich declarative datatype and validation information in forms.</p>
<table border="1" summary="Editorial note: MJD"><tr><td width="50%" valign="top" align="left"><b>Editorial note: MJD</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">The examples here are sketchy out of necessity; this section
will need to be rewritten after the Schema Basic task force delivers its syntax recommendations.</td></tr></table>
<p>An XForms Model consists of <a title="" href="#">model items</a>, which
include XML Schema datatype information <a href="#">[ref-xschema-2]</a> as well as properties
specific to XForms.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- add to the cc model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:string"
facet pattern of "\d{14,16}"

&lt;!-- add to the exp model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:gYearMonth"</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-multiple"></a>1.6 Multiple Forms per Document</h3>
<p>XForms places no limits on the number of individual forms that can be placed in a single
<a title="" href="#">containing document</a>. When multiple forms share
the same containing document, multiple
<code>xform</code> elements are needed. The first <code>xform</code> element may skip a unique <code>id</code>
attribute (as have all the examples above), but subsequent  <code>xform</code> elements require
an <code>id</code> so that they can be referenced from elsewhere in the containing document.</p>
<p>The other side of the equation is that form controls throughout the document need to specify
which <code>xform</code> element is associated with the instance data to which they bind. This is
accomplished through an <code>xform</code> attribute alongside the <code>ref</code> attribute. The
default for the <code>xform</code> attribute is to refer to the first <code>xform</code> element in
document order.</p><p>To add a second form, an opinion poll, to our commerce example, the
following would be authored in the head section of the XHTML:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
     ...payment instance data...
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;

&lt;xform:xform id="poll"&gt;
  &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table><p>Additionally, the following form control markup in the body:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="pollOption" xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"&gt;
  &lt;caption&gt;How useful is this page to you?&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="0"&gt;Not at all helpful&lt;/item&gt;
    &lt;item value="1"&gt;Barely helpful&lt;/item&gt;
    &lt;item value="2"&gt;Somewhat helpful&lt;/item&gt;
    &lt;item value="3"&gt;Very helpful&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;submit xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>The main difference to note here is the use of <code>xform="poll"</code>,
  which identifies which form the form control binds to.</p></div>
<div class="div2">
<h3><a name="concepts-advancedUI"></a>1.7 Additional User Interface Capabilities</h3>
<p>The visual layout appearance of the initial XHTML forms such as the above example
(<a href="#"><b>???</b></a>) leaves much to be desired. </p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Need extended UI example here</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-complete"></a>1.8 Complete Document</h3>
<p>This chapter presented various bits and pieces of XForms as a tool to help readers
understand the design. Presented here is the entire XHTML+XForms document presented
in one segment.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xform="http://www.w3.org/2001/06/xforms"
      xml:lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;XForms in XHTML&lt;/title&gt;

  &lt;xform:xform&gt;
    &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
    &lt;xform:instance&gt;
      &lt;payment type="credit" xmlns="http://commerce.wizard"&gt;
        &lt;cc/&gt;
        &lt;exp/&gt;
      &lt;/payment&gt;
    &lt;/xform:instance&gt;
  &lt;/xform:xform&gt;

  &lt;xform:xform id="poll"&gt;
    &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
  &lt;/xform:xform&gt;

&lt;/head&gt;
&lt;body&gt;
    ... include advanced UI markup here ...
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="structure"></a>1 Document Structure</h2>
  <p>XForms are an application of XML <a href="#">[ref-xml-1.0]</a>, and have been designed for
  use within other XML vocabularies, in particular XHTML <a href="#">[ref-xhtml-1.0]</a>.
  This chapter discusses some of the high-level features of XForms that 
  allow this specification  to be used with other document types.</p>
  <div class="div2">
    
<h3><a name="structure-namespace"></a>1.1 The XForms Namespace</h3>
    <p>The XForms namespace has the URI: <code>http://www.w3.org/2001/06/xforms</code>. 
  Future revisions are expected to use a different identifier. This document uses  
  the convention of an <code>xform:</code> prefix to represent elements and attributes 
  that are part of the XForms Namespace.</p>
  <p>XForms Processors must use the XML namespaces mechanism <a href="#">[ref-xml-names]</a> 
  to recognize elements and attributes from this namespace. Except where specifically allowed
  by the Schema for XForms, foreign-namespaced elements are not allowed as content of elements
  in the XForms namespace. Foreign-namespaced attributes are, however, allowed on any XForms
  element. The XForms Processor must ignore any foreign-namespaced elements or attributes
  that are unrecognized.</p>
    
  </div>
  <div class="div2">
<h3><a name="structure-elements"></a>1.2 XForms Elements</h3><div class="div3">
<h4><a name="N1002B"></a>1.2.1 xform</h4><p>The <code>xform</code> element is used as a container for other XForms 
  elements, and can serve as the root element of a standalone document or be embedded 
  in other document types such as XHTML. A single <a title="" href="#">containing document</a> 
  may contain any number of <code>xform</code> elements.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">under discussion are  XLink attributes on the <code>xform</code> element. These are: <code>xlink:type="extended"</code> and <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> - and they should be defaulted or even fixed in the Schema/DTD.</td></tr></table>
    <div class="example">
      
<h5>Example: XML Representation: &lt;<code>xform</code>&gt;</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform
  xmlns = namespace-identifier
  id = xsd:ID
&gt;
  &lt;!-- Content: (submitInfo | bind)*, model, instance --&gt;
&lt;/xform&gt;</pre></td></tr></table>
      <blockquote><p>
        
          <b>xmlns = namespace-identifier</b> - Optional standard XML attribute
    for identifying an XML namespace. It is often useful to include this standard
    attribute at this point.
        <br>
          <b>id = xsd:ID</b> - Optional unique identifier used to refer to this
  particular <code>xform</code> element.
      </p></blockquote>
    </div>
    <p>For example:</p>
    <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform xmlns="http://www.w3.org/2001/06/xforms" id="Person"&gt;
   &lt;model xlink:href="Schema-Questionnaire.xform" /&gt;
   &lt;instance xlink:href="URL-to-retrieve-defaults" /&gt; 
   ...
&lt;/xform&gt;</pre></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-model"></a>1.2.2 model</h4>
      <p>The <code>model</code> element is used to define the XForms Model. The content of the
  XForms Model may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>model</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to an externally
    defined XForms Model.
        </p></blockquote>
      </div>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-model" xlink:type="locator"</code></td></tr></table>
    </div><div class="div3">
      
<h4><a name="structure-xform-instance"></a>1.2.3 instance</h4>
      <p>The <code>instance</code> element is used to define initial instance data.
The instance data may be defined inline or obtained from a external URI.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>instance</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;instance
  id = xsd:ID
  xlink:href = xsd:anyURI
&gt;
  &lt;!-- Content: (##other) --&gt;
&lt;/instance&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Optional link to externally
  defined instance data
        </p></blockquote>
      </div>
      <p>The content of the <code>instance</code> element is arbitrary XML in 
  any namespace other than the XForms namespace. Authors must ensure that proper 
  namespace declarations are used for content within the <code>instance</code> 
  element.</p>
      <table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">As above, we need to find a place to discuss the defaulted attributes. Here they are <code>xlink:role="http://www.w3.org/2001/06/xforms-instance" xlink:type="locator"</code></td></tr></table>
      <div class="issue"><p class="prefix"><a name="issue-schemalocation"></a><b>Issue (issue-schemalocation):</b></p>
        <p>Should a <code>schemaLocation</code> attribute,
  linking the instance data with a schema definition, be present here?</p>
      </div>
    </div><div class="div3">
      
<h4><a name="structure-xform-submitInfo"></a>1.2.4 submitInfo</h4>
      <p>The <code>submitInfo</code> element provides information on how and 
  where to submit the instance data.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>submitInfo</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submitInfo
  id = xsd:ID
  xlink:href = xsd:anyURI
  method = xsd:string
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/submitInfo&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Optional unique identifier.
          <br>
            <b>xlink:href = xsd:anyURI</b> - Required destination for submitted
  instance data.
          <br>
            <b>method = xsd:string</b> - Optional indicator to provide details on
  the submit protocol. With HTTP, the default is "<code>POST</code>".
        </p></blockquote>
      </div>
    <div class="issue"><p class="prefix"><a name="submit-method-values"></a><b>Issue (submit-method-values):</b></p><p>The possible values for <code>method</code>, and their respective meanings, still need to be defined.</p></div></div><div class="div3">
      
<h4><a name="structure-xform-bind"></a>1.2.5 bind</h4>
      <p>The <code>bind</code> element represents a connection between the different 
  parts of XForms.</p>
      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>bind</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;bind
  id = xsd:ID
  ref = XForms binding expression
&gt;
  &lt;!-- Content: (##empty) --&gt;
&lt;/bind&gt;</pre></td></tr></table>
        <blockquote><p>
          
            <b>id = xsd:ID</b> - Required unique identifier.
          <br>
            <b>ref = XForms binding expression</b> - A link to an externally
  defined XForms Model.
        </p></blockquote>
      </div>
      <p>Additional details are found in the chapter <a href="#"><b>???</b></a>.</p>
    </div></div>
  <div class="div2">
    
<h3><a name="structure-xlink"></a>1.3 Integration with XLink</h3>
    <p>XForms make good use of XLink <a href="#">[ref-xlink]</a> features. To that end, the XLink namespace is integrated in the DTD/Schema, the majority of the attributes have sensible defaults, including those based on XLink roles  defined below.</p>
    <p>This document uses the convention of an <code>xlink:</code> prefix for the XLink namespace (informationally: as of this writing, the XLink namespace identifier is <code>http://www.w3.org/1999/xlink</code> - this may change when XLink reaches W3C Recommendation state. Please verify at <a href="#">[ref-xlink]</a>)</p>
    <p>Note that the XLink support uses a well-defined XLink failure mode: If an XLink attribute is not provided, the element looses its XLink specific meaning. We use this feature in order to allow application developers to either provide the model and instance via an external reference (via an <code>xlink:href</code> attribute) or to provide the data inline without the attribute. In the latter case, the XLink-specific meaning of the element is lost and the inline content used. If both inline content and external reference is provided, a processor must use  the external reference and ignore the inline content.</p>
    <p>For the purposes of XForms, we suggest that XLink aware processors switch from the <code>xlink:type="locator"</code> mode to the <code>xlink:type="resource"</code> mode. This should be specified in the document by setting <code>xlink:type="resource"</code>, though a processing agent may not depend on it. In other words, the first two of the following examples must be treated identically:</p>
    <div class="example">
      
<h5>Example: Inline XForms Model, without explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: Inline XForms Model, with explicit change to the <code>xlink:type</code>
      </h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:type="resource"&gt;
  &lt;!-- Content: ( schema subset syntax ) --&gt;
&lt;/model&gt;</pre></td></tr></table>
    </div>
    <div class="example">
      
<h5>Example: External XForms Model</h5>
      <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;model xlink:href="URI" /&gt;</pre></td></tr></table>
    </div>
    <p>XLink as originally specified allows users to provide arc-type elements to specify traversal rules. The integration of arc-type elements in XForms would require additional elements in the <code>xform</code> element that are otherwise not necessary for XForms. Hence, for children of the <code>xform</code> element, the traversal rule is to traverse <code>xlink:from</code> the current document <code>xlink:to</code> the document pointed to by the external resource. The processor should behave as if <code>xlink:actuate="onLoad"</code> was specified. The <code>xlink:show</code> attribute is meaningless in this context, anyway.</p>
    <p>An XForms processor is not required to implement full XLink--correct behavior of the <code>xlink:href</code> attribute (as defined above) is sufficient. It is permissible to construct the additional information from the semantics of the elements. An XForms Processor can not be XForms compliant, however, if it attempts to implement XLink and the implementation does not conform to XLink specification with respect to the attributes used by XForms.</p>
    <p>The following definition of the XLink roles defines the relationship between the various resources participating in a XForms-based form, not properties that are inherent to the resources. It is perfectly permissible for the same resource to participate in various XForms-based forms in different roles.</p>
    <div class="div3">
      
<h4><a name="xlink-role-all"></a>1.3.1 XLink role for XForms</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms"</code> must assume that the arcs associated with the other XLink roles for XForms (see below) behave as above. In other words, this XLink role is an additional hint beyond the element names for an XLink processor to identify the arcs. For all roles, if element names and XLink behavior conflict, XLink role behavior prevails.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-model"></a>1.3.2 XLink role for the XForms Model</h4>
      <p>The xlink-role for XForms Models is <code>http://www.w3.org/2001/06/xforms-model</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-model"</code> must assume that the referenced resource relates to the other resources as XForms Model as defined in <a href="#"><b>???</b></a>.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-instance"></a>1.3.3 XLink role for the Instance Data</h4>
      <p>The xlink-role for XForms Instances is <code>http://www.w3.org/2001/06/xforms-instance</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-instance"</code> must assume that the referenced resource is the initialization data of a form.</p>
    </div>
    <div class="div3">
      
<h4><a name="xlink-role-ui"></a>1.3.4 XLink role for the XForms User Interface</h4>
      <p>The xlink-role for XForms User Interfaces is <code>http://www.w3.org/2001/06/xforms-ui</code>. This means that XLink processors encountering a link with a <code>xlink:role="http://www.w3.org/2001/06/xforms-ui"</code> must assume that the referenced resource is the user interface of a form. Note that this role does not make an assertion about the content type of the referenced resource other than that it is an XML format. For example, it can be XHTML+XForms, pure XForms, SVG+XForms or pure SVG any other combination. This role does not correspond to any element defined in XForms; it is defined so that XLink linkbases <a href="#">[ref-xlink]</a> can be established containing all the information about a XForms document.</p>
    </div>
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="prod-notes"></a>A Production Notes (Non-Normative)</h2> 
<p>This document was encoded in the <a href="http://www.w3.org/XML/1998/06/xmlspec-v21.dtd">XMLspec
DTD</a> (which has <a href="http://www.w3.org/XML/1998/06/xmlspec-report-v21.htm">documentation</a>
available). The primary tools used for editing were SoftQuad XMetaL and EMACS with psgml and XAE. The HTML versions
were produced with the <a href="http://www.w3.org/XML/1998/06/xmlspec.xsl">xmlspec.xsl</a>
XSLT stylesheet using the Saxon engine.</p>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="concepts"></a>1 Concepts</h2> 
<p>This informative chapter provides an easily approachable description of the design
  of XForms, describing the major components and how they relate. Not every feature of
  XForms is covered here. For a complete, normative description of XForms, refer to the
  remainder of this document.</p> 
  <div class="div2">
<h3><a name="concepts-purpose-presentation"></a>1.1 Purpose and Presentation</h3>
  <p>For explanatory purposes, a form can be considered to consist of 'purpose', 'presentation',
  and 'data'. Some examples:</p>
  <table width="100%"><thead><tr><td><b>Purpose</b></td><td><b>Presentation</b></td><td><b>Data</b></td></tr>
  </thead><tbody>
  <tr><td>Data collection</td><td>Arrangement of form controls</td><td>Registration information</td></tr>
  <tr><td>Time card</td><td>How dates are entered</td><td>Days and hours worked</td></tr>
  <tr><td>Order form</td><td>How to render the form controls on small devices</td><td>Order, shipping, and payment info</td></tr>
  <tr><td>Information Please</td><td>How the form integrates with a Web site</td><td>User contact information</td></tr>
  </tbody></table>
  
  <p>The design of existing Web forms didn't separate the purpose from the presentation
  of a form, and additionally offered only a restricted representation for data captured through the form. This is the primary difference between XForms and previous form technologies.</p></div><div class="div2"> 
    
<h3><a name="concepts-xhtml"></a>1.2  Current Approach: XHTML</h3> 
  <p> Take for instance a simple eCommerce form authored in XHTML 1.0:</p>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;
&lt;body&gt;
&lt;form action="http://example.com/submit" method="post"&gt;
  &lt;span&gt;Select Payment Method: &lt;/span&gt;
  &lt;input type="radio" name="paytype" value="cash"&gt;Cash&lt;/input&gt;
  &lt;input type="radio" name="paytype" value="credit"&gt;Credit&lt;/input&gt;&lt;br/&gt;
  &lt;label&gt;Credit Card Number: &lt;input type="text" name="cc"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;label&gt;Expiration Date: &lt;input type="text" name="exp"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table><p>A browser might render this form as follows:</p>
<img src="images/concepts-xhtml.png" alt="screen shot of a graphic rendering">
<p>This form makes no effort to separate purpose (data collection semantics) from  presentation (the <code>&lt;input&gt;</code> form controls), and offers no
control over the basic name/value formatting of the resulting data. XForms greatly
improves the expressive capabilities of electronic forms.</p>
</div>
<div class="div2">
<h3><a name="concepts-xfu"></a>1.3 Stepping Up to XForms</h3>
<p>XForms are comprised of separate sections that describe what the form does, and how
the form is to be presented. This allows for flexible presentation options, making it possible for classic XHTML
form controls, as well as other form control sets such as WML to be leveraged, as
shown here.</p>
<img src="images/arch1.jpg" alt="puzzle pieces; 'XForm Model' on the left, on the right 'XForms User Interface', 'XHTML', 'WML', and a stack of 'proprietary' pieces">
<p>The simplest case involves authoring only the new XForms
<a title="" href="#">form control</a>s, leaving out the other sections of the form. To convert the previous form into
XForms this way, an <code>xform</code> element is needed in the <code>head</code> section of
the document:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>With these changes to the containing document, the previous example could be rewritten
like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne xmlns="http://www.w3.org/2001/06/xforms" ref="paytype"&gt;
  &lt;caption&gt;Select Payment Method&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="cash"&gt;Cash&lt;/item&gt;
    &lt;item value="credit"&gt;Credit&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="cc"&gt;
  &lt;caption&gt;Credit Card Number&lt;/caption&gt;
&lt;/textbox&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="exp"&gt;
  &lt;caption&gt;Expiration Date&lt;/caption&gt;
&lt;/textbox&gt;
&lt;submit xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>Notice the following features of this design:</p>
<ul><li><p>The user interface is not hard-coded to use radio buttons. Different devices
  (such as a voice browser) can render the concept of "selectOne" as appropriate.</p></li>
<li><p>Form controls always have captions directly associated with them, as child elements.</p></li>
<li><p>There is no need for an enclosing <code>form</code> element.</p></li>
<li><p>Element names for form controls have been changed: <code>textbox</code> is a specific
element, rather than a <code>type</code> attribute on <code>input</code>, as in XHTML.</p> </li>
<li><p>Data entered through the form controls ends up submitted as XML.</p></li>
</ul>
<p>With these changes, the <a title="" href="#">XForms Processor</a>
will be able to directly submit XML instance data. The XML is constructed by creating a root
element with child elements reflecting the names given to each form control.  For instance,
the submitted data might look like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- envelope, generated separately --&gt;
&lt;Envelope&gt;
  &lt;Body&gt;</pre></td></tr></table><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>    &lt;!-- serialized instance data --&gt;
    &lt;paytype&gt;Credit&lt;/paytype&gt;
    &lt;cc&gt;12354677890123456&lt;/cc&gt;
    &lt;exp&gt;04-2001&lt;/exp&gt;</pre></td></tr></table>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;!-- envelope, generated separately --&gt;
  &lt;/Body&gt;
&lt;/Envelope&gt;</pre></td></tr></table></div>
<div class="div2">
<h3><a name="concpts-instance"></a>1.4 Providing XML Instance Data</h3>
<p>Understandably, authors will often desire greater control over exact construction of the
submitted instance data. One common case might be submitting to a server XML data that is
validated against a predefined DTD or XML Schema.</p>
<p>XForms keeps track of the state of the partially filled form through
<a title="" href="#">instance data</a>, which provides an outline
of the desired  XML data, including namespace information. The instance data starts
off with the initial values for the form, is updated as the user fills the form, and
eventually is serialized and submitted. The initial instance data is taken from the
<code>instance</code> element inside the <code>xform</code> element, defined as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
    &lt;payment type="credit" xmlns="http://commerce.example.com/payment"&gt;
      &lt;cc/&gt;
      &lt;exp/&gt;
    &lt;/payment&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>This design has features worth calling out:</p><ul>
<li><p>There is complete flexibility in the structure of the XML. Notice that the item
  <code>paytype</code> is now expressed as an attribute <code>type</code> of the element
  <code>payment</code>.</p></li>
<li><p>Empty elements <code>cc</code> and <code>exp</code> serve as placeholders in the XML structure,
  and will be filled in with form data provided by the user.</p></li>
<li><p>An initial value (<code>"credit"</code>) for the form control is provided through the
  <code>type</code> attribute in the instance data. In the submitted XML, this initial value will
  be replaced by the user input, if any.</p></li>
<li><p>The instance data provides a unique namespace, which will be used when the XML gets
  submitted.</p></li></ul>
  <p>To connect this instance data with  form controls, the
<code>ref</code> attributes on the form controls need to point to the proper part of the instance
data, using <a title="" href="#">binding expressions</a>:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;selectOne ref="payment/@type"&gt;
  ...
  &lt;inputText ref="payment/cc"&gt;
  ...
  &lt;inputText ref="payment/exp"&gt;</pre></td></tr></table>
<p>Binding expressions are based on XPath <a href="#">[ref-xpath-1.0]</a>, including
  the use of the '@' character to refer to attributes, as seen here.</p>
  </div> 
<div class="div2">
<h3><a name="concepts-model"></a>1.5 The XForms Model</h3>
<p>The earlier XHTML form in <a href="#"><b>???</b></a>. Even in this short form,
there are several aspects that would be desirable to express, but would only be possible
through the addition of unstructured script code:
</p>
<ul><li><p>The credit card information fields <code>cc</code> and <code>exp</code> are
only relevant if the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The credit card information fields <code>cc</code> and <code>exp</code> should be
required when the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The field <code>cc</code> should accept digits only, and should have exactly 14,
15, or 16 digits.</p></li>
<li><p>The field <code>exp</code> should accept only valid month/date combinations.</p></li></ul>
<p>By specifying a 3rd component, the <a title="" href="#">XForms Model</a>,
authors can include rich declarative datatype and validation information in forms.</p>
<table border="1" summary="Editorial note: MJD"><tr><td width="50%" valign="top" align="left"><b>Editorial note: MJD</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">The examples here are sketchy out of necessity; this section
will need to be rewritten after the Schema Basic task force delivers its syntax recommendations.</td></tr></table>
<p>An XForms Model consists of <a title="" href="#">model items</a>, which
include XML Schema datatype information <a href="#">[ref-xschema-2]</a> as well as properties
specific to XForms.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- add to the cc model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:string"
facet pattern of "\d{14,16}"

&lt;!-- add to the exp model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:gYearMonth"</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-multiple"></a>1.6 Multiple Forms per Document</h3>
<p>XForms places no limits on the number of individual forms that can be placed in a single
<a title="" href="#">containing document</a>. When multiple forms share
the same containing document, multiple
<code>xform</code> elements are needed. The first <code>xform</code> element may skip a unique <code>id</code>
attribute (as have all the examples above), but subsequent  <code>xform</code> elements require
an <code>id</code> so that they can be referenced from elsewhere in the containing document.</p>
<p>The other side of the equation is that form controls throughout the document need to specify
which <code>xform</code> element is associated with the instance data to which they bind. This is
accomplished through an <code>xform</code> attribute alongside the <code>ref</code> attribute. The
default for the <code>xform</code> attribute is to refer to the first <code>xform</code> element in
document order.</p><p>To add a second form, an opinion poll, to our commerce example, the
following would be authored in the head section of the XHTML:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
     ...payment instance data...
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;

&lt;xform:xform id="poll"&gt;
  &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table><p>Additionally, the following form control markup in the body:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="pollOption" xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"&gt;
  &lt;caption&gt;How useful is this page to you?&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="0"&gt;Not at all helpful&lt;/item&gt;
    &lt;item value="1"&gt;Barely helpful&lt;/item&gt;
    &lt;item value="2"&gt;Somewhat helpful&lt;/item&gt;
    &lt;item value="3"&gt;Very helpful&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;submit xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>The main difference to note here is the use of <code>xform="poll"</code>,
  which identifies which form the form control binds to.</p></div>
<div class="div2">
<h3><a name="concepts-advancedUI"></a>1.7 Additional User Interface Capabilities</h3>
<p>The visual layout appearance of the initial XHTML forms such as the above example
(<a href="#"><b>???</b></a>) leaves much to be desired. </p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Need extended UI example here</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-complete"></a>1.8 Complete Document</h3>
<p>This chapter presented various bits and pieces of XForms as a tool to help readers
understand the design. Presented here is the entire XHTML+XForms document presented
in one segment.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xform="http://www.w3.org/2001/06/xforms"
      xml:lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;XForms in XHTML&lt;/title&gt;

  &lt;xform:xform&gt;
    &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
    &lt;xform:instance&gt;
      &lt;payment type="credit" xmlns="http://commerce.wizard"&gt;
        &lt;cc/&gt;
        &lt;exp/&gt;
      &lt;/payment&gt;
    &lt;/xform:instance&gt;
  &lt;/xform:xform&gt;

  &lt;xform:xform id="poll"&gt;
    &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
  &lt;/xform:xform&gt;

&lt;/head&gt;
&lt;body&gt;
    ... include advanced UI markup here ...
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="model"></a>1 The XForms Model</h2> 

<div class="div2">
<h3><a name="model-intro"></a>1.1 Introduction</h3>
<p>Chapter <a href="#"><b>???</b></a> described how XForms uses the XML Schema datatyping system, which can constrain the <a title="" href="#">value space</a> of datatypes that can be used in data collection. This chapter introduces a different set of properties, called <a title="" href="#">model item properties</a>, which define XForms-specific behaviors and metadata useful for data collection.</p>
</div>

<div class="div2">
<h3><a name="model-prop"></a>1.2 Model Item Properties</h3>

<p>Model item properties fall into two basic categories:</p><ul><li><p><a title="" href="#">Computed expressions</a> are XPath expressions that provide a value to the XForms Processor. The value is recomputed at certain times, according to the XForms Processing Model (see <a href="#"><b>???</b></a>).</p></li><li><p>All other properties are fixed, static values that the XForms Processor evaluates only once.</p></li></ul>
  
<p>The following properties are available for all <a title="" href="#">model items</a>,
  and their syntax is explained throughout this chapter. For each property the following information is provided:</p><blockquote><p>Description<br>Computed Expression (yes or no)<br>Legal Values<br>Default Value<br>Additional descriptive text</p></blockquote><div class="div3">
<h4><a name="model-prop-name"></a>1.2.1 name</h4>
<p>Description: provides a specific name for the model item.</p>
<p>Computed Expression: No</p><p>Legal Values: only values of type <code>xsd:NCName</code></p>
<p>Default Value: none.</p>
<p>Authors can associate a human-readable name with a model item through 
  the use of the <code>name</code> property. Each <code>name</code> should be 
  unique within the scope of the XForms Model where it is declared.</p>

</div>

<div class="div3">
<h4><a name="model-prop-type"></a>1.2.2 type</h4><p>Description: assigns a Schema datatype.</p><p>Computed Expression: No</p><p>Legal Values: any <code>xsd:QName</code> representing a Schema datatype.</p><p>Default Value: <code>xsd:anyType</code></p><p>The concept of typed data is important to forms. The assignment of a particular datatype to a model item affects validation of the data it can accept, as well as affecting which form controls to which it can bind.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>The XForms Model uses properties "name" and "type"
as in XML Schema;
the concrete syntax used to define XForm Models, and
consequently the use of these properties  will be
made concrete in a forthcoming revision of this Working Draft.
</p></div></div><div class="div3">
<h4><a name="model-prop-readOnly"></a>1.2.3 readOnly</h4>
<p>Description: describes whether the value is restricted from changing. 
  The ability of form controls to have focus and appear in the navigation order is unaffected 
  by this property.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code>.</p>
<p>Default Value: <code>false</code>.</p>
<p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should not allow any changes to the bound instance data item.</p><p>In addition to restricting value changes, the <code>readOnly</code> property 
  provides a hint to the XForms User Interface. Form controls 
  bound to a model item with the <code>readOnly</code> 
  property should indicate that entering or changing the value is not allowed. 
  The hint provided has no effect on visibility, focus, or navigation order.</p>
</div>

<div class="div3">
<h4><a name="model-prop-required"></a>1.2.4 required</h4>
<p>Description: describes whether a value is required before the instance 
  data is submitted.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>false</code>.</p>
<p>Often forms require certain values to be entered. This may be 
  a static requirement, or may only be the case if some condition is satisfied. When evaluating to <code>true</code>, this property indicates that a non-empty instance data item is required before a submission of instance data can occur. Non-empty is defined as:</p><ol><li><p>If the bound instance data item is the text content of an element, the element  must not have the <code>xsi:nil</code> attribute set to <code>true</code>.</p></li><li><p>The bound instance data item must be convertible to an XPath <code>string</code> with a length greater than zero.</p></li></ol>
<p>Except as noted below, the <code>required</code> property does not provide 
  a hint to the XForms User Interface regarding visibility, focus, or navigation order.
  XForms authors are strongly encouraged to make sure that form controls that
  accept <code>required</code> data are visible. An XForms Processor may provide a
  unique indication that a form control is required, and may provide immediate feedback, including limiting navigation, for required form controls.</p>

<div class="issue"><p class="prefix"><a name="issue-default-default"></a><b>Issue (issue-default-default):</b></p><p>It might be useful to set the default for the
required attribute for an entire XForms Model. What should the default default be?
How could we assign a default for a single XForms Model? This could apply to other
attributes as well, e.g. readOnly, etc...</p></div>
<p>The chapter <a href="#"><b>???</b></a> contains details on how the XForms Processor enforces required values.</p></div>

<div class="div3">
<h4><a name="model-prop-relevant"></a>1.2.5 relevant</h4>
<p>Description: indicates whether the model item is currently relevant to the
  rest of the XForms Model. XForms Processors would typically not render an
  associated form control, including children, when the value is <code>false</code>.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>Many forms have fields dependent on other conditions. For example, a form might 
  ask whether the respondent owns a car. It is only appropriate to ask for further information 
  about their car if they have indicated that they own one.</p><p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should render a form control, and conversely, when evaluating to <code>false</code>, indicates that the form control should not be rendered.</p>
<p>The <code>relevant</code> property provides hints to the XForms User Interface regarding 
  visibility, focus, and navigation order. In general, when <code>true</code>, associated 
  form controls should be made visible. When <code>false</code>, associated form
  controls should be made unavailable, removed from the navigation order, 
  and not allowed focus.</p>
<p>The following table shows the user interface interaction between <code>required</code> and 
  <code>relevant</code>.</p>
<table border="1" cellspacing="1" cellpadding="4" summary="shows combinations of depends and required">
<tbody><tr><td> </td><td><code>required="true"</code></td><td><code>required="false"</code></td></tr>
<tr><td><code>relevant="true"</code></td>
<td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is required.</td>
  <td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is optional.</td></tr>
  <tr><td><code>relevant="false"</code></td>
  <td>The form control (and any children) should be hidden or unavailable to 
  the user. Entering a value or obtaining focus should not be allowed. The 
  XForms User Interface may indicate that should the form control become relevant, 
  a value would be required.</td><td>The form control (and any children) should be
  hidden or unavailable to the user. Entering a value or obtaining focus should not
  be allowed.</td></tr></tbody></table>
 </div>

<div class="div3">
<h4><a name="model-prop-calculate"></a>1.2.6 calculate</h4>
<p>Description: indicates that the instance data item associated with the model item is to 
  be dynamically calculated.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible  to an XPath datatype compatible 
  with the associated XML Schema datatype.</p>
<p>Default Value: none.</p>
<p>An XForms Model may include model items that are computed from the other values 
  elsewhere. For example, the sum over line items for quantity times unit price, 
  or the amount of tax to be paid on an order. The computed value can be represented 
  as a computed expression using the values of other model items. The XForms Processing
  Model indicates how and when the calculation is recomputed.</p>
</div>

<div class="div3">
<h4><a name="model-prop-priority"></a>1.2.7 priority</h4>
<p>Description: indicates the relative priority for calculations of the 
  model item.</p><p>Computed Expression: No</p>
<p>Legal Values: any expression that is convertible to an integer in the range 
  0-32767.</p>
<p>Default Value: 0.</p>
<p>For model items that are calculated, this optional property specifies a calculation 
  order. The XForms Processing Model uses this property to determine the calculation order for multiple calculations.</p>
</div>

<div class="div3">
<h4><a name="model-prop-validate"></a>1.2.8 validate</h4>
<p>Description: specifies the predicate that needs to be satisfied for the associated instance data item to be considered valid.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>An XForms Model may include model items that need to be validated. When evaluating to <code>true</code>, indicates that the model item 
  is considered valid. The chapter <a href="#"><b>???</b></a>  describes 
  details such as immediate validation vs. onsubmit validation.</p>
<p>Computed expressions used here are not restricted to examining the instance 
  data item they are invoked on. XPath, plus the extensions in this chapter, provide 
  the means to traverse the instance data, as well as call-outs to external script, enabling potentially complex validations.</p>
<p>The XForms User Interface may indicate whether a form control is currently valid or 
  invalid.</p>
<div class="issue"><p class="prefix"><a name="issue-cascade"></a><b>Issue (issue-cascade):</b></p><p>Will the <code>validate</code> property be evaluated on
  all the parent or child model items whenever a value changes? We need to make sure
  that inter-model item constraints will get evaluated.</p></div>
</div>
</div>

<div class="div2">
<h3><a name="model-using"></a>1.3 Using Datatypes in the XForms Model</h3>
<p>The following section is being rewritten with the guidance of the XML Schema Working Group. In its current state, it is an informative listing of the functionality that we are planning in XForms 1.0, with illustrative examples of similar functionality in XML Schema. A subsequent Working Draft will contain normative details on how the functionality is described in terms of XForms.</p>
  
<div class="div3">
<h4><a name="model-using-atomic"></a>1.3.1 Atomic Datatype</h4>
<p>At the simplest level, it is necessary to associate a datatype with a model item. This has the effect of restricting the allowable values of the associated instance data item to valid representations of the lexical space of the datatype, including enforcing of any constraining facets.</p>
<p>Example Schema Syntax: declaring a datatype based on an <code>xsd:string</code> plus additional constraining facet would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:minLength value="1"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>


</div>

<div class="div3">
<h4><a name="model-using-enum"></a>1.3.2 Closed Enumeration</h4>
<p>Often it is necessary to restrict the allowable values of the associated instance data item to a closed list of alternatives. Also under consideration is a method to obtain a list at runtime, for example, from an XPath node-set.</p>



<p>Example Schema Syntax: declaring a datatype allowing enumerated values of an <code>xsd:string</code> would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:enumeration value="Mastercard"/&gt;
    &lt;xsd:enumeration value="Diner's Club"/&gt;
    &lt;xsd:enumeration value="American Express"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>

</div><div class="div3">
<h4><a name="model-using-openenum"></a>1.3.3 Open Enumeration</h4><p>A special case of enumerated datatypes is the common form design pattern of a list, with an 'other, please specify' choice. This is referred to as an open enumeration.</p><p>Example Schema Syntax: declaring an open enumeration is possible through a combination of union and enumeration features, as follows:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="xsd:string"&gt;
    &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:enumeration value="Mastercard"/&gt;
        &lt;xsd:enumeration value="Diner's Club"/&gt;
        &lt;xsd:enumeration value="American Express"/&gt;
      &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
  &lt;/xsd:union&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>


  
<div class="div3">
<h4><a name="model-using-union"></a>1.3.4 Union</h4>
<p> It may be desirable for data collection purpose to allow an instance data item to be a valid lexical value of one among several datatypes. Unions are defined in XML Schema.</p>
<p>Example Schema Syntax:  declaring a datatype allowing either a <code>creditCardType</code> or <code>bonusProgramType</code> value would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="creditCardType bonusProgramType"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>
</div><div class="div3">
<h4><a name="model-using-array"></a>1.3.5 Multiple Selection</h4><p>Some form controls, such as <code>selectMany</code>, have the notion of supporting more than one simpleType value at any given time. This corresponds with Schema list datatypes.</p><p>Example Schema Syntax: declaring a list-derived datatype would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType name="listOfMyIntType"&gt;
  &lt;xsd:list itemType="xsd:int"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>

<div class="div3">
<h4><a name="model-using-repeat"></a>1.3.6 Repeating Line Item</h4>
<p>It is common for certain types of forms, such as order forms, to contain repeating structures, typically line items. If each individual structure were represented as a Schema complexType, a line item group would be analogous to the <code>sequence</code> construct.</p>
<p>Example Schema Syntax: a datatype allowing a sequence of child elements would be declared as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:complexType&gt;
  &lt;xsd:sequence&gt;
    &lt;xsd:element name="child" type="xform:string" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</pre></td></tr></table>
<p>Chapter <a href="#"><b>???</b></a> contains details on representing this with XForms User Interface form controls, as well as details for how this relates to the instance data in chapter <a href="#"><b>???</b></a>.</p></div>

<div class="div3">
<h4><a name="model-using-switch"></a>1.3.7 Alternate Representation</h4>
<p>In some forms, alternate representations might be necessary for underlying instance data structures.</p>
<p>Example Schema Syntax: a Schema <code>choice</code> element is roughly analogous to this, although XForms uses a more dynamic version. Examples of this are found in <a href="#"><b>???</b></a></p>



</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="title"></a>1 Title</h2>
<p>x</p> 
  <div class="div2"> 
    
<h3><a name="N1000A"></a>1.1 x</h3> 
  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="references"></a>1 References</h2> 
 
<div class="div2">
<h3><a name="references-norm"></a>1.1 Normative References</h3>
  <dl> 
  
  <dt class="label"><a name="ref-css2"></a>CSS2</dt><dd>
  <a href="http://www.w3.org/TR/REC-CSS2/"><cite>Cascading Style Sheets, level 2 (CSS2)
  Specification</cite></a>, Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian Jacobs, 1998.
  W3C Recommendation available at: http://www.w3.org/TR/REC-CSS2.</dd>

  <dt class="label"><a name="ref-dom2-events"></a>DOM2 Events</dt><dd>
  <a href="http://www.w3.org/TR/DOM-Level-2-Events/"><cite>Document Object Model (DOM)
  Level 2 Events Specification</cite></a>, Tom Pixley, 2000. W3C Recommendation 
  available at: http://www.w3.org/TR/DOM-Level-2-Events/.</dd> 

  <dt class="label"><a name="ref-iso-4217"></a>ISO 4217</dt><dd>
  <cite>ISO Standards for Currency Names</cite>, International Organization for
  Standardization (ISO), 1999.</dd>

  <dt class="label"><a name="ref-rfc-2388"></a>RFC 2388</dt><dd>
  <a href="http://www.ietf.org/rfc/rfc2388.txt"><cite>RFC 2388: Returning Values from
  Forms:  multipart/form-data</cite></a>, L. Masinter, 1998. Available at:
  http://www.ietf.org/rfc/rfc2388.txt.</dd>

  <dt class="label"><a name="ref-wml1.3"></a>WML1.3</dt><dd>
  <a href="http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf"><cite>Wireless
  Application Protocol Wireless Markup Language Specification Version 1.3</cite></a>,
  Wireless Application Protocol Forum, Ltd., 2000. Available at: http://www1.wapforum.org/tech/documents/WAP-191-WML-20000219-a.pdf.</dd>

  <dt class="label"><a name="ref-xforms-req"></a>XForms Req</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-forms-req"><cite>XForms Reqirements</cite></a>,
  Micah Dubinko, Dave Ragget, Sebastian Schnitzenbaumer, Malte Wedel, 2001. 
  W3C Working Draft: available at: http://www.w3.org/TR/xhtml-forms-req.</dd>

  <dt class="label"><a name="ref-xhtml-events"></a>XHTML Events</dt><dd>
  <a href="http://www.w3.org/TR/xhtml-events/"><cite>XHTML Events -
  An updated events syntax for XHTML</cite></a>, Ted Wugofski, 2000. W3C Working Draft 
  available at: http://www.w3.org/TR/xhtml-events.</dd>

  <dt class="label"><a name="ref-xlink"></a>XLink</dt><dd>
  <a href="http://www.w3.org/TR/xlink/"><cite>XML Linking Language (XLink) Version 1.0</cite></a>, Steve DeRose, Eve Maler, David Orchard, 2000. W3C Proposed Recommendation 
  available at: http://www.w3.org/TR/xlink/.</dd>

  <dt class="label"><a name="ref-xml-1.0"></a>XML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml"><cite>Extensible Markup Language (XML) 1.0
  (Second Edition)</cite></a>, Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,
  2000. W3C Recommendation: available at: http://www.w3.org/TR/REC-xml</dd>

  <dt class="label"><a name="ref-xml-names"></a>XML Names</dt><dd>
  <a href="http://www.w3.org/TR/REC-xml-names/"><cite>Namespaces in XML</cite></a>, 
  Tim Bray, Dave Hollander, Andrew Layman, 1999. W3C Recommendation available at: 
  http://www.w3.org/TR/REC-xml-names.</dd>

  <dt class="label"><a name="ref-xpath-1.0"></a>XPath 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xpath"><cite>XML Path Language (XPath) Version
  1.0</cite></a>, James Clark, Steve DeRose, 1999. W3C Recommendation available at:
  http://www.w3.org/TR/xpath.</dd>

  
  <dt class="label"><a name="ref-xschema-1"></a>XML Schema part 1</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-1/"><cite>XML Schema Part 1: Structures</cite></a>, 
  Henry S. Thompson, David Beech, Murray Maloney, Noah Mendelsohn, 2001. W3C  
    Recommendation available at: http://www.w3.org/TR/xmlschema-1/.</dd>

  <dt class="label"><a name="ref-xschema-2"></a>XML Schema part 2</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-2/"><cite>XML Schema Part 2: Datatypes</cite></a>,
  Paul V. Biron, Ashok Malhotra, 2001. W3C  Recommendation available at: 
  http://www.w3.org/TR/xmlschema-2/.</dd>
</dl> 
</div>
  
  
  <div class="div2">
<h3><a name="references-inform"></a>1.2 Informative References</h3><dl> 
  
  <dt class="label"><a name="ref-ansi-x3-274"></a>ANSI X3-274</dt><dd>
  <cite>Information Technology - Programming Language REXX.</cite>, American
  National Standards Institute (ANSI), 1996. Document Number: ANSI X3.274-1996.</dd>

  <dt class="label"><a name="aui-conversational-gestures"></a>AUI97</dt><dd>
  <cite>Auditory User Interfaces--Toward The Speaking Computer</cite>, T. V. Raman, Kluwer
  Academic Publishers, 1997. ISBN:0-7923-9984-6.</dd>
  
  
  <dt class="label"><a name="ref-ecma-262"></a>ECMA 262</dt><dd>
  <a href="ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf"><cite>ECMA-262: ECMAScript Language
  Specification</cite></a>, European Computer Manufacturers' Association (ECMA), 1999.
  Available at ftp://ftp.ecma.ch/ecma-st/Ecma-262.pdf.</dd>

  
  <dt class="label"><a name="ref-unicode"></a>Unicode</dt><dd>
  <cite>The Unicode Standard, Version 3.0</cite>, Joan Aliprand, Julie Allen, Joe Becker, Mark Davis, Michael Everson, Asmus 
  Freytag, John Jenkins, Mike Ksar, Rick McGowan, Lisa Moore, Michel Suignard, Ken Whistler. 
  Addison-Wesley Developers Press, , Reading, Mass., 2000.</dd>

  <dt class="label"><a name="ref-xhtml-1.0"></a>XHTML 1.0</dt><dd>
  <a href="http://www.w3.org/TR/xhtml1/"><cite>XHTML 1.0: The
  Extensible HyperText Markup Language - A Reformulation of HTML 4 in XML 1.0</cite></a>,
  Steven Pemberton, et. al, 2000. W3C Recommendation available at:
  http://www.w3.org/TR/xhtml1.</dd>

  
  <dt class="label"><a name="ref-xschema-0"></a>XML Schema part 0</dt><dd>
  <a href="http://www.w3.org/TR/xmlschema-0/"><cite>XML Schema Part 0: Primer</cite></a>,
  David C. Fallside, 2001. W3C Recommendation available at: http://www.w3.org/TR/xmlschema-0/.</dd>
  
  
  <dt class="label"><a name="ref-xslt"></a>XSLT</dt><dd>
  <a href="http://www.w3.org/TR/xslt"><cite>XSL Transformations (XSLT) Version 1.0</cite></a>,
  James Clark, 1999. W3C Recommendation available at: http://www.w3.org/TR/xslt.</dd>

</dl>
</div> 
</div>